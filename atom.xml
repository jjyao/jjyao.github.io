<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jiajun Yao]]></title>
  <link href="http://blog.jjyao.me/atom.xml" rel="self"/>
  <link href="http://blog.jjyao.me/"/>
  <updated>2021-12-28T16:31:38-08:00</updated>
  <id>http://blog.jjyao.me/</id>
  <author>
    <name><![CDATA[jjyao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Crossing the Chasm]]></title>
    <link href="http://blog.jjyao.me/blog/2021/12/27/crossing-the-chasm/"/>
    <updated>2021-12-27T20:26:25-08:00</updated>
    <id>http://blog.jjyao.me/blog/2021/12/27/crossing-the-chasm</id>
    <content type="html"><![CDATA[<p>For B2B high-tech startup, there is a period when the product is already successful in the early market and is trying to enter the mainstream market. This period is called crossing-the-chasm period and it&rsquo;s peril. Many startups die during this period and never reach the mainstream market. This book tells us why there is such a period and why it&rsquo;s dangerous. It also shows how we can get through this period and be successful in the mainstream market.</p>

<!-- more -->


<h2>Technology Adoption Life Cycle</h2>

<p><img src="http://blog.jjyao.me/images/post/crossing-the-chasm/technology-adoption-life-cycle.png"></p>

<p>For the technology or product offered by a company, its adoption goes through several phases from left to right.</p>

<h4>Innovators (Technology Enthusiasts)</h4>

<p>This is a group of people who are techies. They just like new technologies for its own sake and are willing to try them. They don&rsquo;t represent a significant market in themselves, nor do they have enough buying power. However they are still important to win over because 1) they are the sounding board and test bed for the new technology or product 2) they are the reference base for early adopters.</p>

<h4>Early Adopters (Visionaries)</h4>

<p>This group of people treat the new technology or product as an opportunity to have a strategic leap forward. They want fundamental breakthrough enabled by the new technology and are willing to take high risks due to the potential order-of-magnitude return on investment. These people have big budget to implement their strategic initiative so they are an important source of high-tech development capital.</p>

<h4>Early Majority (Pragmatists)</h4>

<p>These people represent the mainstream market that any startup wants to win due to its volume. Unlike visionaries, they want incremental, predictable improvements instead of disruptive ones. They have the following characteristics: 1) they are loyal once won and will even help you to defend new comers 2) they want to buy the <em>whole product</em> from the <em>market leader</em> 3) they reference other pragmatists not visionaries.</p>

<h4>Late Majority (Conservatives)</h4>

<p>They buy the extremely mature product with low cost just to stay on par with the rest of the world. They are the low-margin end of the market but have high volume.</p>

<h4>Laggards (Skeptics)</h4>

<p>Even though they may not buy products, they do point continually to the discrepancies between the sales claims and the delivered product. Startups should use their feedbacks to continuously improving the products.</p>

<h2>Word of Mouth</h2>

<p>In the high-tech buying process, word of mouth is the number-one source of information that buyers reference. People reference each other during the buying decision.</p>

<h2>Whole Product</h2>

<p><img src="http://blog.jjyao.me/images/post/crossing-the-chasm/whole-product.png"></p>

<p>In the mainstream market, people want to buy whole product not core product. In other words, they want to buy the product that has a surrounding ecosystem, which radically reduces their burden of support. Since whole products grow up around the market leading products and not around the others, pragmatists buy from market leaders.</p>

<h2>Chasm</h2>

<p>The chasm between visionaries and pragmatists exists because visionaries is a very poor reference base for pragmatists. They are fundamentally different groups of people for the following reasons: 1) visionaries don&rsquo;t need many references to buy a product, rather they want to be the first to buy the product and create competitive advantage; pragmatists, on the other hand, need extensive reference to prove the validity of the new product 2) visionaries care more about the future, in fact, they are defining the future, while pragmatists don&rsquo;t put a lot of stake in futuristic things 3) visionaries don&rsquo;t expect the existence of the whole product and they are willing to piece together one themselves in return for getting a jump on their competition, while pragmatists only want to buy the whole product 4) visionaries, successful or not, don&rsquo;t plan to stick around long while pragmatists are cautious about their decisions since they know they will have to live with the results. This effectively means that when we try to win over pragmatists, there is effectively no reference base to start with.</p>

<h2>D-Day</h2>

<p>The way to cross the chasm successfully is by launching a D-Day type of invasion focusing on a highly specific target segment within a mainstream marketplace.</p>

<h4>Target the Point of Attack</h4>

<p>The first thing to do is finding the target niche market segment which is also called the beachhead segment. The segment should be <em>big enough to matter, small enough to win and good fit with your crown jewels</em>. Customers in that segment should have compelling reason to buy the product or in other words, feel enough pain. Instead of picking the optimal beachhead to be successful, which is very hard if not impossible, what more important is winning whatever good enough beachhead that&rsquo;s picked.</p>

<p>It&rsquo;s very important to pick a very specific beachhead to conquer instead of the entire mainstream market when we are crossing the chasm for the following reasons: 1) word-of-mouth has boundaries which is ususally within a market segment so winning over one or two customers in each of five or ten different segments is worse than winning four or five customers in one segment in terms of word-of-mouth effect 2) it&rsquo;s easier to become <em>a big fish in a small pond</em> and achieve market leadership given that pragmatists want to buy from market leaders 3) our scarce resource is only enough to build the whole product for a single niche market.</p>

<h4>Assemble the Invasion Force</h4>

<p>The next thing is creating the ecosystem around our core product, namely the whole product. This often requires bringing in partners and allies needed to make it a reality.</p>

<h4>Define the Battle</h4>

<p>Then we need to create the competition and positioning in order for our product to be <em>easy to buy</em>. Viable competition is important since where there is no competition, there is no market. <em>Market alternatives</em> indicate the existence of the budget dollars to buy our products and <em>product alternatives</em> call out the differentiation. The positioning of our product should be short enough to pass the elevator test so that it can successfully create and occupy a space inside the target customers&#8217; head.</p>

<h4>Launch the Invasion</h4>

<p>Finally we need to select the intended distribution channel and set pricing to give us motivational leverage over that channel.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Multipliers: How the Best Leaders Make Everyone Smarter]]></title>
    <link href="http://blog.jjyao.me/blog/2021/08/29/multipliers-how-the-best-leaders-make-everyone-smarter/"/>
    <updated>2021-08-29T22:07:08-07:00</updated>
    <id>http://blog.jjyao.me/blog/2021/08/29/multipliers-how-the-best-leaders-make-everyone-smarter</id>
    <content type="html"><![CDATA[<p>When you ask people if they want to be multipliers who make surrounding people better or diminishers who make everyone worse, most people will say that they want to be multipliers. However, in reality, many people are accidental diminishers in some aspects. Being a true multiplier requires a multiplier mindset and certain approaches. This book tells you what multipliers are and how to become one.</p>

<!-- more -->


<p>Multipliers are leaders who make people better and more capable. They can access and revitalize the intelligence in the people around them. They are <em>genius makers</em> by accessing and multiplying the genius in others. They have a <em>growth mindset</em>, which is a belief that basic qualities like intelligence and ability can be cultivated through effort. In contrast, diminishers drain intelligence and capability out of the people around them.</p>

<h2>Multiplier Mindset</h2>

<p>What people believe affects their behaviors. As a result, we need to have a multiplier mindset first in order to become one. The fundamental assumption a multiplier has is that people are smart. They discover the genius in people by asking &ldquo;how is this person smart?&rdquo;. Multipliers believe that:</p>

<ol>
<li><em>People are smart and will figure things out.</em></li>
<li><em>If I can find someone&rsquo;s genius, I can put them to work.</em></li>
<li><em>People&rsquo;s best thinking must be given, not taken.</em></li>
<li><em>People get smarter by being challenged.</em></li>
<li><em>With enough minds, we can figure it out.</em></li>
</ol>


<h2>Challenger vs Know-it-all</h2>

<p>Since multipliers believe that people get smarter by being challenged, they ask really insightful and interesting questions that make people think. They don&rsquo;t limit the team to what they know, they push their teams beyond their own knowledge and that of the organization. Even if they have the answer, the don&rsquo;t just give them. Instead, they just provide enough information to provoke thinking and to help people discover and see the opportunity for themselves. <em>What&rsquo;s more important as a leader is not having the right answer but asking the right questions.</em></p>

<h2>Debate Maker vs Decision Maker</h2>

<p>Multipliers believe that with enough minds, we can figure it out. As a result, they like <em>collective debate</em>. Through debate, they challenge and stretch what people know, thus making the organization smarter over time and creating the organizational will to execute the decisions made. In contrast, when people execute an undebated decision, they turn to debating the soundness of a decision rather than executing it.</p>

<h2>Liberator vs Tyrant</h2>

<p>Multipliers believe that people&rsquo;s best thinking must be given, not taken. They provide a safe environment for people to think and make mistakes. The highest quality of thinking cannot emerge without learning and learning can&rsquo;t happen without mistakes. <em>Intimidation and fear rarely produce truly great work.</em> Speaking of creating a safe environment, there is no easier way to invite experimentation and learning than to <em>share stories about multipliers&#8217; own mistakes</em>.</p>

<p>While multiplier gives space and safe environment, they also demand the best work. It&rsquo;s a fair trade. They create an intense environment that requires people&rsquo;s best thinking and their best work. They generate pressue, but they don&rsquo;t generate stress. Requiring people&rsquo;s best work is different from insisting on desired outcomes. Stress is created when people are expected to produce outcomes that are beyond their control. But they feel positive pressure when they are held to their best work. <em>Multipliers distinguish best work from outcomes.</em></p>

<h2>Investor vs Micro-manager</h2>

<p>Multipliers believe that people are smart and will figure things out. So they operate as investors, giving ownership that keeps rolling back to other people. As investors, they define ownership, invest resources and hold people <em>accountable</em>. When they teach, they invest in their people&rsquo;s ability to solve and avoid problems in the future. In the end, multipliers enable others to operate independently by giving other people ownership for results and investing in their success. They create organizations that can perform and win, not only without them on the field, but long after their direct influence is felt.</p>

<h2>Talent Magnet vs Empire Builder</h2>

<p>Multipliers believe that if I can find someone&rsquo;s genius, I can put them to work. They are like magnets that draw in talent and develop it to its fullset. They look for talent everywhere, find people&rsquo;s <em>native genius</em>, utilize people at their fullsets and remove the blockers. Multipliers not only notice people&rsquo;s talent, they <em>label</em> it for them. By telling people what they see, they raise people&rsquo;s awareness and confidence, allowing them to provide their capability more fully. What&rsquo;s more, once they uncover the native genius of others, they look for opportunities that demand that capability.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Have Learned From the LinkedIn Graph Database Team]]></title>
    <link href="http://blog.jjyao.me/blog/2021/08/22/what-i-have-learned-from-the-linkedin-graph-database-team/"/>
    <updated>2021-08-22T19:48:33-07:00</updated>
    <id>http://blog.jjyao.me/blog/2021/08/22/what-i-have-learned-from-the-linkedin-graph-database-team</id>
    <content type="html"><![CDATA[<p>I had worked for the LinkedIn graph database team for 5+ years and we successfully built a <a href="https://engineering.linkedin.com/blog/2020/liquid-the-soul-of-a-new-graph-database-part-1">graph database</a> serving the entire LinkedIn economic graph. In this post, I want to share what I have learned. Disclaimer: many of the words and wisdom are from my great colleagues.</p>

<!-- more -->


<h3>All incidents are gifts</h3>

<p>Incidents are opportunities for us to fix bugs, improve the stability of the system and improve the process of handling incidents. We should treat them as gifts and learn as much as possible out of them.</p>

<h3>All incidents should be novel</h3>

<p>This basically means that we should never make the same mistake twice. Once an incident happens, we try as hard as we can to fix it and make sure it will never happen again with the same root cause.</p>

<h3>Hardware failure is common at scale</h3>

<p>We have, on average, 2 DIMM failures per week so we should design our software in a fault tolerant way.</p>

<h3>API is sticky</h3>

<p>Once clients start to use the exposed APIs, they become extremely sticky. That means we need to design them carefully since changing them afterwards is <a href="https://www.joelonsoftware.com/2004/06/13/how-microsoft-lost-the-api-war/">costly</a>.</p>

<h3>Logging is talking to the user/operator</h3>

<p>How programs talk to humans has a huge impact on the rate at which mistakes can be fixed. If programs tell humans exactly what is wrong, that rate can be very fast. If programs are silent or overwhelm humans with too much information, that rate can be extremely slow. When there are too many spurious errors, people get alerts fatigue and they will overlook the real problems.</p>

<p>When we write logs in our code, we need to remember that the audience is not just us but also people that may not be familiar with the entire codebase like SREs. That means the log messages should be crystal clear and actionable. Imagining how frustrating it is when oncalls get paged at 2am and they have no clue what those log messages mean and how to act on them. <a href="https://spark.apache.org/error-message-guidelines.html">Here</a> is a guideline of how to write good error messages.</p>

<h3>Comment on why</h3>

<p>Code comments should say why the code is there instead of what the code does. What the code does should be clear from the code itself. If it is not the case, then we should refactor the code to make it clear instead of adding a comment. A large decaying comment is frequently just an apology for crappy code. Don&rsquo;t accept the apology. Fix the code. Don&rsquo;t give up until you try your best. Then, as a last resort, write the comment.</p>

<h3>Good enough is not enough</h3>

<p>The math is simple: 0.8 * 0.8 * 0.8 * &hellip;.. = 0. If every time we just achieve good enough, then eventually it will become zero/failure. We should never settle and always try to do as best as we can.</p>

<h3>Conduct code review</h3>

<p>Code review is not just about finding bugs. We should also think about how we can rewrite the code in a better way that is easily understandable and unlikely to cause future bugs.</p>

<p>Also reading other people&rsquo;s good reviews allows us to learn not only from our own mistakes but also the mistakes of others.</p>

<h3>Write design document</h3>

<p>&ldquo;Writing is nature’s way of letting you know how sloppy your thinking is&rdquo; by Leslie Lamport. The very act of writing the design document helps to clarify the design itself. It also helps people to learn or understand the system in the future.</p>

<h3><a href="http://blog.jjyao.me/blog/2021/08/18/keep-your-eyes-open/">Keep your eyes open</a></h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keep Your Eyes Open]]></title>
    <link href="http://blog.jjyao.me/blog/2021/08/18/keep-your-eyes-open/"/>
    <updated>2021-08-18T08:10:01-07:00</updated>
    <id>http://blog.jjyao.me/blog/2021/08/18/keep-your-eyes-open</id>
    <content type="html"><![CDATA[<p>As engineers, our job is to solve problems. In order to do that, we need to discover them first. To me, the best way to find problems is through doing things while keeping the eyes open.</p>

<!-- more -->


<p>Problems are everywhere, it&rsquo;s just whether we can find them or not. Whenever we are doing some task, it&rsquo;s not just about finishing the task itself, it&rsquo;s also about discovering new problems along the way. Here we have a cycle of <code>doing things -&gt; discovering problems -&gt; doing more things</code>. Through this cycle, we make whatever we are building better and better.</p>

<p>If we treat everything we do as an opportunity of discovering new problems, then we will find tons of them. To make this more concrete, let me give some examples:</p>

<ul>
<li>Whenever we touch a piece of code, even just one line, it&rsquo;s an opportunity to look at the surrounding code and see if we can refactor to make it better.</li>
<li>Whenever we do some repetitive work, it&rsquo;s an opportunity to automate it.</li>
<li>Whenever we talk to clients, it&rsquo;s an opportunity to learn their pain points.</li>
</ul>


<p>Amar Bose also told an interesting <a href="https://www.youtube.com/watch?v=ySAXW-7WrDg">story</a> where the student with the eyes open saw a huge opportunity while doing a quite tedious work.</p>

<p>Keep your eyes open, problems and opportunities are around you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Response Time and Throughput]]></title>
    <link href="http://blog.jjyao.me/blog/2021/04/04/response-time-and-throughput/"/>
    <updated>2021-04-04T13:43:32-07:00</updated>
    <id>http://blog.jjyao.me/blog/2021/04/04/response-time-and-throughput</id>
    <content type="html"><![CDATA[<p>For the discussion of this post, response time is the time between a service receiving a request and returning a response. It is the sum of waiting time and processing time. Waiting time is how long the request waits in queues before being processed. Processing time is the time to actually do the work of the request. Throughput is the number of requests that are completed per unit time. This post discusses how they can be possibly related.</p>

<!-- more -->


<h2>Lower Processing Time &amp; Higher Throughput</h2>

<p>If we reduce the processing time, the throughput might be higher. For example, the throughput is 10 requests per second if the processing time is 100ms CPU time assuming it&rsquo;s a single CPU system. If the processing time is reduced to 10ms CPU time, the throughput is increased to 100 requests per second.</p>

<h2>Higher Processing Time &amp; Lower Throughput</h2>

<p>This is the opposite of lower processing time &amp; higher throughput. This is undesirable since we lose both processing time and throughput.</p>

<h2>Lower Processing Time &amp; Lower Throughput</h2>

<p>By optimizing the part of the system that&rsquo;s not the throughput bottleneck, the throughput keeps the same or is even lower. For example, the request processing time is 100ms CPU time and 10ms IO time. Since the request is CPU bound, reducing the IO time will bring down the overall processing time but throughput will still be the same: 10 requests per second. If reducing the IO time comes with the cost of increasing the CPU time (say CPU time becomes 101ms and IO time becomes 5ms), the throughput is actually lower even though the processing time is also lower.</p>

<h2>Higher Processing Time &amp; Higher Throughput</h2>

<p>If we can reduce the time spent on the bottleneck part of the system at the cost of increasing overall processing time, we can get higher throughput. Lets still use the request with 100ms CPU time and 10ms IO time as an example. If we can reduce the CPU time to 90ms at the cost of increasing the IO time to 30ms, the throughput is higher now even though the overall processing time is also higher.</p>

<h2>Higher Waiting Time &amp; Higher Throughput</h2>

<p>The maximum throughput we can get is 10 requests per second if the processing time is 100ms CPU time. To achieve that maximum throughput, we need to make sure the CPU is busy all the time (i.e. 100% utilization). In other words, there is always a request in the queue waitting to be processed as soon as the CPU finishes the current request. Basically we want requests to wait for CPU instead of CPU waiting for requests. By having requests wait for CPU, we incur some waiting time to achieve the higher (maximum) throughput.</p>

<h2>Lower Waiting Time &amp; Lower Throughput</h2>

<p>This is the opposite of higher waiting time &amp; higher throughput. To make sure the waiting time is zero, we need to make sure the CPU is idle and there is no other requests in the queue by the time when the request is received. By having CPU idle for some time, the throughput will be lower than the maximum throughput.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nondeterministic Code]]></title>
    <link href="http://blog.jjyao.me/blog/2021/02/26/nondeterministic-code/"/>
    <updated>2021-02-26T16:11:07-08:00</updated>
    <id>http://blog.jjyao.me/blog/2021/02/26/nondeterministic-code</id>
    <content type="html"><![CDATA[<p>Nondeterministic code is hard to debug since bugs are not consistently reproducible. It&rsquo;s easy to notice that the code is perhaps nondeterministic if multi-threading or random functions are involved. However we can still write nondeterministic single-threaded code without using random functions.</p>

<!-- more -->


<h2>Random Address</h2>

<p><a href="https://en.wikipedia.org/wiki/Address_space_layout_randomization">Address space layout randomization</a> randomly arranges the address space positions of stack and heap of a process, which means the address of a variable changes for each run. This is the source of nondeterminism if we try to iterate through an unordered container of pointers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unordered_set&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">a</span> <span class="o">=</span> <span class="s">&quot;aaaaa&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">b</span> <span class="o">=</span> <span class="s">&quot;bb&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">c</span> <span class="o">=</span> <span class="s">&quot;cccccccccccc&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">unordered_set</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">*&gt;</span> <span class="n">set</span><span class="p">;</span>
</span><span class='line'>  <span class="n">set</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="o">&amp;</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'>  <span class="n">set</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="o">&amp;</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'>  <span class="n">set</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="o">&amp;</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">*</span> <span class="nl">p</span> <span class="p">:</span> <span class="n">set</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">p</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;(&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">p</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">hash</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">*&gt;</span><span class="p">{}(</span><span class="n">p</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;)&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="o">&gt;</span> <span class="n">clang</span><span class="o">++</span> <span class="n">demo</span><span class="p">.</span><span class="n">cc</span> <span class="o">-</span><span class="n">o</span> <span class="n">demo</span> <span class="o">-</span><span class="n">std</span><span class="o">=</span><span class="n">c</span><span class="o">++</span><span class="mi">11</span>
</span><span class='line'><span class="o">&gt;</span> <span class="p">.</span><span class="o">/</span><span class="n">demo</span>
</span><span class='line'><span class="n">cccccccccccc</span><span class="p">(</span><span class="mh">0x7ffeeedbf650</span><span class="p">,</span> <span class="mi">16564608384425460261</span><span class="p">)</span>
</span><span class='line'><span class="n">bb</span><span class="p">(</span><span class="mh">0x7ffeeedbf678</span><span class="p">,</span> <span class="mi">5964435063914947271</span><span class="p">)</span>
</span><span class='line'><span class="n">aaaaa</span><span class="p">(</span><span class="mh">0x7ffeeedbf690</span><span class="p">,</span> <span class="mi">696214236533423747</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="p">.</span><span class="o">/</span><span class="n">demo</span>
</span><span class='line'><span class="n">bb</span><span class="p">(</span><span class="mh">0x7ffee3cd6678</span><span class="p">,</span> <span class="mi">2875564916106665130</span><span class="p">)</span>
</span><span class='line'><span class="n">cccccccccccc</span><span class="p">(</span><span class="mh">0x7ffee3cd6650</span><span class="p">,</span> <span class="mi">14656991250807877473</span><span class="p">)</span>
</span><span class='line'><span class="n">aaaaa</span><span class="p">(</span><span class="mh">0x7ffee3cd6690</span><span class="p">,</span> <span class="mi">10500981134548248633</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we can see, the address of variable a, b and c keeps changing for each run, which affects their positions in the hash set and, as a result, we will iterate them in different orders.</p>

<p>Lets try to <a href="https://stackoverflow.com/questions/23897963/documented-way-to-disable-aslr-on-os-x">disable</a> ASLR and verify that the nondeterminism is gone:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="o">&gt;</span> <span class="n">clang</span><span class="o">++</span> <span class="n">demo</span><span class="p">.</span><span class="n">cc</span> <span class="o">-</span><span class="n">o</span> <span class="n">demo</span> <span class="o">-</span><span class="n">std</span><span class="o">=</span><span class="n">c</span><span class="o">++</span><span class="mi">11</span> <span class="o">-</span><span class="n">Wl</span><span class="p">,</span><span class="o">-</span><span class="n">no_pie</span>
</span><span class='line'><span class="o">&gt;</span> <span class="p">.</span><span class="o">/</span><span class="n">demo</span>
</span><span class='line'><span class="n">bb</span><span class="p">(</span><span class="mh">0x7ffeefbff678</span><span class="p">,</span> <span class="mi">6189850235780456993</span><span class="p">)</span>
</span><span class='line'><span class="n">cccccccccccc</span><span class="p">(</span><span class="mh">0x7ffeefbff650</span><span class="p">,</span> <span class="mi">14250952053958696967</span><span class="p">)</span>
</span><span class='line'><span class="n">aaaaa</span><span class="p">(</span><span class="mh">0x7ffeefbff690</span><span class="p">,</span> <span class="mi">4593858558987980877</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="p">.</span><span class="o">/</span><span class="n">demo</span>
</span><span class='line'><span class="n">bb</span><span class="p">(</span><span class="mh">0x7ffeefbff678</span><span class="p">,</span> <span class="mi">6189850235780456993</span><span class="p">)</span>
</span><span class='line'><span class="n">cccccccccccc</span><span class="p">(</span><span class="mh">0x7ffeefbff650</span><span class="p">,</span> <span class="mi">14250952053958696967</span><span class="p">)</span>
</span><span class='line'><span class="n">aaaaa</span><span class="p">(</span><span class="mh">0x7ffeefbff690</span><span class="p">,</span> <span class="mi">4593858558987980877</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since the nondeterminism is generally undesired, clang has a <a href="https://clang.llvm.org/docs/analyzer/checkers.html#alpha-nondeterminism-pointeriteration-c">checker</a> to detect such usages.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JIT in Action]]></title>
    <link href="http://blog.jjyao.me/blog/2021/01/16/jit-in-action/"/>
    <updated>2021-01-16T22:23:27-08:00</updated>
    <id>http://blog.jjyao.me/blog/2021/01/16/jit-in-action</id>
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Just-in-time_compilation">JIT</a> is a way of executing computer code that involves compilation during execution of a program at <strong>runtime</strong>. This post shows how to execute <a href="https://en.wikipedia.org/wiki/Brainfuck">Brainfuck</a> programs using JIT in various ways.</p>

<ol>
<li><a href="#interpreter">Interpreter</a></li>
<li><a href="#transpilation">Transpilation</a></li>
<li><a href="#llvm">LLVM</a></li>
<li><a href="#dynasm">DynASM</a></li>
</ol>


<!-- more -->


<h2><a id="interpreter"></a>Interpreter</h2>

<p>Before showing how to use JIT to run a Brainfuck program, lets see how it can be run by an interpreter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;streambuf&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BrainfuckInterpreter</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">BrainfuckInterpreter</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">program</span><span class="p">)</span>
</span><span class='line'>      <span class="o">:</span> <span class="n">program</span><span class="p">(</span><span class="n">program</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="n">run</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">program</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">BrainfuckInterpreter</span><span class="o">::</span><span class="n">run</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">data</span><span class="p">[</span><span class="mi">30000</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'>  <span class="kt">char</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">size_t</span><span class="o">&gt;</span> <span class="n">stack</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">skips</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">program</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span><span class="p">(</span><span class="n">program</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">skips</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="o">++</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">skips</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="o">--</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;+&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">skips</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="o">++*</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;-&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">skips</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="o">--*</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;.&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">skips</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">putchar</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;,&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">skips</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">(</span><span class="n">getchar</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;[&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">stack</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!*</span><span class="n">ptr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="o">++</span><span class="n">skips</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;]&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">i</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">stack</span><span class="p">.</span><span class="n">end</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">stack</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">skips</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="o">--</span><span class="n">skips</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">ifstream</span> <span class="n">ifs</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">program</span><span class="p">((</span><span class="n">std</span><span class="o">::</span><span class="n">istreambuf_iterator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">(</span><span class="n">ifs</span><span class="p">)),</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">istreambuf_iterator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">()));</span>
</span><span class='line'>  <span class="n">BrainfuckInterpreter</span> <span class="nf">interpreter</span><span class="p">(</span><span class="n">program</span><span class="p">);</span>
</span><span class='line'>  <span class="n">interpreter</span><span class="p">.</span><span class="n">run</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">g</span><span class="o">++</span> <span class="o">-</span><span class="n">std</span><span class="o">=</span><span class="n">c</span><span class="o">++</span><span class="mi">11</span> <span class="o">-</span><span class="n">o</span> <span class="n">brainfuck</span> <span class="n">brainfuck</span><span class="p">.</span><span class="n">cc</span>
</span><span class='line'>
</span><span class='line'><span class="p">.</span><span class="o">/</span><span class="n">brainfuck</span> <span class="n">program</span><span class="p">.</span><span class="n">bf</span>
</span></code></pre></td></tr></table></div></figure>


<p>For a complicated Brainfuck program like <a href="https://www.google.com/search?q=mandelbrot.bf">mandelbrot.bf</a>, running in an interpreter will be slow.</p>

<h2><a id="transpilation"></a>Transpilation</h2>

<p>One way to generate and run native code for a Brainfuck program is transpilaiton. The first step is generating the equivalent C/C++ code for the Brainfuck program and then using a conventional compiler to generate a shared object. The second step is using <code>dlopen()</code> to load the shared object and run it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;dlfcn.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;streambuf&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BrainfuckTranspiler</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">BrainfuckTranspiler</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">program</span><span class="p">)</span>
</span><span class='line'>      <span class="o">:</span> <span class="n">program</span><span class="p">(</span><span class="n">program</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="n">run</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">program</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">BrainfuckTranspiler</span><span class="o">::</span><span class="n">run</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">ccname</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">tmpnam</span><span class="p">(</span><span class="k">nullptr</span><span class="p">);</span>
</span><span class='line'>  <span class="n">ccname</span> <span class="o">+=</span> <span class="s">&quot;.cc&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">ofstream</span> <span class="n">ofs</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ofs</span><span class="p">.</span><span class="n">open</span><span class="p">(</span><span class="n">ccname</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="n">R</span><span class="s">&quot;(</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="kt">void</span> <span class="n">_run</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">data</span><span class="p">[</span><span class="mi">30000</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'>  <span class="kt">char</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>  <span class="p">)</span><span class="s">&quot;;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">program</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span><span class="p">(</span><span class="n">program</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;++ptr;&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;--ptr;&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;+&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;++*ptr;&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;-&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;--*ptr;&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;.&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;putchar(static_cast&lt;int&gt;(*ptr));&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;,&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;*ptr = static_cast&lt;char&gt;(getchar());&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;[&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;while (*ptr) {&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;]&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;}&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;}&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ofs</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">soname</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">tmpnam</span><span class="p">(</span><span class="k">nullptr</span><span class="p">);</span>
</span><span class='line'>  <span class="n">soname</span> <span class="o">+=</span> <span class="s">&quot;.so&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">compile</span> <span class="o">=</span> <span class="s">&quot;g++ &quot;</span> <span class="o">+</span> <span class="n">ccname</span> <span class="o">+</span> <span class="s">&quot; -o &quot;</span> <span class="o">+</span> <span class="n">soname</span> <span class="o">+</span> <span class="s">&quot; -shared -fPIC&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">system</span><span class="p">(</span><span class="n">compile</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span><span class="o">*</span> <span class="n">handle</span> <span class="o">=</span> <span class="n">dlopen</span><span class="p">(</span><span class="n">soname</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">RTLD_NOW</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">handle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">dlerror</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">dlerror</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">_run</span><span class="p">)();</span>
</span><span class='line'>  <span class="n">_run</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)())</span> <span class="n">dlsym</span><span class="p">(</span><span class="n">handle</span><span class="p">,</span> <span class="s">&quot;_run&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">char</span><span class="o">*</span> <span class="n">error</span> <span class="o">=</span> <span class="n">dlerror</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">error</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">(</span><span class="o">*</span><span class="n">_run</span><span class="p">)();</span>
</span><span class='line'>  <span class="n">dlclose</span><span class="p">(</span><span class="n">handle</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">remove</span><span class="p">(</span><span class="n">ccname</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>  <span class="n">remove</span><span class="p">(</span><span class="n">soname</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">ifstream</span> <span class="n">ifs</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">program</span><span class="p">((</span><span class="n">std</span><span class="o">::</span><span class="n">istreambuf_iterator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">(</span><span class="n">ifs</span><span class="p">)),</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">istreambuf_iterator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">()));</span>
</span><span class='line'>  <span class="n">BrainfuckTranspiler</span> <span class="nf">transpiler</span><span class="p">(</span><span class="n">program</span><span class="p">);</span>
</span><span class='line'>  <span class="n">transpiler</span><span class="p">.</span><span class="n">run</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">g</span><span class="o">++</span> <span class="o">-</span><span class="n">std</span><span class="o">=</span><span class="n">c</span><span class="o">++</span><span class="mi">11</span> <span class="o">-</span><span class="n">ldl</span> <span class="o">-</span><span class="n">o</span> <span class="n">brainfuck</span> <span class="n">brainfuck</span><span class="p">.</span><span class="n">cc</span>
</span><span class='line'>
</span><span class='line'><span class="p">.</span><span class="o">/</span><span class="n">brainfuck</span> <span class="n">program</span><span class="p">.</span><span class="n">bf</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a id="llvm"></a>LLVM</h2>

<p>Besides using an external compiler process to generate the native code, we can also use LLVM mcjit by first generating the equivalent LLVM IR for the Brainfuck program. We can generate the IR manually or using clang frontend. Here I&rsquo;m using clang to generate the IR but LLVM has an <a href="https://github.com/llvm/llvm-project/tree/main/llvm/examples/BrainF">example</a> of manually generating it. The LLVM version I&rsquo;m using is 7.0.1.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;streambuf&gt;</span>
</span><span class='line'><span class="cp">#include &lt;clang/Driver/Compilation.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;clang/Driver/Driver.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;clang/CodeGen/CodeGenAction.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;clang/Frontend/FrontendOptions.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;clang/Frontend/CompilerInstance.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;clang/Frontend/CompilerInvocation.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;clang/Frontend/TextDiagnosticPrinter.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;llvm/IR/Module.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;llvm/ADT/StringRef.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;llvm/IR/LLVMContext.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;llvm/Support/Host.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;llvm/Support/TargetSelect.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;llvm/ExecutionEngine/ExecutionEngine.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;llvm/ExecutionEngine/GenericValue.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BrainfuckLLVM</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">BrainfuckLLVM</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">program</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">clangexe</span><span class="p">)</span>
</span><span class='line'>      <span class="o">:</span> <span class="n">program</span><span class="p">(</span><span class="n">program</span><span class="p">),</span> <span class="n">clangexe</span><span class="p">(</span><span class="n">clangexe</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="n">run</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">program</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">clangexe</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">BrainfuckLLVM</span><span class="o">::</span><span class="n">run</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">ccname</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">tmpnam</span><span class="p">(</span><span class="k">nullptr</span><span class="p">);</span>
</span><span class='line'>  <span class="n">ccname</span> <span class="o">+=</span> <span class="s">&quot;.cc&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">ofstream</span> <span class="n">ofs</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ofs</span><span class="p">.</span><span class="n">open</span><span class="p">(</span><span class="n">ccname</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="n">R</span><span class="s">&quot;(</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="kt">void</span> <span class="n">_run</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">data</span><span class="p">[</span><span class="mi">30000</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'>  <span class="kt">char</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>  <span class="p">)</span><span class="s">&quot;;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">program</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span><span class="p">(</span><span class="n">program</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;++ptr;&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;--ptr;&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;+&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;++*ptr;&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;-&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;--*ptr;&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;.&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;putchar(static_cast&lt;int&gt;(*ptr));&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;,&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;*ptr = static_cast&lt;char&gt;(getchar());&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;[&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;while (*ptr) {&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;]&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;}&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;}&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ofs</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Generate LLVM IR using clang frontend</span>
</span><span class='line'>  <span class="n">clang</span><span class="o">::</span><span class="n">IntrusiveRefCntPtr</span><span class="o">&lt;</span><span class="n">clang</span><span class="o">::</span><span class="n">DiagnosticOptions</span><span class="o">&gt;</span> <span class="n">dopts</span> <span class="o">=</span> <span class="k">new</span> <span class="n">clang</span><span class="o">::</span><span class="n">DiagnosticOptions</span><span class="p">();</span>
</span><span class='line'>  <span class="n">clang</span><span class="o">::</span><span class="n">TextDiagnosticPrinter</span><span class="o">*</span> <span class="n">tdp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">clang</span><span class="o">::</span><span class="n">TextDiagnosticPrinter</span><span class="p">(</span><span class="n">llvm</span><span class="o">::</span><span class="n">errs</span><span class="p">(),</span> <span class="o">&amp;*</span><span class="n">dopts</span><span class="p">);</span>
</span><span class='line'>  <span class="n">clang</span><span class="o">::</span><span class="n">IntrusiveRefCntPtr</span><span class="o">&lt;</span><span class="n">clang</span><span class="o">::</span><span class="n">DiagnosticIDs</span><span class="o">&gt;</span> <span class="n">dids</span><span class="p">(</span><span class="k">new</span> <span class="n">clang</span><span class="o">::</span><span class="n">DiagnosticIDs</span><span class="p">());</span>
</span><span class='line'>  <span class="n">clang</span><span class="o">::</span><span class="n">DiagnosticsEngine</span> <span class="n">dengine</span><span class="p">(</span><span class="n">dids</span><span class="p">,</span> <span class="o">&amp;*</span><span class="n">dopts</span><span class="p">,</span> <span class="n">tdp</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">llvm</span><span class="o">::</span><span class="n">Triple</span> <span class="n">triple</span><span class="p">(</span><span class="n">llvm</span><span class="o">::</span><span class="n">sys</span><span class="o">::</span><span class="n">getProcessTriple</span><span class="p">());</span>
</span><span class='line'>  <span class="n">clang</span><span class="o">::</span><span class="n">driver</span><span class="o">::</span><span class="n">Driver</span> <span class="n">driver</span><span class="p">(</span><span class="n">clangexe</span><span class="p">,</span> <span class="n">triple</span><span class="p">.</span><span class="n">str</span><span class="p">(),</span> <span class="n">dengine</span><span class="p">);</span>
</span><span class='line'>  <span class="n">driver</span><span class="p">.</span><span class="n">setTitle</span><span class="p">(</span><span class="s">&quot;clang&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">driver</span><span class="p">.</span><span class="n">setCheckInputsExist</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">llvm</span><span class="o">::</span><span class="n">SmallVector</span><span class="o">&lt;</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span><span class="p">,</span> <span class="mi">16</span><span class="o">&gt;</span> <span class="n">args</span><span class="p">;</span>
</span><span class='line'>  <span class="n">args</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="s">&quot;clang&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">args</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">ccname</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>  <span class="n">args</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="s">&quot;-fsyntax-only&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">clang</span><span class="o">::</span><span class="n">driver</span><span class="o">::</span><span class="n">Compilation</span><span class="o">&gt;</span> <span class="n">compilation</span><span class="p">(</span><span class="n">driver</span><span class="p">.</span><span class="n">BuildCompilation</span><span class="p">(</span><span class="n">args</span><span class="p">));</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">clang</span><span class="o">::</span><span class="n">driver</span><span class="o">::</span><span class="n">JobList</span><span class="o">&amp;</span> <span class="n">jobs</span> <span class="o">=</span> <span class="n">compilation</span><span class="o">-&gt;</span><span class="n">getJobs</span><span class="p">();</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">clang</span><span class="o">::</span><span class="n">driver</span><span class="o">::</span><span class="n">Command</span><span class="o">&amp;</span> <span class="n">command</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">clang</span><span class="o">::</span><span class="n">driver</span><span class="o">::</span><span class="n">Command</span><span class="o">&gt;</span><span class="p">(</span><span class="o">*</span><span class="n">jobs</span><span class="p">.</span><span class="n">begin</span><span class="p">());</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">clang</span><span class="o">::</span><span class="n">driver</span><span class="o">::</span><span class="n">ArgStringList</span><span class="o">&amp;</span> <span class="n">ccargs</span> <span class="o">=</span> <span class="n">command</span><span class="p">.</span><span class="n">getArguments</span><span class="p">();</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">clang</span><span class="o">::</span><span class="n">CompilerInvocation</span><span class="o">&gt;</span> <span class="n">cinvocation</span><span class="p">(</span><span class="k">new</span> <span class="n">clang</span><span class="o">::</span><span class="n">CompilerInvocation</span><span class="p">());</span>
</span><span class='line'>  <span class="n">clang</span><span class="o">::</span><span class="n">CompilerInvocation</span><span class="o">::</span><span class="n">CreateFromArgs</span><span class="p">(</span><span class="o">*</span><span class="n">cinvocation</span><span class="p">,</span> <span class="k">const_cast</span><span class="o">&lt;</span><span class="k">const</span> <span class="kt">char</span><span class="o">**&gt;</span><span class="p">(</span><span class="n">ccargs</span><span class="p">.</span><span class="n">data</span><span class="p">()),</span>
</span><span class='line'>      <span class="k">const_cast</span><span class="o">&lt;</span><span class="k">const</span> <span class="kt">char</span><span class="o">**&gt;</span><span class="p">(</span><span class="n">ccargs</span><span class="p">.</span><span class="n">data</span><span class="p">())</span> <span class="o">+</span> <span class="n">ccargs</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="n">dengine</span><span class="p">);</span>
</span><span class='line'>  <span class="n">clang</span><span class="o">::</span><span class="n">CompilerInstance</span> <span class="n">cinstance</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cinstance</span><span class="p">.</span><span class="n">setInvocation</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">cinvocation</span><span class="p">));</span>
</span><span class='line'>  <span class="n">cinstance</span><span class="p">.</span><span class="n">createDiagnostics</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">llvm</span><span class="o">::</span><span class="n">LLVMContext</span> <span class="n">context</span><span class="p">;</span>
</span><span class='line'>  <span class="n">clang</span><span class="o">::</span><span class="n">EmitLLVMOnlyAction</span> <span class="n">action</span><span class="p">(</span><span class="o">&amp;</span><span class="n">context</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cinstance</span><span class="p">.</span><span class="n">ExecuteAction</span><span class="p">(</span><span class="n">action</span><span class="p">);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">llvm</span><span class="o">::</span><span class="n">Module</span><span class="o">&gt;</span> <span class="n">module</span> <span class="o">=</span> <span class="n">action</span><span class="p">.</span><span class="n">takeModule</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Use mcjit to generate the native code from IR and run it</span>
</span><span class='line'>  <span class="n">llvm</span><span class="o">::</span><span class="n">InitializeNativeTarget</span><span class="p">();</span>
</span><span class='line'>  <span class="n">llvm</span><span class="o">::</span><span class="n">InitializeNativeTargetAsmPrinter</span><span class="p">();</span>
</span><span class='line'>  <span class="n">llvm</span><span class="o">::</span><span class="n">Function</span><span class="o">*</span> <span class="n">_run</span> <span class="o">=</span> <span class="n">module</span><span class="o">-&gt;</span><span class="n">getFunction</span><span class="p">(</span><span class="s">&quot;_run&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">llvm</span><span class="o">::</span><span class="n">ExecutionEngine</span><span class="o">*</span> <span class="n">ee</span> <span class="o">=</span> <span class="n">llvm</span><span class="o">::</span><span class="n">EngineBuilder</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">module</span><span class="p">)).</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'>  <span class="n">llvm</span><span class="o">::</span><span class="n">GenericValue</span> <span class="n">gv</span> <span class="o">=</span> <span class="n">ee</span><span class="o">-&gt;</span><span class="n">runFunction</span><span class="p">(</span><span class="n">_run</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">llvm</span><span class="o">::</span><span class="n">GenericValue</span><span class="o">&gt;</span><span class="p">());</span>
</span><span class='line'>  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">remove</span><span class="p">(</span><span class="n">ccname</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">ifstream</span> <span class="n">ifs</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">program</span><span class="p">((</span><span class="n">std</span><span class="o">::</span><span class="n">istreambuf_iterator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">(</span><span class="n">ifs</span><span class="p">)),</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">istreambuf_iterator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">()));</span>
</span><span class='line'>  <span class="n">BrainfuckLLVM</span> <span class="nf">llvm</span><span class="p">(</span><span class="n">program</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">llvm</span><span class="p">.</span><span class="n">run</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">g</span><span class="o">++</span> <span class="o">-</span><span class="n">std</span><span class="o">=</span><span class="n">c</span><span class="o">++</span><span class="mi">11</span> <span class="err">`</span><span class="o">/</span><span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">llvm</span><span class="o">-</span><span class="n">config</span> <span class="o">--</span><span class="n">cxxflags</span> <span class="o">--</span><span class="n">ldflags</span><span class="err">`</span> <span class="o">-</span><span class="n">lclangASTMatchers</span> <span class="o">-</span><span class="n">lclangFrontendTool</span> <span class="o">-</span><span class="n">lclangFrontend</span> <span class="o">-</span><span class="n">lclangDriver</span> <span class="o">-</span><span class="n">lclangSerialization</span> <span class="o">-</span><span class="n">lclangCodeGen</span> <span class="o">-</span><span class="n">lclangParse</span> <span class="o">-</span><span class="n">lclangSema</span> <span class="o">-</span><span class="n">lclangToolingInclusions</span> <span class="o">-</span><span class="n">lclangToolingCore</span>  <span class="o">-</span><span class="n">lclangFormat</span> <span class="o">-</span><span class="n">lclangIndex</span> <span class="o">-</span><span class="n">lclangCrossTU</span> <span class="o">-</span><span class="n">lclangStaticAnalyzerFrontend</span> <span class="o">-</span><span class="n">lclangStaticAnalyzerCheckers</span> <span class="o">-</span><span class="n">lclangStaticAnalyzerCore</span> <span class="o">-</span><span class="n">lclangAnalysis</span> <span class="o">-</span><span class="n">lclangARCMigrate</span> <span class="o">-</span><span class="n">lclangRewriteFrontend</span> <span class="o">-</span><span class="n">lclangRewrite</span> <span class="o">-</span><span class="n">lclangEdit</span> <span class="o">-</span><span class="n">lclangAST</span> <span class="o">-</span><span class="n">lclangLex</span> <span class="o">-</span><span class="n">lclangBasic</span> <span class="err">`</span><span class="o">/</span><span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">llvm</span><span class="o">-</span><span class="n">config</span> <span class="o">--</span><span class="n">libs</span><span class="err">`</span> <span class="o">-</span><span class="n">o</span> <span class="n">brainfuck</span> <span class="n">brainfuck</span><span class="p">.</span><span class="n">cc</span>
</span><span class='line'>
</span><span class='line'><span class="p">.</span><span class="o">/</span><span class="n">brainfuck</span> <span class="n">program</span><span class="p">.</span><span class="n">bf</span> <span class="o">/</span><span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">clang</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a id="dynasm"></a>DynASM</h2>

<p>Another way of generating the native code is using <a href="https://luajit.org/dynasm.html">DynASM</a> from LuaJIT and there is an <a href="https://corsix.github.io/dynasm-doc/tutorial.html">example</a> online.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Good Economics for Hard Times]]></title>
    <link href="http://blog.jjyao.me/blog/2020/12/20/good-economics-for-hard-times/"/>
    <updated>2020-12-20T14:04:45-08:00</updated>
    <id>http://blog.jjyao.me/blog/2020/12/20/good-economics-for-hard-times</id>
    <content type="html"><![CDATA[<p>2020，世界很复杂。贸易战，美国大选，全球气候变暖，贫富差距扩大化等热点问题影响着我们每一个人。如果你也对这些问题感兴趣，我推荐你阅读《Good Economics for Hard Times》。这本书可能会带给你一些不同的角度来看待这些问题，有些甚至可能完全颠覆你以往的认知。以下是我的读书笔记：</p>

<ol>
<li><a href="#immigration">移民</a></li>
<li><a href="#globalization">全球化</a></li>
<li><a href="#prejudice">偏见</a></li>
<li><a href="#growth">经济增长</a></li>
<li><a href="#climate">气候变暖</a></li>
<li><a href="#inequality">贫富差距</a></li>
</ol>


<!-- more -->


<h2><a id="immigration"></a>移民</h2>

<p>这本书分析了两类移民对当地人的影响，分别是低技能移民（low-skilled immigrants）和高技能移民（high-skilled immigrants）。</p>

<p>很多人认为低技能的移民会伤害到低技能的当地人的利益：工资会降低，工作机会会被抢走。<strong><em>然而研究表明低技能的移民并不会降低当地人的工资和就业率</em></strong>。移民增加了劳动力的供应的同时也增加了劳动力的需求 （One very big problem with the supply-demand analysis applied to immigration is that an influx of migrants increases the demand for labor at the same time it increases the supply of laborers.）。一个原因是低技能的移民会在当地生活消费，从而产生了新的需求，因而创造出更多的工作岗位。比如移民的增加，使得管理者需求增加而本地人因为语言等的优势更容易获得这些岗位。另一个原因是廉价的移民劳动力会延缓机器化自动化的发生。另外低技能移民很多做的都是当地人不想干的活，因此并没有真正从当地人手中抢走任何工作。同时作者认为当地人并不一定会在和移民的竞争中落入下风。相对于一个新来的陌生移民，当地人有着自身的优势，比如语言的优势，老板知根知底的优势。</p>

<p>对于高技能移民，作者认为对当地人的影响是两面的。好的方面是高技能移民能提供廉价的高技能服务比如看病，而这可以使当地的低收入人群受益。不好的方面是当地拥有同等技能的人会面临着更激烈的竞争。</p>

<h2><a id="globalization"></a>全球化</h2>

<p>全球化和自由贸易可以使得每个国家做自己拥有比较优势（comparative advantage）的活，以此提高生产效率（productivity）。这个世界作为一个整体因此受益，而收益的再分配可以让每个人享受到全球化的成果。而为了达到效率的最大化，资源（比如资本和劳动力）需要能够自由流通到需要它们的地方。然而本书却提出了资源往往具有粘性（resources tend to be sticky）的观点，也就是说资源往往到不了最需要它们的地方。比如出于不确定性，人们更愿意留在家乡而不是到更需要劳动力的城市和国家。</p>

<p>同时作者分析了全球化和自由贸易对于发达国家和发展中国家的影响。发达国家的优势是资本而发展中国家的优势是廉价劳动力，因此全球化会使发达国家的资本家受益而发展中国家的工人受益。另一方面，发达国家资本家受益的同时，它们的工人会在和发展中国家廉价劳动力竞争中受损（Workers were likely to suffer from trade in rich countries and benefit from it in poor countries.）。为了帮助受影响的发达国家工人，国家需要进行收入再分配和各类政策扶持。而贸易战却不是解决这个问题的方法之一，它帮助了某些人的同时也会伤害到另外一些人（While trade war may save some jobs in steal, it would likely cause significant new damage to others. The US economy will be fine. Hundreds of thousands of people will not.）。</p>

<h2><a id="prejudice"></a>偏见</h2>

<p>本书提到了现在社会充满了对立，分裂和偏见的现象（比如民主党vs共和党，白人vs黑人）。作者认为现在的社交网络非但没有缓解这些现象，反而作为一个回声室（echo chamber），恶化了它们。作者还认为人们的对立和偏见背后有着深层次的原因（比如对世界的不满，感到没有被世界尊重）。打击偏见的方法不应该是直接和他们就此争论或者表现出对他们的鄙视，这样做只会加深偏见（Preferences like prejudice are as much part of the symptoms of the malaise as its cause, perhaps more. Prejudice is often a defensive reaction to the many things we feel are going wrong in the world, our economic travails, and a sense that we are no longer respected or valued.）。为了缓解这些现象，作者认为一个有效的方式是多接触，多互相了解。而学校在这一方面扮演了非常重要的角色。不同背景的年轻人生活学习在一起，可以消除偏见达到互信（Familiarity performed its magic.）。而这也是像哈佛这样培养未来领导人的学校需要招收各个族群学生的一个原因，过多的偏向某一个族群会产生不好的影响（As a flagship producer of the next generation of leaders, Harvard clearly needs to find a place for students from all social groups, and a massive overrepresentation of any particular social group relative to its weight in the population is both perhaps undesirable in a democracy and likely to lead to political problems.）。</p>

<h2><a id="growth"></a>经济增长</h2>

<p>本书的一个重要观点是<strong><em>人们目前还不知道持久经济增长的内在机制是什么</em></strong>，包括如何恢复增长和保持增长（Despite the best efforts of generations of economists, the deep mechanisms of persistent economic growth remain elusive.）。与此相关的是给富人减税并不会促进经济的增长（Tax cuts for the wealthy do not produce economic growth.）。另一方面，尽管无法带来持续的经济增长，但提高资源利用率，减少资源的错误分配还是能让贫穷国家获得一定的增长，而这需要克服之前提到的资源粘性问题。最后虽然没人知道如何持续不断的增长经济，但所有国家都能致力于改善国民的福祉，即使它们不能被反映在GDP上（GDP values only those things priced and marketed.）。</p>

<h2><a id="climate"></a>气候变暖</h2>

<p>气候变暖是个全球性的问题，然而它却非常不公平。很大一部分的碳排放都是发达国家导致的（直接排放或者消费发展中国家生产的商品），然而全球变暖的大部分代价却是由发展中国家来承受。因此作者认为发达国家需要为气候变暖承担很大一部分责任。作者还认为人们的消费习惯是可以被改变的，可以变得更低碳更环保。通过税的引导，政府可以慢慢改变人们不环保的消费习惯。</p>

<h2><a id="inequality"></a>贫富差距</h2>

<p>日益扩大的贫富差距也是本书的一个重点讨论议题。作者认为美国这几十年的贫富差距是人为的政策导致的而不是不可控的技术革新（The last thirty years of US history should convince us that the evolution of inequality is not the by-product of technological changes we do not control: it is the result of policy decisions.）。</p>

<p>首先作者认为先富带动后富并没有真正在美国发生，相反富人的财富得到了极大的增长，而穷人的工资涨幅却没有跟上GDP的涨幅，结果就是社会的财富越来越集中到少数富人手中。其中一个重要原因是富人的低税收。低税收使得高工资对CEO们更有吸引力（因为大部分工资都会变成税后工资）而公司之间对优秀CEO的争夺也相应拉高了工资。另外现在CEO主要的收入来自股票而不是基本工资，这也就使得他们对涨工资动力不大，反而会想要降低工资来削减成本从而提升股价（Linking managerial pay to the stock market meant that manager’s pay was no longer linked to a salary scale within the enterprise. When everyone was on the same scale, CEOs had to grow salaries at the bottom to increase their own. With stock options, they had no reason to increase wages at the bottom, and in fact every reason to squeeze costs.）。作者提倡对富人收取高额的税收，并且没有证据表明这样做会降低富人的工作积极性（All in all, therefore, it seems to us that high marginal income tax rates, applied only to very high incomes, are a perfectly sensible way to limit the explosion of top income inequality. They would not be extortionary, since very few people will end up paying them; top mangers will simply not get these kinds of income anymore. And from all we see, they won’t discourage anybody to work as hard as they can.）。另外作者也意识到征收富人税会面临极大的困难。一方面富人有足够的资源对政客进行游说，另一方面富人可以将财富转移到低税收国家进行避税，而国家之间对于这些财富的竞争会使得税率变低（This gives rise to a race to the bottom on tax rates.）。归根到底征收富人税并不是一个经济问题，而是个政治问题（The difficulty of raising top tax rates is a political one.）。</p>

<p>在富人越来越富的同时，美国的穷人却遇到了收入停滞和阶级固化的问题。由此他们会产生绝望或愤怒，绝望的人把问题归咎于自身而愤怒的人把问题归咎于别人（The majority of Americans whose wages and income have stagnated, and who confront an ever-widening gap between the wealth they see around them and the financial woes they are experiencing, face a choice between blaming themselves for not benefitting from the opportunities they believe their society offers and finding someone to blame for stealing their jobs. That way lies despair and anger.）。而这两种情绪对个人和社会都没有益处，绝望的人失去了希望而愤怒的人把问题错误地归咎于移民和全球化（Behind the anti-immigrant views, are two misconceptions: an exaggeration of how many migrants are coming in, or about to come in, and a belief in the nonfact that low-skilled immigrants depress wages.）。作者认为政府需要出台政策来帮助那些受全球化和自由贸易影响的人，其中一个方法就是UBI（universal basic income）。不像别的救助项目，UBI没有任何门槛（比如没有复杂的申请和审核流程）因此可以保证最需要帮助的人能够享受到。另外没有证据显示穷人会因此降低工作积极性或者乱花钱（There is no support in the data for the view that the poor just blow the money on desires rather than needs.）。相反地，这些钱能让穷人少了后顾之忧，让他们有更多的精力放在工作之上，让他们更可能离开家乡去寻找更多的工作机会。在有着这些优势的情况下，实施UBI最大的困难就是政府没有足够的钱。</p>

<p>最后作者充满人文关怀地提到对于穷人的帮助需要照顾他们的尊严，要把他们当作人来对待。他们可能有问题，但他们不是问题本身（While they may have problems, they are not the problem. They are entitled to be seen for who they are and to not be defined by the difficulties besieging them.）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Engineering Laws]]></title>
    <link href="http://blog.jjyao.me/blog/2020/01/25/software-engineering-laws/"/>
    <updated>2020-01-25T11:23:14-08:00</updated>
    <id>http://blog.jjyao.me/blog/2020/01/25/software-engineering-laws</id>
    <content type="html"><![CDATA[<ol>
<li><a href="#murphy_law">Murphy&rsquo;s law</a></li>
<li><a href="#amdahl_law">Amdahl&rsquo;s law</a></li>
<li><a href="#brooks_law">Brooks&rsquo;s law</a></li>
<li><a href="#hofstadter_law">Hofstadter&rsquo;s law</a></li>
</ol>


<!-- more -->


<h2><a id="murphy_law"></a>Murphy&rsquo;s law</h2>

<p>Anything that can go wrong will go wrong.</p>

<h2><a id="amdahl_law"></a>Amdahl&rsquo;s law</h2>

<p>The performance improvement to be gained by making some part of the execution faster is limited by the fraction of the time that part uses.</p>

<h2><a id="brooks_law"></a>Brooks&rsquo;s law</h2>

<p>Adding manpower to a late software project makes it later.</p>

<h2><a id="hofstadter_law"></a>Hofstadter&rsquo;s law</h2>

<p>It always takes longer than you expect, even when you take into account Hofstadter&rsquo;s Law.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Floating-Point Surprises]]></title>
    <link href="http://blog.jjyao.me/blog/2019/07/03/floating-point-surprises/"/>
    <updated>2019-07-03T15:57:02-07:00</updated>
    <id>http://blog.jjyao.me/blog/2019/07/03/floating-point-surprises</id>
    <content type="html"><![CDATA[<p>The single-precision floating-point or double-precision floating-point has finite precision so <a href="https://en.wikipedia.org/wiki/Loss_of_significance">loss of significance</a> can happen and cause surprises.</p>

<!-- more -->


<p>Let&rsquo;s take float, which has 23 bits mantissa, as an example. <code>198705381</code> as an integer has the binary representation <code>00001011 11011000 00000000 11100101</code>. <code>198705381.0f</code> as a float has the binary representation <code>0 10011010 01111011000000000001110</code>. Here a round-down happens due to the default IEEE 754 rounding mode <code>round to the nearest, ties to even</code> and <code>198705381.0f</code> is rounded down to <code>198705376.0f</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">setprecision</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mf">198705381.0f</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span> <span class="c1">// output is 198705376</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>199698905</code> as an integer has the binary representation <code>00001011 11100111 00101001 11011001</code>. <code>199698905.0f</code> as a float has the binary representation <code>0 10011010 01111100111001010011110</code>. Here a round-up happens and <code>199698905.0f</code> is rounded up to <code>199698912.0f</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">setprecision</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mf">199698905.0f</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span> <span class="c1">// output is 199698912</span>
</span></code></pre></td></tr></table></div></figure>


<p>Due to the loss of significance, many surprises can happen:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="mf">198705381.0f</span> <span class="o">-</span> <span class="mf">198705380.0f</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>  <span class="c1">// output is 0 since they are both rounded down to the same value</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="mf">198705381.0f</span> <span class="o">*</span> <span class="mf">1.005f</span> <span class="o">-</span> <span class="mf">199698905.0f</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span> <span class="c1">// output is negative (should be positive if we use double instead of float) since one is rounded down and the other is rounded up</span>
</span></code></pre></td></tr></table></div></figure>


<h3>References</h3>

<p>[1] <a href="https://benjaminjurke.com/content/articles/2015/loss-of-significance-in-floating-point-computations">https://benjaminjurke.com/content/articles/2015/loss-of-significance-in-floating-point-computations</a> <br/>
[2] <a href="https://www.h-schmidt.net/FloatConverter/IEEE754.html">https://www.h-schmidt.net/FloatConverter/IEEE754.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interaction Between HugeTLBFS and Hugepages]]></title>
    <link href="http://blog.jjyao.me/blog/2019/04/01/interaction-between-hugetlbfs-and-hugepages/"/>
    <updated>2019-04-01T19:57:31-07:00</updated>
    <id>http://blog.jjyao.me/blog/2019/04/01/interaction-between-hugetlbfs-and-hugepages</id>
    <content type="html"><![CDATA[<p>This post shows the interaction between hugetlbfs and huge pages by an example program. All the results are based on linux 3.10.0-514.55.4.el7.x86_64.</p>

<!-- more -->


<h2>Setup</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mount -t hugetlbfs -o mode=0777,pagesize=2M nodev /mnt/huge
</span><span class='line'>echo '10' | sudo tee /proc/sys/vm/nr_hugepages</span></code></pre></td></tr></table></div></figure>


<p>This creates a hugetlbfs with maximum of 10 huge pages.</p>

<h2>Example Program</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fcntl.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/mman.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define MB (1024*1024)</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">meminfo</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="n">msg</span><span class="p">);</span>
</span><span class='line'>  <span class="n">system</span><span class="p">(</span><span class="s">&quot;cat /proc/meminfo | grep HugePages_&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">meminfo</span><span class="p">(</span><span class="s">&quot;Initial meminfo: </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&quot;/mnt/huge/foo.txt&quot;</span><span class="p">,</span> <span class="n">O_RDWR</span> <span class="o">|</span> <span class="n">O_CREAT</span> <span class="o">|</span> <span class="n">O_TRUNC</span><span class="p">,</span> <span class="n">S_IRUSR</span> <span class="o">|</span> <span class="n">S_IWUSR</span> <span class="o">|</span> <span class="n">S_IRGRP</span> <span class="o">|</span> <span class="n">S_IROTH</span><span class="p">);</span>
</span><span class='line'>  <span class="n">meminfo</span><span class="p">(</span><span class="s">&quot;After create and open the file: </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ftruncate</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">MB</span><span class="p">);</span>
</span><span class='line'>  <span class="n">meminfo</span><span class="p">(</span><span class="s">&quot;After set file size to 4MB: </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span><span class="o">*</span> <span class="n">base</span> <span class="o">=</span> <span class="n">mmap</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">MB</span><span class="p">,</span> <span class="n">PROT_WRITE</span> <span class="o">|</span> <span class="n">PROT_READ</span><span class="p">,</span> <span class="n">MAP_SHARED</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">meminfo</span><span class="p">(</span><span class="s">&quot;After mmap 4MB without MAP_POPULATE: </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">munmap</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">MB</span><span class="p">);</span>
</span><span class='line'>  <span class="n">meminfo</span><span class="p">(</span><span class="s">&quot;After munmap: </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">base</span> <span class="o">=</span> <span class="n">mmap</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">MB</span><span class="p">,</span> <span class="n">PROT_WRITE</span> <span class="o">|</span> <span class="n">PROT_READ</span><span class="p">,</span> <span class="n">MAP_SHARED</span> <span class="o">|</span> <span class="n">MAP_POPULATE</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">meminfo</span><span class="p">(</span><span class="s">&quot;After mmap 4MB with MAP_POPULATE: </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">munmap</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">MB</span><span class="p">);</span>
</span><span class='line'>  <span class="n">meminfo</span><span class="p">(</span><span class="s">&quot;After munmap: </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ftruncate</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="mi">8</span> <span class="o">*</span> <span class="n">MB</span><span class="p">);</span>
</span><span class='line'>  <span class="n">meminfo</span><span class="p">(</span><span class="s">&quot;After set file size to 8MB: </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">base</span> <span class="o">=</span> <span class="n">mmap</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="mi">8</span> <span class="o">*</span> <span class="n">MB</span><span class="p">,</span> <span class="n">PROT_WRITE</span> <span class="o">|</span> <span class="n">PROT_READ</span><span class="p">,</span> <span class="n">MAP_SHARED</span> <span class="o">|</span> <span class="n">MAP_POPULATE</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">meminfo</span><span class="p">(</span><span class="s">&quot;After mmap 8MB with MAP_POPULATE: </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">munmap</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="mi">8</span> <span class="o">*</span> <span class="n">MB</span><span class="p">);</span>
</span><span class='line'>  <span class="n">meminfo</span><span class="p">(</span><span class="s">&quot;After munmap: </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span><span class='line'>  <span class="n">meminfo</span><span class="p">(</span><span class="s">&quot;After close: </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The output of running this program is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">Initial</span> <span class="nl">meminfo</span><span class="p">:</span>
</span><span class='line'><span class="nl">HugePages_Total</span><span class="p">:</span>      <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Free</span><span class="p">:</span>       <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Rsvd</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'><span class="nl">HugePages_Surp</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">After</span> <span class="n">creat</span> <span class="n">and</span> <span class="n">open</span> <span class="n">the</span> <span class="nl">file</span><span class="p">:</span>
</span><span class='line'><span class="nl">HugePages_Total</span><span class="p">:</span>      <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Free</span><span class="p">:</span>       <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Rsvd</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'><span class="nl">HugePages_Surp</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">After</span> <span class="n">set</span> <span class="n">file</span> <span class="n">size</span> <span class="n">to</span> <span class="mi">4</span><span class="nl">MB</span><span class="p">:</span>
</span><span class='line'><span class="nl">HugePages_Total</span><span class="p">:</span>      <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Free</span><span class="p">:</span>       <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Rsvd</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'><span class="nl">HugePages_Surp</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">After</span> <span class="n">mmap</span> <span class="mi">4</span><span class="n">MB</span> <span class="n">without</span> <span class="nl">MAP_POPULATE</span><span class="p">:</span>
</span><span class='line'><span class="nl">HugePages_Total</span><span class="p">:</span>      <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Free</span><span class="p">:</span>       <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Rsvd</span><span class="p">:</span>        <span class="mi">2</span>
</span><span class='line'><span class="nl">HugePages_Surp</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">After</span> <span class="nl">munmap</span><span class="p">:</span>
</span><span class='line'><span class="nl">HugePages_Total</span><span class="p">:</span>      <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Free</span><span class="p">:</span>       <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Rsvd</span><span class="p">:</span>        <span class="mi">2</span>
</span><span class='line'><span class="nl">HugePages_Surp</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">After</span> <span class="n">mmap</span> <span class="mi">4</span><span class="n">MB</span> <span class="n">with</span> <span class="nl">MAP_POPULATE</span><span class="p">:</span>
</span><span class='line'><span class="nl">HugePages_Total</span><span class="p">:</span>      <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Free</span><span class="p">:</span>        <span class="mi">8</span>
</span><span class='line'><span class="nl">HugePages_Rsvd</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'><span class="nl">HugePages_Surp</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">After</span> <span class="nl">munmap</span><span class="p">:</span>
</span><span class='line'><span class="nl">HugePages_Total</span><span class="p">:</span>      <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Free</span><span class="p">:</span>        <span class="mi">8</span>
</span><span class='line'><span class="nl">HugePages_Rsvd</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'><span class="nl">HugePages_Surp</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">After</span> <span class="n">set</span> <span class="n">file</span> <span class="n">size</span> <span class="n">to</span> <span class="mi">8</span><span class="nl">MB</span><span class="p">:</span>
</span><span class='line'><span class="nl">HugePages_Total</span><span class="p">:</span>      <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Free</span><span class="p">:</span>        <span class="mi">8</span>
</span><span class='line'><span class="nl">HugePages_Rsvd</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'><span class="nl">HugePages_Surp</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">After</span> <span class="n">mmap</span> <span class="mi">8</span><span class="n">MB</span> <span class="n">with</span> <span class="nl">MAP_POPULATE</span><span class="p">:</span>
</span><span class='line'><span class="nl">HugePages_Total</span><span class="p">:</span>      <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Free</span><span class="p">:</span>        <span class="mi">6</span>
</span><span class='line'><span class="nl">HugePages_Rsvd</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'><span class="nl">HugePages_Surp</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">After</span> <span class="nl">munmap</span><span class="p">:</span>
</span><span class='line'><span class="nl">HugePages_Total</span><span class="p">:</span>      <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Free</span><span class="p">:</span>        <span class="mi">6</span>
</span><span class='line'><span class="nl">HugePages_Rsvd</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'><span class="nl">HugePages_Surp</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">After</span> <span class="nl">close</span><span class="p">:</span>
</span><span class='line'><span class="nl">HugePages_Total</span><span class="p">:</span>      <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Free</span><span class="p">:</span>        <span class="mi">6</span>
</span><span class='line'><span class="nl">HugePages_Rsvd</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'><span class="nl">HugePages_Surp</span><span class="p">:</span>        <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Observations</h2>

<ol>
<li>Just setting the file size won&rsquo;t allocate/reserve any huge pages. It only affects the logical file size not the physical one.</li>
<li><code>mmap</code> only reserves the huge pages.</li>
<li>Populating the page table or accessing a page actually allocates the huge pages.</li>
<li><code>HugePages_Free</code> includes <code>HugePages_Rsvd</code> so the number of free-to-use huge pages is actually <code>HugePages_Free</code> minus <code>HugePages_Rsvd</code>.</li>
</ol>


<h2>Reference</h2>

<ol>
<li><a href="http://www.lenky.info/archives/2012/03/1219">Linux下hugetlbpage使用详解</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux PID]]></title>
    <link href="http://blog.jjyao.me/blog/2018/12/16/linux-pid/"/>
    <updated>2018-12-16T08:15:30-08:00</updated>
    <id>http://blog.jjyao.me/blog/2018/12/16/linux-pid</id>
    <content type="html"><![CDATA[<p>In the Linux world, pid means two things. It&rsquo;s the id of a process from POSIX&rsquo;s point of view and the id of a task from kernel&rsquo;s point of view.</p>

<!-- more -->


<h2>PID</h2>

<p>In POSIX, process is an instance of a running program and it contains one or more threads. The id of a process is called pid.</p>

<p>In the Linux kernel, task is the basic execution unit and is thread in the POSIX definition. Task is represented by <code>struct task_struct</code> in the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">task_struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="kt">pid_t</span>   <span class="n">pid</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">pid_t</span>   <span class="n">tgid</span><span class="p">;</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, pid is the id of a task and tgid is the id of the thread group that contains the task. As we can see, <code>task_struct.pid</code> basically is POSIX thread id and <code>task_struct.tgid</code> is POSIX process id.</p>

<h2>EXAMPLES</h2>

<p>Two different meanings of pid can cause lots of confusions and it&rsquo;s important to know whether we are talking about pid in the POSIX context or in the Linux kernel context.</p>

<h3>getpid</h3>

<p><code>getpid()</code> is a function defined by the POSIX standard and pid means the id of a process in this context. Linux implements it by returning <code>task_struct.tgid</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">SYSCALL_DEFINE0</span><span class="p">(</span><span class="n">getpid</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">task_tgid_vnr</span><span class="p">(</span><span class="n">current</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>/proc/[pid]</h3>

<p>The proc file system is an interface to kernel data structures and pid means the id of a task/thread in this context. For example, <code>/proc/[pid]/status</code> shows status information about the task/thread and the implementation is in <code>fs/proc/array.c</code>.</p>

<h2>References</h2>

<p>[1] <a href="https://www.kernel.org/doc/ols/2002/ols2002-pages-330-337.pdf">https://www.kernel.org/doc/ols/2002/ols2002-pages-330-337.pdf</a> <br/>
[2] <a href="https://stackoverflow.com/questions/9305992/if-threads-share-the-same-pid-how-can-they-be-identified">https://stackoverflow.com/questions/9305992/if-threads-share-the-same-pid-how-can-they-be-identified</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Microbenchmark]]></title>
    <link href="http://blog.jjyao.me/blog/2018/11/11/microbenchmark/"/>
    <updated>2018-11-11T13:58:58-08:00</updated>
    <id>http://blog.jjyao.me/blog/2018/11/11/microbenchmark</id>
    <content type="html"><![CDATA[<p>Microbenchmark is used to measure the performance of a small piece of code for the purpose of performance optimization. Writing a good microbenchmark is <a href="https://www.ibm.com/developerworks/library/j-benchmark1/index.html">hard</a> and that&rsquo;s why we should use microbenchmark frameworks (e.g. <a href="http://openjdk.java.net/projects/code-tools/jmh/">JMH</a> for Java and <a href="https://github.com/google/benchmark">Google Benchmark</a> for C++) to help us. This post contains microbenchmarks that I think are interesting.</p>

<!-- more -->


<p><strong>Don&rsquo;t directly use the performance numbers in this post, do your own measurement!</strong> Those numbers are highly dependent on the environment where those benchmarks are running.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">BENCHMARK_DEFINE_F</span><span class="p">(</span><span class="n">BenchmarkFixture</span><span class="p">,</span> <span class="n">ForLoopAssignmentBenchmark</span><span class="p">)(</span><span class="n">benchmark</span><span class="o">::</span><span class="n">State</span><span class="o">&amp;</span> <span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="nl">_</span> <span class="p">:</span> <span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">c</span><span class="p">[</span><span class="mi">2048</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2048</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;a&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">benchmark</span><span class="o">::</span><span class="n">DoNotOptimize</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">BENCHMARK_REGISTER_F</span><span class="p">(</span><span class="n">BenchmarkFixture</span><span class="p">,</span> <span class="n">ForLoopAssignmentBenchmark</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">BENCHMARK_DEFINE_F</span><span class="p">(</span><span class="n">BenchmarkFixture</span><span class="p">,</span> <span class="n">MemsetBenchmark</span><span class="p">)(</span><span class="n">benchmark</span><span class="o">::</span><span class="n">State</span><span class="o">&amp;</span> <span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="nl">_</span> <span class="p">:</span> <span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">c</span><span class="p">[</span><span class="mi">2048</span><span class="p">];</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sc">&#39;a&#39;</span><span class="p">,</span> <span class="mi">2048</span><span class="p">);</span>
</span><span class='line'>    <span class="n">benchmark</span><span class="o">::</span><span class="n">DoNotOptimize</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">BENCHMARK_REGISTER_F</span><span class="p">(</span><span class="n">BenchmarkFixture</span><span class="p">,</span> <span class="n">MemsetBenchmark</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">Run</span> <span class="n">on</span> <span class="p">(</span><span class="mi">12</span> <span class="n">X</span> <span class="mi">2500</span> <span class="n">MHz</span> <span class="n">CPU</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="o">------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="n">Benchmark</span>                                              <span class="n">Time</span>           <span class="n">CPU</span> <span class="n">Iterations</span>
</span><span class='line'><span class="o">------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="n">BenchmarkFixture</span><span class="o">/</span><span class="n">ForLoopAssignmentBenchmark</span>         <span class="mi">1013</span> <span class="n">ns</span>       <span class="mi">1013</span> <span class="n">ns</span>     <span class="mi">750073</span>
</span><span class='line'><span class="n">BenchmarkFixture</span><span class="o">/</span><span class="n">MemsetBenchmark</span>                      <span class="mi">84</span> <span class="n">ns</span>         <span class="mi">84</span> <span class="n">ns</span>    <span class="mi">6209926</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we can see, memset is much faster than the for loop assignment in this case. Looking at the generated assembly code, memset uses <code>rep stos</code> instruction which can be the <a href="https://stackoverflow.com/questions/33480999/how-can-the-rep-stosb-instruction-execute-faster-than-the-equivalent-loop">reason</a> why it&rsquo;s faster.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// https://shipilev.net/blog/2014/nanotrusting-nanotime/</span>
</span><span class='line'><span class="kr">inline</span> <span class="kt">uint64_t</span> <span class="nf">NanosecondsSinceEpoch</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">timespec</span> <span class="n">tp</span><span class="p">;</span>
</span><span class='line'>  <span class="n">clock_gettime</span><span class="p">(</span><span class="n">CLOCK_REALTIME</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tp</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">tp</span><span class="p">.</span><span class="n">tv_sec</span> <span class="o">*</span> <span class="n">NS_PER_SEC</span> <span class="o">+</span> <span class="n">tp</span><span class="p">.</span><span class="n">tv_nsec</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BENCHMARK_DEFINE_F</span><span class="p">(</span><span class="n">BenchmarkFixture</span><span class="p">,</span> <span class="n">NanoTimeLatencyBenchmark</span><span class="p">)(</span><span class="n">benchmark</span><span class="o">::</span><span class="n">State</span><span class="o">&amp;</span> <span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="nl">_</span> <span class="p">:</span> <span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">benchmark</span><span class="o">::</span><span class="n">DoNotOptimize</span><span class="p">(</span><span class="n">NanosecondsSinceEpoch</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">BENCHMARK_REGISTER_F</span><span class="p">(</span><span class="n">BenchmarkFixture</span><span class="p">,</span> <span class="n">NanoTimeLatencyBenchmark</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">BENCHMARK_DEFINE_F</span><span class="p">(</span><span class="n">BenchmarkFixture</span><span class="p">,</span> <span class="n">NanoTimeGranularityBenchmark</span><span class="p">)(</span><span class="n">benchmark</span><span class="o">::</span><span class="n">State</span><span class="o">&amp;</span> <span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">uint64_t</span> <span class="n">cur_nano</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">uint64_t</span> <span class="n">last_nano</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="nl">_</span> <span class="p">:</span> <span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cur_nano</span> <span class="o">=</span> <span class="n">NanosecondsSinceEpoch</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">cur_nano</span> <span class="o">==</span> <span class="n">last_nano</span><span class="p">);</span>
</span><span class='line'>    <span class="n">last_nano</span> <span class="o">=</span> <span class="n">cur_nano</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">BENCHMARK_REGISTER_F</span><span class="p">(</span><span class="n">BenchmarkFixture</span><span class="p">,</span> <span class="n">NanoTimeGranularityBenchmark</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">Run</span> <span class="n">on</span> <span class="p">(</span><span class="mi">12</span> <span class="n">X</span> <span class="mi">2500</span> <span class="n">MHz</span> <span class="n">CPU</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="o">------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="n">Benchmark</span>                                              <span class="n">Time</span>           <span class="n">CPU</span> <span class="n">Iterations</span>
</span><span class='line'><span class="o">------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="n">BenchmarkFixture</span><span class="o">/</span><span class="n">NanoTimeLatencyBenchmark</span>             <span class="mi">39</span> <span class="n">ns</span>         <span class="mi">39</span> <span class="n">ns</span>   <span class="mi">18361529</span>
</span><span class='line'><span class="n">BenchmarkFixture</span><span class="o">/</span><span class="n">NanoTimeGranularityBenchmark</span>         <span class="mi">39</span> <span class="n">ns</span>         <span class="mi">39</span> <span class="n">ns</span>   <span class="mi">18073581</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NanoTimeBenchmark</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@State</span><span class="o">(</span><span class="n">Scope</span><span class="o">.</span><span class="na">Benchmark</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">BenchmarkState</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">long</span> <span class="n">_lastNano</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@Setup</span><span class="o">(</span><span class="n">Level</span><span class="o">.</span><span class="na">Iteration</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setup</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">_lastNano</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Benchmark</span>
</span><span class='line'>  <span class="nd">@Fork</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@Threads</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@Warmup</span><span class="o">(</span><span class="n">iterations</span> <span class="o">=</span> <span class="mi">10</span><span class="o">,</span> <span class="n">time</span> <span class="o">=</span> <span class="mi">5</span><span class="o">,</span> <span class="n">timeUnit</span> <span class="o">=</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@Measurement</span><span class="o">(</span><span class="n">iterations</span> <span class="o">=</span> <span class="mi">10</span><span class="o">,</span> <span class="n">time</span> <span class="o">=</span> <span class="mi">5</span><span class="o">,</span> <span class="n">timeUnit</span> <span class="o">=</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@BenchmarkMode</span><span class="o">(</span><span class="n">Mode</span><span class="o">.</span><span class="na">AverageTime</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@OutputTimeUnit</span><span class="o">(</span><span class="n">TimeUnit</span><span class="o">.</span><span class="na">NANOSECONDS</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">long</span> <span class="nf">nanoTimeLatency</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Benchmark</span>
</span><span class='line'>  <span class="nd">@Fork</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@Threads</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@Warmup</span><span class="o">(</span><span class="n">iterations</span> <span class="o">=</span> <span class="mi">10</span><span class="o">,</span> <span class="n">time</span> <span class="o">=</span> <span class="mi">5</span><span class="o">,</span> <span class="n">timeUnit</span> <span class="o">=</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@Measurement</span><span class="o">(</span><span class="n">iterations</span> <span class="o">=</span> <span class="mi">10</span><span class="o">,</span> <span class="n">time</span> <span class="o">=</span> <span class="mi">5</span><span class="o">,</span> <span class="n">timeUnit</span> <span class="o">=</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@BenchmarkMode</span><span class="o">(</span><span class="n">Mode</span><span class="o">.</span><span class="na">AverageTime</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@OutputTimeUnit</span><span class="o">(</span><span class="n">TimeUnit</span><span class="o">.</span><span class="na">NANOSECONDS</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">long</span> <span class="nf">nanoTimeGranularity</span><span class="o">(</span><span class="n">BenchmarkState</span> <span class="n">benchmarkState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">cur</span><span class="o">;</span>
</span><span class='line'>    <span class="k">do</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">cur</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">cur</span> <span class="o">==</span> <span class="n">benchmarkState</span><span class="o">.</span><span class="na">_lastNano</span><span class="o">);</span>
</span><span class='line'>    <span class="n">benchmarkState</span><span class="o">.</span><span class="na">_lastNano</span> <span class="o">=</span> <span class="n">cur</span><span class="o">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">cur</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Benchmark</span>                              <span class="n">Mode</span>  <span class="n">Cnt</span>   <span class="n">Score</span>   <span class="n">Error</span>  <span class="n">Units</span>
</span><span class='line'><span class="n">NanoTimeBenchmark</span><span class="o">.</span><span class="na">nanoTimeLatency</span>      <span class="n">avgt</span>   <span class="mi">10</span>  <span class="mf">42.705</span> <span class="err">±</span> <span class="mf">0.302</span>  <span class="n">ns</span><span class="o">/</span><span class="n">op</span>
</span><span class='line'><span class="n">NanoTimeBenchmark</span><span class="o">.</span><span class="na">nanoTimeGranularity</span>  <span class="n">avgt</span>   <span class="mi">10</span>  <span class="mf">43.875</span> <span class="err">±</span> <span class="mf">0.674</span>  <span class="n">ns</span><span class="o">/</span><span class="n">op</span>
</span></code></pre></td></tr></table></div></figure>


<p>This shows the overhead of getting time in both C++ and Java. They are not free!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One-Liners]]></title>
    <link href="http://blog.jjyao.me/blog/2018/11/07/one-liners/"/>
    <updated>2018-11-07T22:06:28-08:00</updated>
    <id>http://blog.jjyao.me/blog/2018/11/07/one-liners</id>
    <content type="html"><![CDATA[<ol>
<li><a href="#get_java_gc_stw_time">Get Java GC Related Application Stopped Time</a></li>
</ol>


<!-- more -->


<h2><a id="get_java_gc_stw_time"></a>Get Java GC Related Application Stopped Time</h2>

<p>If Java application is started with <code>-XX:+PrintGCApplicationStoppedTime</code>, gc log will contain the application stopped time (STW) caused by different reasons (e.g. GC is just one common reason). This one-liner parses the gc log and only prints out the stopped time caused by GC. <br/>
Source: <a href="https://github.com/giltene/jHiccup">https://github.com/giltene/jHiccup</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>// gc log with +PrintGCTimeStamps
</span><span class='line'>awk -F<span class="s2">&quot;: &quot;</span> <span class="s1">&#39;/\[GC/ {t = $1; l = 1; while ((l == 1) &amp;&amp; index($0, &quot;Total time&quot;) == 0) { l = getline; } if (l == 1) {print t*1000.0, $3*1000.0;}}&#39;</span> gc.log
</span><span class='line'>
</span><span class='line'>// gc log with +PrintGCTimeStamps and +PrintGCDateStamps
</span><span class='line'>awk -F<span class="s2">&quot;: &quot;</span> <span class="s1">&#39;/\[GC/ {t = $2; l = 1; while ((l == 1) &amp;&amp; index($0, &quot;Total time&quot;) == 0) { l = getline; } if (l == 1) {print t*1000.0, $4*1000.0;}}&#39;</span> gc.log
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HugeTLBFS Read Bug]]></title>
    <link href="http://blog.jjyao.me/blog/2017/11/27/hugetlbfs-read-bug/"/>
    <updated>2017-11-27T22:29:46-08:00</updated>
    <id>http://blog.jjyao.me/blog/2017/11/27/hugetlbfs-read-bug</id>
    <content type="html"><![CDATA[<p>Hit a Linux kernel bug that <code>read()</code> returns wrong data if it crosses a hugepage boundary.</p>

<!-- more -->


<h2>Scenario</h2>

<p>When I read a file in the <code>hugetlbfs</code> using <code>std::ifstream</code>, I fail to get the exact data of the file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">file</span> <span class="o">=</span> <span class="s">&quot;/mnt/huge/foo&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">ifstream</span> <span class="n">fin</span><span class="p">;</span>
</span><span class='line'><span class="n">fin</span><span class="p">.</span><span class="n">open</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ifstream</span><span class="o">::</span><span class="n">binary</span><span class="p">);</span>
</span><span class='line'><span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">fin</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">c</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">fin</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, if I use <code>fread()</code> I can get the correct data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">file</span> <span class="o">=</span> <span class="s">&quot;/mnt/huge/foo&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kt">FILE</span><span class="o">*</span> <span class="n">fin</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">file</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="s">&quot;rb&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">fread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">c</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">fin</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">fclose</span><span class="p">(</span><span class="n">fin</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>To figure out the reason, I <code>strace</code> these two programs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">open</span><span class="p">(</span><span class="s">&quot;/mnt/huge/foo&quot;</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">)</span>         <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\220</span><span class="s">N</span><span class="se">\210\344\36\227\276\303\305\301\334\346\246\245\371</span><span class="s">7tmg/</span><span class="se">\25\235</span><span class="s">C</span><span class="se">\365</span><span class="s">k</span><span class="se">\7\273</span><span class="s">T2</span><span class="se">\266\220\327</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">8191</span><span class="p">)</span> <span class="o">=</span> <span class="mi">8191</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;%</span><span class="se">\361</span><span class="s">!</span><span class="se">\253</span><span class="s">lek&amp;</span><span class="se">\30\306\370\333</span><span class="s">f</span><span class="se">\304\357</span><span class="s">L6@z</span><span class="se">\224</span><span class="s">W&lt;ef</span><span class="se">\335\206\225\246\342</span><span class="s">!</span><span class="se">\327\6</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">8191</span><span class="p">)</span> <span class="o">=</span> <span class="mi">8191</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;B</span><span class="se">\222\327</span><span class="s">-</span><span class="se">\17</span><span class="s">`&#39;</span><span class="se">\250</span><span class="s">E[]</span><span class="se">\327</span><span class="s">mi</span><span class="se">\37\330</span><span class="s">8u</span><span class="se">\250\231</span><span class="s">F</span><span class="se">\200\250\35</span><span class="s">-</span><span class="se">\v\276\245</span><span class="s">&gt;H</span><span class="se">\321</span><span class="s">R&quot;</span><span class="p">...,</span> <span class="mi">8191</span><span class="p">)</span> <span class="o">=</span> <span class="mi">8191</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;u</span><span class="se">\311</span><span class="s">w</span><span class="se">\336\10</span><span class="s">h</span><span class="se">\374\f\214\301\376</span><span class="s">-</span><span class="se">\025</span><span class="s">8&#39;</span><span class="se">\263</span><span class="s">;Iu1</span><span class="se">\273\267\345\313\246\22</span><span class="s">O</span><span class="se">\320\335\254</span><span class="s">&#39;</span><span class="se">\7</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">8191</span><span class="p">)</span> <span class="o">=</span> <span class="mi">8191</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\342\265\263\314\222\265</span><span class="s">rr</span><span class="se">\265</span><span class="s">*A</span><span class="se">\27\34</span><span class="s">&lt;</span><span class="se">\342\344</span><span class="s">F</span><span class="se">\244</span><span class="s">|</span><span class="se">\371\f\231\345\331\343</span><span class="s">=</span><span class="se">\321</span><span class="s">SZx</span><span class="se">\273\240</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">8191</span><span class="p">)</span> <span class="o">=</span> <span class="mi">8191</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;=?</span><span class="se">\241\337\20\235\367\233\10\234</span><span class="s">;^</span><span class="se">\234\337\274\322\237\242\346\32\32\233</span><span class="s">gb</span><span class="se">\231\236</span><span class="s">DZ</span><span class="se">\336</span><span class="s">t</span><span class="se">\364</span><span class="s">]&quot;</span><span class="p">...,</span> <span class="mi">8191</span><span class="p">)</span> <span class="o">=</span> <span class="mi">8191</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;1</span><span class="se">\233\21</span><span class="s">z</span><span class="se">\345\355</span><span class="s">?</span><span class="se">\243\342\361</span><span class="s">e</span><span class="se">\335\334\246\363\316</span><span class="s">A</span><span class="se">\267\361</span><span class="s">Nv</span><span class="se">\304\250\225\240</span><span class="s">Q</span><span class="se">\267\31\r\265\314</span><span class="s">&#39;&quot;</span><span class="p">...,</span> <span class="mi">8191</span><span class="p">)</span> <span class="o">=</span> <span class="mi">8191</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;$</span><span class="se">\24\277\\\213\320</span><span class="s">jGj</span><span class="se">\n</span><span class="s">b4</span><span class="se">\317\370</span><span class="s">p</span><span class="se">\216</span><span class="s">&gt;5V</span><span class="se">\331\1\256</span><span class="s">1</span><span class="se">\275\24\233\326</span><span class="s">d+</span><span class="se">\1</span><span class="s">UM&quot;</span><span class="p">...,</span> <span class="mi">8191</span><span class="p">)</span> <span class="o">=</span> <span class="mi">8191</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\262\355\327</span><span class="s">!</span><span class="se">\2</span><span class="s">h</span><span class="se">\303\332\373\16\257\3\32</span><span class="s">y!O</span><span class="se">\303</span><span class="s">]5</span><span class="se">\331\256</span><span class="s">?Q</span><span class="se">\277</span><span class="s">t</span><span class="se">\27\262\223\316\357</span><span class="s">j(&quot;</span><span class="p">...,</span> <span class="mi">8191</span><span class="p">)</span> <span class="o">=</span> <span class="mi">8191</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;pd</span><span class="se">\204</span><span class="s">3</span><span class="se">\261\350</span><span class="s">C</span><span class="se">\313\356\200\366</span><span class="s">}</span><span class="se">\17\25\335\240</span><span class="s">?</span><span class="se">\357\225</span><span class="s">Fs</span><span class="se">\226</span><span class="s">qKW</span><span class="se">\241</span><span class="s">r</span><span class="se">\227</span><span class="s">b</span><span class="se">\242</span><span class="s">4</span><span class="se">\347</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">8191</span><span class="p">)</span> <span class="o">=</span> <span class="mi">8191</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">open</span><span class="p">(</span><span class="s">&quot;/mnt/huge/foo&quot;</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">)</span>         <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="n">fstat</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="p">{</span><span class="n">st_mode</span><span class="o">=</span><span class="n">S_IFREG</span><span class="o">|</span><span class="mo">0644</span><span class="p">,</span> <span class="n">st_size</span><span class="o">=</span><span class="mi">5242880</span><span class="p">,</span> <span class="p">...})</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">mmap</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="mi">4096</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="o">|</span><span class="n">PROT_WRITE</span><span class="p">,</span> <span class="n">MAP_PRIVATE</span><span class="o">|</span><span class="n">MAP_ANONYMOUS</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="mh">0x7f9328b03000</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\220</span><span class="s">N</span><span class="se">\210\344\36\227\276\303\305\301\334\346\246\245\371</span><span class="s">7tmg/</span><span class="se">\25\235</span><span class="s">C</span><span class="se">\365</span><span class="s">k</span><span class="se">\7\273</span><span class="s">T2</span><span class="se">\266\220\327</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">4096</span><span class="p">)</span> <span class="o">=</span> <span class="mi">4096</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\v\327\265</span><span class="s">M</span><span class="se">\276\253\357\325</span><span class="s">m</span><span class="se">\244\253\351\237\350\273\21</span><span class="s">E&lt;</span><span class="se">\326\356\030</span><span class="s">03</span><span class="se">\210\5\277\210</span><span class="s">h</span><span class="se">\200</span><span class="s">V5</span><span class="se">\376</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">4096</span><span class="p">)</span> <span class="o">=</span> <span class="mi">4096</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\361</span><span class="s">!</span><span class="se">\253</span><span class="s">lek&amp;</span><span class="se">\30\306\370\333</span><span class="s">f</span><span class="se">\304\357</span><span class="s">L6@z</span><span class="se">\224</span><span class="s">W&lt;ef</span><span class="se">\335\206\225\246\342</span><span class="s">!</span><span class="se">\327\6\t</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">4096</span><span class="p">)</span> <span class="o">=</span> <span class="mi">4096</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\343\300\202</span><span class="s">/</span><span class="se">\343\t\300\340\332\215\214</span><span class="s">8</span><span class="se">\226\342\251\377\f</span><span class="s">q_</span><span class="se">\21</span><span class="s">n</span><span class="se">\370\212\273</span><span class="s">tn</span><span class="se">\305\210</span><span class="s">#</span><span class="se">\320</span><span class="s">@`&quot;</span><span class="p">...,</span> <span class="mi">4096</span><span class="p">)</span> <span class="o">=</span> <span class="mi">4096</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\327</span><span class="s">-</span><span class="se">\17</span><span class="s">`&#39;</span><span class="se">\250</span><span class="s">E[]</span><span class="se">\327</span><span class="s">mi</span><span class="se">\37\330</span><span class="s">8u</span><span class="se">\250\231</span><span class="s">F</span><span class="se">\200\250\35</span><span class="s">-</span><span class="se">\v\276\245</span><span class="s">&gt;H</span><span class="se">\321</span><span class="s">R</span><span class="se">\277\36</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">4096</span><span class="p">)</span> <span class="o">=</span> <span class="mi">4096</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;t</span><span class="se">\346</span><span class="s">p0</span><span class="se">\204</span><span class="s">OeD</span><span class="se">\211\256\233</span><span class="s">g</span><span class="se">\242\351</span><span class="s">3</span><span class="se">\3</span><span class="s">X</span><span class="se">\367\032</span><span class="s">3</span><span class="se">\332\235\330\215\375\261</span><span class="s">G</span><span class="se">\234\217\17\34\375</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">4096</span><span class="p">)</span> <span class="o">=</span> <span class="mi">4096</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\336\10</span><span class="s">h</span><span class="se">\374\f\214\301\376</span><span class="s">-</span><span class="se">\025</span><span class="s">8&#39;</span><span class="se">\263</span><span class="s">;Iu1</span><span class="se">\273\267\345\313\246\22</span><span class="s">O</span><span class="se">\320\335\254</span><span class="s">&#39;</span><span class="se">\7\205\r\325</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">4096</span><span class="p">)</span> <span class="o">=</span> <span class="mi">4096</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;xK</span><span class="se">\373\233\300\n\354\350</span><span class="s">&gt;s</span><span class="se">\243\270\365</span><span class="s">D</span><span class="se">\276\263\226</span><span class="s">/</span><span class="se">\276\27</span><span class="s">S</span><span class="se">\225\&quot;</span><span class="s">yL</span><span class="se">\4</span><span class="s">V</span><span class="se">\352\272\26</span><span class="s">b</span><span class="se">\261</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">4096</span><span class="p">)</span> <span class="o">=</span> <span class="mi">4096</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\222\265</span><span class="s">rr</span><span class="se">\265</span><span class="s">*A</span><span class="se">\27\34</span><span class="s">&lt;</span><span class="se">\342\344</span><span class="s">F</span><span class="se">\244</span><span class="s">|</span><span class="se">\371\f\231\345\331\343</span><span class="s">=</span><span class="se">\321</span><span class="s">SZx</span><span class="se">\273\240</span><span class="s">)</span><span class="se">\245</span><span class="s">h</span><span class="se">\224</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">4096</span><span class="p">)</span> <span class="o">=</span> <span class="mi">4096</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;P</span><span class="se">\332</span><span class="s">o&gt;+</span><span class="se">\355\17\372\251\275</span><span class="s">n</span><span class="se">\266</span><span class="s"> </span><span class="se">\n\310</span><span class="s">aB</span><span class="se">\210\235\30</span><span class="s">u{</span><span class="se">\365\34\255\367\36\375\365\v\27\331</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">4096</span><span class="p">)</span> <span class="o">=</span> <span class="mi">4096</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\235\367\233\10\234</span><span class="s">;^</span><span class="se">\234\337\274\322\237\242\346\32\32\233</span><span class="s">gb</span><span class="se">\231\236</span><span class="s">DZ</span><span class="se">\336</span><span class="s">t</span><span class="se">\364</span><span class="s">]</span><span class="se">\225\216</span><span class="s">.=C&quot;</span><span class="p">...,</span> <span class="mi">4096</span><span class="p">)</span> <span class="o">=</span> <span class="mi">4096</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;p$</span><span class="se">\350</span><span class="s">r</span><span class="se">\31\215\&quot;\225\331</span><span class="s">&amp;</span><span class="se">\354\200\361\344\333</span><span class="s">L</span><span class="se">\201\37</span><span class="s">e</span><span class="se">\r\&quot;\353\255\244\250</span><span class="s">?</span><span class="se">\253</span><span class="s">O</span><span class="se">\252</span><span class="s">A3</span><span class="se">\371</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">4096</span><span class="p">)</span> <span class="o">=</span> <span class="mi">4096</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Based on <code>strace</code>, <code>std::ifstream</code> reads 8191 bytes at a time and <code>fread()</code> reads 4096 bytes at a time. To check if the read size matters, I change the <code>std::ifstream</code> program so that it also reads 4096 bytes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">file</span> <span class="o">=</span> <span class="s">&quot;/mnt/huge/foo&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">ifstream</span> <span class="n">fin</span><span class="p">;</span>
</span><span class='line'><span class="c1">// with a user-provided buffer, libstdc++ reads n-1 bytes at a time</span>
</span><span class='line'><span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">4096</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="n">fin</span><span class="p">.</span><span class="n">rdbuf</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">pubsetbuf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>
</span><span class='line'><span class="n">fin</span><span class="p">.</span><span class="n">open</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ifstream</span><span class="o">::</span><span class="n">binary</span><span class="p">);</span>
</span><span class='line'><span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">fin</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">c</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">fin</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>After I change <code>std::ifstream</code> to read 4096 bytes at a time, I&rsquo;m able to read the correct data so the read size matters. <code>read()</code> is a system call and it should handle all kinds of read size so the experiment indicates that there might be a bug somewhere in the kernel. After looking at the kernel commit log, something interesting shows up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="nl">Author</span><span class="p">:</span> <span class="n">Al</span> <span class="n">Viro</span> <span class="o">&lt;</span><span class="n">viro</span><span class="err">@</span><span class="n">zeniv</span><span class="p">.</span><span class="n">linux</span><span class="p">.</span><span class="n">org</span><span class="p">.</span><span class="n">uk</span><span class="o">&gt;</span>
</span><span class='line'><span class="nl">Date</span><span class="p">:</span>   <span class="n">Fri</span> <span class="n">Apr</span> <span class="mi">3</span> <span class="mi">11</span><span class="o">:</span><span class="mi">31</span><span class="o">:</span><span class="mi">35</span> <span class="mi">2015</span> <span class="o">-</span><span class="mo">0400</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">switch</span> <span class="n">hugetlbfs</span> <span class="n">to</span> <span class="o">-&gt;</span><span class="n">read_iter</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">...</span> <span class="n">and</span> <span class="n">fix</span> <span class="n">the</span> <span class="k">case</span> <span class="n">when</span> <span class="n">the</span> <span class="n">area</span> <span class="n">we</span> <span class="n">are</span> <span class="n">asked</span> <span class="n">to</span> <span class="n">read</span> <span class="n">crosses</span>
</span><span class='line'>    <span class="n">a</span> <span class="n">hugepage</span> <span class="n">boundary</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Signed</span><span class="o">-</span><span class="n">off</span><span class="o">-</span><span class="nl">by</span><span class="p">:</span> <span class="n">Al</span> <span class="n">Viro</span> <span class="o">&lt;</span><span class="n">viro</span><span class="err">@</span><span class="n">zeniv</span><span class="p">.</span><span class="n">linux</span><span class="p">.</span><span class="n">org</span><span class="p">.</span><span class="n">uk</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So I actually hit a kernel bug.</p>

<h2>Solution</h2>

<p>Change the <code>std::ifstream</code> read size by providing a user-provided buffer so that read won&rsquo;t cross the hugepage boundary or upgrade the Linux kernel version to include the fix.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jonathan Lee]]></title>
    <link href="http://blog.jjyao.me/blog/2017/09/10/jonathan-lee/"/>
    <updated>2017-09-10T22:13:16-07:00</updated>
    <id>http://blog.jjyao.me/blog/2017/09/10/jonathan-lee</id>
    <content type="html"><![CDATA[<p>我说我喜欢你的歌，我不知道这算不算是一件好事。
我说我喜欢你的词，总是道出我心中不欲人知的事。</p>

<!-- more -->


<p>念念不忘必有回响，我终于见到了李宗盛，在我人生参加的第一场演唱会上。在等待了多年以后，我终于在现场听到了那些陪伴了我无数个日夜的歌，那些叫做“词曲：李宗盛”的歌。</p>

<p><img src="http://blog.jjyao.me/images/post/jonathan-lee/concert.jpeg">
<img src="http://blog.jjyao.me/images/post/jonathan-lee/live.jpeg"></p>

<p>下一次，我飘洋过海来看你。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You Don't Exist, Go Away!]]></title>
    <link href="http://blog.jjyao.me/blog/2017/08/30/you-dont-exist-go-away/"/>
    <updated>2017-08-30T21:10:41-07:00</updated>
    <id>http://blog.jjyao.me/blog/2017/08/30/you-dont-exist-go-away</id>
    <content type="html"><![CDATA[<p>SSH asks me to go way because of ntp clock skew</p>

<!-- more -->


<h2>Scenario</h2>

<p>When I try to ssh to a remote server from my linux desktop, I get:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[jyao@localhost]$ ssh eng-portal
</span><span class='line'>You don't exist, go away!</span></code></pre></td></tr></table></div></figure>


<p>Then I realize that my shell prompt changes to <code>[I have no name!@localhost]$</code>. Apparently, <code>whoami</code> stops working:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[I have no name!@localhost]$ whoami
</span><span class='line'>whoami: cannot find name for user ID 16195</span></code></pre></td></tr></table></div></figure>


<p>Another thing I find accidentally is that if I disconnect my desktop from internet, <code>whoami</code> works again. So my guess is that <code>whoami</code> tries to get name from a remote server if there is internet connection. Otherwise, it falls back to use a local database which contains the correct data. My first theory is that the data on the remote server is corrupted. To figure out the remote server that <code>whoami</code> talks to, I run <code>strace</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[I have no name!@localhost]$ strace -f -e trace=network -s 10000 whoami
</span><span class='line'>...
</span><span class='line'>connect(3, {sa_family=AF_FILE, path="/var/lib/likewise/.lsassd"}, 110) = 0
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>So <code>whoami</code> talks to <code>lsassd</code> daemon which then talks to <code>Active Directory</code> server. Based on my first theory, it looks like the data on the <code>Active Directory</code> server is corrupted. To confirm this, I run <code>lw-find-user-by-id</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[I have no name!@localhost]$ /opt/likewise/bin/lw-find-user-by-id 16195
</span><span class='line'>Clock skew detected with active directory server</span></code></pre></td></tr></table></div></figure>


<p>Hmm, this means that my first theory is wrong. To confirm the clock skew, I run <code>ntpq</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[I have no name!@localhost]$ ntpq -p
</span><span class='line'>remote           refid      st t when poll reach   delay   offset  jitter
</span><span class='line'>==============================================================================
</span><span class='line'>*lmn1-d1-infra01 10.251.184.29    2 u   44   64  177    1.612  -364830 129.863
</span><span class='line'>+lmn1-d1-infra02 10.251.184.29    2 u   47   64  177    1.512  -364831 129.060</span></code></pre></td></tr></table></div></figure>


<p>It turns out that the desktop clock is off by 6 minutes. Now the question arises: why <code>ntpd</code> fails to sync up the correct time with the ntp server after the clock skew happens? After googling, I find that <code>ntpd</code> indeed tries to fix the clock skew but just in a slow speed (<a href="https://serverfault.com/a/608157">https://serverfault.com/a/608157</a>). It takes <code>ntpd</code> more than 1 week to fix 6 minutes skew.</p>

<h2>Solution</h2>

<p>Force <code>ntpd</code> to do sync up using <code>-g</code> option:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// disconnect from internet first as sudo needs whoami to be working
</span><span class='line'>[I have no name!@localhost]$ sudo service ntpd stop
</span><span class='line'>// connect to internet
</span><span class='line'>[I have no name!@localhost]$ sudo ntpd -gq
</span><span class='line'>[I have no name!@localhost]$ sudo service ntpd start</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Have Learned From CMU CS Education]]></title>
    <link href="http://blog.jjyao.me/blog/2015/12/23/what-i-have-learned-from-cmu-cs-education/"/>
    <updated>2015-12-23T20:51:02-08:00</updated>
    <id>http://blog.jjyao.me/blog/2015/12/23/what-i-have-learned-from-cmu-cs-education</id>
    <content type="html"><![CDATA[<p>在南京大学软件学院读完本科后我到CMU读了硕士。虽然在CMU只有短短的一年半时间，但我还是从多个方面体验到了CMU（美国）的计算机教育。这其中有很多东西值得国内的高校学习借鉴。</p>

<!-- more -->


<h2>Internship</h2>

<p>美国的本科生有比国内本科生更多的实习机会。每年暑假他们都可以到一个公司（这其中不乏Google，Facebook这样的大公司）实习，这样下来他们在本科阶段就有3次实习机会（加拿大滑铁卢大学因为有co-op，所以学生有6次实习机会）。相反，国内学生暑假的时候一般都回家休息，只有大四的时候有一次实习机会。更多更早的实习机会对学生们来说意味着他们有机会运用学校所学知识去解决实际问题并且还能从工业界获得在学校里学不到的知识和经验。多次实习也让他们有机会对多个公司有更深入的了解，这样等到毕业选公司的时候可以做出更适合自己的选择。同时实习经历也能让他们毕业后更顺利地从学生身份过渡到员工身份。从另一个方面来讲，实习对公司也是有利的。相比面试而言，公司可以通过实习更全面地了解学生并从中挑出优秀适合公司的给出offer。同时实习也给了公司一个展示企业文化等的机会，以此来帮助公司吸引优秀的实习生毕业后回到公司。</p>

<h2>Sabbatical</h2>

<p>Sabbatical制度是指教授每工作几年后都有一次休假的机会。教授往往会借着这个机会到工业界工作一段时间。在我CMU读书期间，就有一个CS的教授利用Sabbatical的机会到Google Brain组工作了一年。这种Sabbatical机会促进了工业界和学术界的交流，让教授有机会了解到工业界的需求同时也让工业界有机会使用学术界的成果。</p>

<h2>Guests</h2>

<p>CMU很注重学术交流，经常会请各种guests来做讲座。有些课程会特地安排几节课来请外面的人到学校做讲座。比如我在CMU上的Storage课就请过GFS（Google File System）的开发者来做过讲座。又比如说CMU DB Group曾举办过&#8221;Seven Databases in Seven Weeks&#8221; Seminar活动，请来了知名的数据库开发人员来介绍他们的数据库。这些guests有来自工业界的也有来自学术界的。通过和他们的交流，我们能够扩展我们的视野，从多方面学习到相关知识。</p>

<h2>TA</h2>

<p>在CMU，上过一门课后就可以申请成为那门课的TA。当TA需要在office hour的时候解答学生的问题也需要批改作业和试卷。对于老师来讲，TA分担了一部分的工作。对于TA来讲，一方面可以增加点收入另一方面也会在答疑的过程中巩固所学知识。</p>

<h2>Industry</h2>

<p>和工业界的紧密联系是我对CMU计算机教育的另一个印象。Intel的Research Center就在校园里，研究员们会和PhD们共同参与研究。每年Parall Data Lab会举办一个为期三天的Retreat，邀请工业界的人来参加Workshop，向他们展示最新的研究成果，并给学生和教授一个和工业界深入交流的机会。同时每年会有大量工业界的guests受邀来学校做讲座。这样的紧密联系促进了知识的共享也能让学生多了些工业界的人脉。</p>

<h2>Professors</h2>

<p>在CMU，教授有Teaching Professor, Research Professor和Professor。擅长教书和擅长做研究的都可以找到适合自己的职位。这样可以避免让不擅长教书的人去教书这样的情况发生，对教授和学生都是一件好事。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Have Learned From Writing a Kernel From Scratch]]></title>
    <link href="http://blog.jjyao.me/blog/2015/06/15/what-i-have-learned-from-writing-a-kernel-from-scratch/"/>
    <updated>2015-06-15T21:45:49-07:00</updated>
    <id>http://blog.jjyao.me/blog/2015/06/15/what-i-have-learned-from-writing-a-kernel-from-scratch</id>
    <content type="html"><![CDATA[<p>Last semester, I took the course <a href="https://www.cs.cmu.edu/~410/">15410</a> and wrote a kernel from scratch with my partner. I learned a lot from this course and the kernel project. Following is what I have learned:</p>

<ol>
<li>Never Failed Functions</li>
<li>Comment on Why</li>
<li>Synchronization</li>
<li>Error Handling</li>
<li>Why Writing a Kernel From Scratch</li>
<li>Misc.</li>
</ol>


<!-- more -->


<h2>Never Failed Functions</h2>

<p>There are cases where some functions cannot fail, which means that they cannot return errors and let callers handle these errors. For example, the <code>free()</code> function is a never failed function. Why? Because callers have no way to do something reasonable to handle the failure. What can we do when <code>free()</code> returns an error code? Retry, ignore or exit? Obviously, none of these solutions are acceptable. Similarly, <code>exit()</code> can never fail. To implement these never failed functions, we need to allocate resources needed by these functions in advance. For example, we should <strong>preallocate</strong> resources (e.g. memory that stores exit status) that are necessary for <code>exit()</code> to succeed when we <code>fork()</code> the process even if <code>fork()</code> itself doesn&rsquo;t need those resources. If <code>fork()</code> cannot preallocate needed resources, it can just returns an error as callers can do reasonable things to handle errors from it. Similarly, if <code>free()</code> needs some resources to succeed, we should acquire them inside <code>malloc()</code>. Another implication of never failed functions is that we should consider if a function can fail when we design the interface of the function. To make the decision, we should put ourselves in the shoe of callers. Can callers do something reasonable to handle returned errors? If the answer is not, then we should probably implement the function in a way that it never fails using techniques like preallocation.</p>

<h2>Comment on Why</h2>

<p>When we write comments, we should answer the question why we write this code. <strong>It&rsquo;s easier to figure out what the code does than why it is written.</strong> For the kernel, there are some code that is written to handle special cases that only happen in a special execution path. For example, some concurrency issues can only be triggered when interrupts or context switches happen in a particular time (e.g. before the execution of a particular instruction). To address these issues, we need to write some special code and it&rsquo;s important for us to write comments explaining why we write this code. If we don&rsquo;t write comments, then next time no one understands this piece of code (it&rsquo;s hard, if not impossible, to recall the particular execution path that causes concurrency issues).</p>

<h2>Synchronization</h2>

<p>Writing a kernel is all about synchronization, concurrency, race conditions and deadlock. <strong>Interrupts can happen at any time</strong>, and as a result, CPU is switched to execute interrupt handlers. What happens if CPU is executing a critical section when an interrupt happens? What happens if an interrupt handler tries to acquire a lock that has already been acquired by the interrupted code? As application programmers, we use synchronization primitives such as mutex to protect critical sections. However, these primitives cannot solve all the concurrency problems happening in the kernel. For example, we cannot use mutex to protect data accessed by both of an interrupt handler and some other code because it can cause deadlock. A typical example is the scan code buffer used by the keyboard interrupt handler. When a key is pressed or released, the keyboard handler is invoked to handle the event. What it does is store the scan code to a buffer so that some program can retrieve it later. As keyboard interrupts can happen when some program is accessing the scan code buffer to retrieve data and the keyboard interrupt handler also accesses the buffer to put data, the shared buffer should be protected. A normal mutex doesn&rsquo;t help in this case because it causes deadlock. Imagining that some code acquires the mutex and is accessing the scan code buffer and at that time, keyboard interrupt handler is invoked, the handler wants to acquire the mutex to access the buffer but it has already been acquired so the hanlder has to wait for the mutex to be released. However, the interrupted code cannot resume execution before the interrupt handler returns and as a result, we have the deadlock. To solve this problem, we can disable interrupts instead of using mutex. Disabling interrupts is the easiest way to address concurrency issues but it doesn&rsquo;t mean that we should use it everywhere. The problem of disabling interrupts is that the kernel may miss interrupts (e.g. timer interrupts) and becomes less preemptible, so we should avoid disabling interrupts if there are other methods to solve concurrency issues (e.g. avoid sharing data).</p>

<h2>Error Handling</h2>

<p>To write robust software (e.g. kernel), we have to handle <strong>all</strong> possible errors correctly. For example, we should assume that all <code>malloc()</code> invocations may fail and write code to handle these failures. It seems to be tedious to handle every possible error (especially errors that we think are unlikely to happen), but it is crucial for writing robust software (according to Murphy&rsquo;s law, errors will happen eventually). Some errors are expected and current code can recover from them. In this case, current code should resolve these errors. Some errors are expected and current code doesn&rsquo;t have enough knowledge to resolve them. In this case, current code should propagate errors up and let callers handle these errors. Some errors are unexpected and usually indicate program bugs (e.g. unexpected null pointer parameters). In this case, programs should log enough information and exit immediately, which helps programmers find bugs quickly.</p>

<h2>Why Writing a Kernel From Scratch</h2>

<p>Many people ask the question why we should take 15410 and write a kernel from scratch, after all we are highly unlikely to be asked to implement a new operating system during our lifetime. Here is my answer to this question. Writing a kenel from scratch lets us have a deep understanding of current operating systems (e.g. Unix) and know how they work. Compared with Unix, our kernel is a toy but concepts are similar. A toy kernel also implements context switch, virtual memory, paging, copy-on-write, zero-filled on demand, drivers, interrupt handlers, scheduler, processes, threads, synchronization primitives, and system calls. Through implementing these concepts, we know why context swith is costly, why system call is costly, why process is heavyweight, and so on. As all application software runs on top of an operating system, having a good understanding of these things helps us write performant software. For example, knowing that context switch is costly and process is heavyweight, Nginx developers use an <a href="http://nginx.com/blog/thread-pools-boost-performance-9x/">asynchronous, event-driven approach to handling connections</a>, which makes Nginx a high performance web server. What&rsquo;s more, through implementing a kernel, we learn how to write robust, well-documented code. The same techniques can also be applied to writing other code. In a word, <strong>writing a kernel from scratch helps us write better application software</strong>.</p>

<h2>Misc.</h2>

<ol>
<li>After <code>cond_wait()</code>, the code needs to check the condition <strong>again</strong>, which means we should warp <code>cond_wait()</code> with <code>while</code> instead of <code>if</code>.</li>
<li>Solving a problem using <code>sleep()</code> is bad. N-1 times it&rsquo;s much too short. Nth time it&rsquo;s much too long. The magic number doesn&rsquo;t work well every time.</li>
<li>To have an efficient meeting, we should have our own thoughts and ideas before the meeting.</li>
<li>Any problem in computer science can be solved with another level of indirection. —— David Wheeler</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Which Intent Will You Get After Android Relaunches the Activity]]></title>
    <link href="http://blog.jjyao.me/blog/2014/08/28/which-intent-will-you-get-after-android-relaunches-the-activity/"/>
    <updated>2014-08-28T14:28:06-07:00</updated>
    <id>http://blog.jjyao.me/blog/2014/08/28/which-intent-will-you-get-after-android-relaunches-the-activity</id>
    <content type="html"><![CDATA[<p>Imagine that you launch a <code>singleTop</code> activity using intent A and then launch it again using intent B. As a result, activity&rsquo;s <code>onNewIntent</code> method is called and inside this method you call <code>setIntent</code> to store the new intent. After that, Android decides to relaunch the activity. Now we have the question: which intent will you get after Android relaunches the activity? The original one(A) or the latest one(B)?</p>

<!-- more -->


<p>The answer is you may get either one, and it depends on why Android relaunches the activity. In some situations, Android will relaunch your activity because Android kills it(indeed the process) to reclaim memory and then you navigate back to it.
In this case, you will get the original intent instead of the latest one. Android will also relaunch your activity(it&rsquo;s the default behavior) due to the configuration change and you&rsquo;ll get the latest intent. Now let&rsquo;s discuss these two cases separately and see why we get different intents in these two cases.</p>

<h2>Killed Process</h2>

<p>In Android, activities, taskes and processes are managed by <code>ActivityManagerService</code> and each activity has a corresponding <code>ActivityRecord</code>. As we can see, <code>ActivityRecord</code> stores lots of information related to the activity.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/** ActivityRecord.java **/</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * An entry in the history stack, representing an activity.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">final</span> <span class="kd">class</span> <span class="nc">ActivityRecord</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">.....</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">final</span> <span class="n">ActivityManagerService</span> <span class="n">service</span><span class="o">;</span> <span class="c1">// owner</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">ActivityInfo</span> <span class="n">info</span><span class="o">;</span>              <span class="c1">// all about me</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Intent</span> <span class="n">intent</span><span class="o">;</span>                  <span class="c1">// the original intent that generated us</span>
</span><span class='line'>    <span class="n">TaskRecord</span> <span class="n">task</span><span class="o">;</span>                      <span class="c1">// the task this is in</span>
</span><span class='line'>    <span class="n">ActivityRecord</span> <span class="n">resultTo</span><span class="o">;</span>              <span class="c1">// who started this entry, so will get our reply</span>
</span><span class='line'>    <span class="n">Bundle</span>  <span class="n">icicle</span><span class="o">;</span>                       <span class="c1">// last saved activity state</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">.....</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you launch a <code>singleTop</code> activity using intent A, some process(maybe the Launcher) sends a request to <code>ActivityManagerService</code>(through Binder RPC) and <code>ActivityManagerService</code> creates an <code>ActivityRecord</code>. Now the intent variable of the new <code>ActivityRecord</code> object is A. Then <code>ActivityManagerService</code> may create the application process(if not exists) and asks the application process(through Binder RPC) to launch the specified <code>Activity</code> using intent A. In the application process, <code>ActivityThread</code> receives and handles the request. It creates an <code>Activity</code> object and calls lifecycle methods.</p>

<p>Then you launch the activity again using intent B and <code>ActivityManagerService</code> receives the request. It finds that there&rsquo;s already an <code>ActivityRecord</code> on the top of the stack, so it decides to deliver the new intent B to this existing activity. Here we have to notice that the intent variable of the <code>ActivityRecord</code> object is still A and it&rsquo;s immutable(final). After <code>ActivityManagerService</code> sends the new intent request, <code>ActivityThread</code> receives it and calls activity&rsquo;s <code>onNewIntent</code> method.</p>

<p>At some point, Android decides to kill the application process due to low memory. After that, you navigate back to this activity and <code>ActivityManagerService</code> has to relaunch it using the information stored in <code>ActivityRecord</code>. As you can see, <code>ActivityRecord</code> only stores the original inten(A) and the latest one(B) is lost. Why? Becuase the latest intent is only stored in the <code>Activity</code> and now the activity(process) is killed! So, in this case, you&rsquo;ll get the original intent after Android relaunches the activity.</p>

<h2>Configuration Change</h2>

<p>After you launch the activity again using intent B, you decide to rotate the screen. Now we have the configuration change. When <code>ActivityManagerService</code> detects configuration changes, it relaunches the current activity by sending a request to <code>ActivityThread</code>. <code>ActivityThread</code> handles the request and relaunches the activity.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/** ActivityThread.java **/</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleRelaunchActivity</span><span class="o">(</span><span class="n">ActivityClientRecord</span> <span class="n">tmp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">......</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ActivityClientRecord</span> <span class="n">r</span> <span class="o">=</span> <span class="n">mActivities</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">tmp</span><span class="o">.</span><span class="na">token</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Intent</span> <span class="n">currentIntent</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="na">activity</span><span class="o">.</span><span class="na">mIntent</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Need to ensure state is saved.</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">r</span><span class="o">.</span><span class="na">paused</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">performPauseActivity</span><span class="o">(</span><span class="n">r</span><span class="o">.</span><span class="na">token</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">r</span><span class="o">.</span><span class="na">isPreHoneycomb</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">r</span><span class="o">.</span><span class="na">state</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">r</span><span class="o">.</span><span class="na">stopped</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">r</span><span class="o">.</span><span class="na">isPreHoneycomb</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">r</span><span class="o">.</span><span class="na">state</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Bundle</span><span class="o">();</span>
</span><span class='line'>        <span class="n">r</span><span class="o">.</span><span class="na">state</span><span class="o">.</span><span class="na">setAllowFds</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mInstrumentation</span><span class="o">.</span><span class="na">callActivityOnSaveInstanceState</span><span class="o">(</span><span class="n">r</span><span class="o">.</span><span class="na">activity</span><span class="o">,</span> <span class="n">r</span><span class="o">.</span><span class="na">state</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">handleDestroyActivity</span><span class="o">(</span><span class="n">r</span><span class="o">.</span><span class="na">token</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">configChanges</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">r</span><span class="o">.</span><span class="na">activity</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="n">r</span><span class="o">.</span><span class="na">window</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">......</span>
</span><span class='line'>    <span class="n">handleLaunchActivity</span><span class="o">(</span><span class="n">r</span><span class="o">,</span> <span class="n">currentIntent</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we can see, <code>ActivityThread</code> finds the activity and stores its latest intent in a variable. Then it destroys the activity and relaunches the activity using the latest intent. Because the application process is not killed in this case, the latest intent is not lost and we can get it after Android relaunches the activity.</p>

<h2>Conclusion</h2>

<p>Because you don&rsquo;t know which intent you will get after Android relaunches the activity, you should use <code>savedInstanceState</code> to restore activity&rsquo;s state. In fact, <code>ActivityRecord</code> stores activity&rsquo;s <code>savedInstanceState</code> in its icicle variable, so it won&rsquo;t be lost!</p>

<h2>Reference</h2>

<p><a href="https://groups.google.com/forum/#!topic/android-developers/vrLdM5mKeoY">https://groups.google.com/forum/#!topic/android-developers/vrLdM5mKeoY</a><br />
The source code of ActivityThread, ActivityManagerService, ActivityStackSupervisor, ActivityStack, ActivityRecord, TaskRecord and ProcessRecord.</p>
]]></content>
  </entry>
  
</feed>
