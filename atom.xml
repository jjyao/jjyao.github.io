<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jiajun Yao]]></title>
  <link href="http://blog.jjyao.me/atom.xml" rel="self"/>
  <link href="http://blog.jjyao.me/"/>
  <updated>2021-04-08T15:15:11-07:00</updated>
  <id>http://blog.jjyao.me/</id>
  <author>
    <name><![CDATA[jjyao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Response Time and Throughput]]></title>
    <link href="http://blog.jjyao.me/blog/2021/04/04/response-time-and-throughput/"/>
    <updated>2021-04-04T13:43:32-07:00</updated>
    <id>http://blog.jjyao.me/blog/2021/04/04/response-time-and-throughput</id>
    <content type="html"><![CDATA[<p>For the discussion of this post, response time is the time between a service receiving a request and returning a response. It is the sum of waiting time and processing time. Waiting time is how long the request waits in queues before being processed. Processing time is the time to actually do the work of the request. Throughput is the number of requests that are completed per unit time. This post discusses how they can be possibly related.</p>

<!-- more -->


<h2>Lower Processing Time &amp; Higher Throughput</h2>

<p>If we reduce the processing time, the throughput might be higher. For example, the throughput is 10 requests per second if the processing time is 100ms CPU time assuming it&rsquo;s a single CPU system. If the processing time is reduced to 10ms CPU time, the throughput is increased to 100 requests per second.</p>

<h2>Higher Processing Time &amp; Lower Throughput</h2>

<p>This is the opposite of lower processing time &amp; higher throughput. This is undesirable since we lose both processing time and throughput.</p>

<h2>Lower Processing Time &amp; Lower Throughput</h2>

<p>By optimizing the part of the system that&rsquo;s not the throughput bottleneck, the throughput keeps the same or is even lower. For example, the request processing time is 100ms CPU time and 10ms IO time. Since the request is CPU bound, reducing the IO time will bring down the overall processing time but throughput will still be the same: 10 requests per second. If reducing the IO time comes with the cost of increasing the CPU time (say CPU time becomes 101ms and IO time becomes 5ms), the throughput is actually lower even though the processing time is also lower.</p>

<h2>Higher Processing Time &amp; Higher Throughput</h2>

<p>If we can reduce the time spent on the bottleneck part of the system at the cost of increasing overall processing time, we can get higher throughput. Lets still use the request with 100ms CPU time and 10ms IO time as an example. If we can reduce the CPU time to 90ms at the cost of increasing the IO time to 30ms, the throughput is higher now even though the overall processing time is also higher.</p>

<h2>Higher Waiting Time &amp; Higher Throughput</h2>

<p>The maximum throughput we can get is 10 requests per second if the processing time is 100ms CPU time. To achieve that maximum throughput, we need to make sure the CPU is busy all the time (i.e. 100% utilization). In other words, there is always a request in the queue waitting to be processed as soon as the CPU finishes the current request. Basically we want requests to wait for CPU instead of CPU waiting for requests. By having requests wait for CPU, we incur some waiting time to achieve the higher (maximum) throughput.</p>

<h2>Lower Waiting Time &amp; Lower Throughput</h2>

<p>This is the opposite of higher waiting time &amp; higher throughput. To make sure the waiting time is zero, we need to make sure the CPU is idle and there is no other requests in the queue by the time when the request is received. By having CPU idle for some time, the throughput will be lower than the maximum throughput.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nondeterministic Code]]></title>
    <link href="http://blog.jjyao.me/blog/2021/02/26/nondeterministic-code/"/>
    <updated>2021-02-26T16:11:07-08:00</updated>
    <id>http://blog.jjyao.me/blog/2021/02/26/nondeterministic-code</id>
    <content type="html"><![CDATA[<p>Nondeterministic code is hard to debug since bugs are not consistently reproducible. It&rsquo;s easy to notice that the code is perhaps nondeterministic if multi-threading or random functions are involved. However we can still write nondeterministic single-threaded code without using random functions.</p>

<!-- more -->


<h2>Random Address</h2>

<p><a href="https://en.wikipedia.org/wiki/Address_space_layout_randomization">Address space layout randomization</a> randomly arranges the address space positions of stack and heap of a process, which means the address of a variable changes for each run. This is the source of nondeterminism if we try to iterate through an unordered container of pointers.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unordered_set&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">a</span> <span class="o">=</span> <span class="s">&quot;aaaaa&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">b</span> <span class="o">=</span> <span class="s">&quot;bb&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">c</span> <span class="o">=</span> <span class="s">&quot;cccccccccccc&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">unordered_set</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">*&gt;</span> <span class="n">set</span><span class="p">;</span>
</span><span class='line'>  <span class="n">set</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="o">&amp;</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'>  <span class="n">set</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="o">&amp;</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'>  <span class="n">set</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="o">&amp;</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">*</span> <span class="nl">p</span> <span class="p">:</span> <span class="n">set</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">p</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;(&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">p</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">hash</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">*&gt;</span><span class="p">{}(</span><span class="n">p</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;)&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="o">&gt;</span> <span class="n">clang</span><span class="o">++</span> <span class="n">demo</span><span class="p">.</span><span class="n">cc</span> <span class="o">-</span><span class="n">o</span> <span class="n">demo</span> <span class="o">-</span><span class="n">std</span><span class="o">=</span><span class="n">c</span><span class="o">++</span><span class="mi">11</span>
</span><span class='line'><span class="o">&gt;</span> <span class="p">.</span><span class="o">/</span><span class="n">demo</span>
</span><span class='line'><span class="n">cccccccccccc</span><span class="p">(</span><span class="mh">0x7ffeeedbf650</span><span class="p">,</span> <span class="mi">16564608384425460261</span><span class="p">)</span>
</span><span class='line'><span class="n">bb</span><span class="p">(</span><span class="mh">0x7ffeeedbf678</span><span class="p">,</span> <span class="mi">5964435063914947271</span><span class="p">)</span>
</span><span class='line'><span class="n">aaaaa</span><span class="p">(</span><span class="mh">0x7ffeeedbf690</span><span class="p">,</span> <span class="mi">696214236533423747</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="p">.</span><span class="o">/</span><span class="n">demo</span>
</span><span class='line'><span class="n">bb</span><span class="p">(</span><span class="mh">0x7ffee3cd6678</span><span class="p">,</span> <span class="mi">2875564916106665130</span><span class="p">)</span>
</span><span class='line'><span class="n">cccccccccccc</span><span class="p">(</span><span class="mh">0x7ffee3cd6650</span><span class="p">,</span> <span class="mi">14656991250807877473</span><span class="p">)</span>
</span><span class='line'><span class="n">aaaaa</span><span class="p">(</span><span class="mh">0x7ffee3cd6690</span><span class="p">,</span> <span class="mi">10500981134548248633</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we can see, the address of variable a, b and c keeps changing for each run, which affects their positions in the hash set and, as a result, we will iterate them in different orders.</p>

<p>Lets try to <a href="https://stackoverflow.com/questions/23897963/documented-way-to-disable-aslr-on-os-x">disable</a> ASLR and verify that the nondeterminism is gone:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="o">&gt;</span> <span class="n">clang</span><span class="o">++</span> <span class="n">demo</span><span class="p">.</span><span class="n">cc</span> <span class="o">-</span><span class="n">o</span> <span class="n">demo</span> <span class="o">-</span><span class="n">std</span><span class="o">=</span><span class="n">c</span><span class="o">++</span><span class="mi">11</span> <span class="o">-</span><span class="n">Wl</span><span class="p">,</span><span class="o">-</span><span class="n">no_pie</span>
</span><span class='line'><span class="o">&gt;</span> <span class="p">.</span><span class="o">/</span><span class="n">demo</span>
</span><span class='line'><span class="n">bb</span><span class="p">(</span><span class="mh">0x7ffeefbff678</span><span class="p">,</span> <span class="mi">6189850235780456993</span><span class="p">)</span>
</span><span class='line'><span class="n">cccccccccccc</span><span class="p">(</span><span class="mh">0x7ffeefbff650</span><span class="p">,</span> <span class="mi">14250952053958696967</span><span class="p">)</span>
</span><span class='line'><span class="n">aaaaa</span><span class="p">(</span><span class="mh">0x7ffeefbff690</span><span class="p">,</span> <span class="mi">4593858558987980877</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="p">.</span><span class="o">/</span><span class="n">demo</span>
</span><span class='line'><span class="n">bb</span><span class="p">(</span><span class="mh">0x7ffeefbff678</span><span class="p">,</span> <span class="mi">6189850235780456993</span><span class="p">)</span>
</span><span class='line'><span class="n">cccccccccccc</span><span class="p">(</span><span class="mh">0x7ffeefbff650</span><span class="p">,</span> <span class="mi">14250952053958696967</span><span class="p">)</span>
</span><span class='line'><span class="n">aaaaa</span><span class="p">(</span><span class="mh">0x7ffeefbff690</span><span class="p">,</span> <span class="mi">4593858558987980877</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since the nondeterminism is generally undesired, clang has a <a href="https://clang.llvm.org/docs/analyzer/checkers.html#alpha-nondeterminism-pointeriteration-c">checker</a> to detect such usages.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JIT in Action]]></title>
    <link href="http://blog.jjyao.me/blog/2021/01/16/jit-in-action/"/>
    <updated>2021-01-16T22:23:27-08:00</updated>
    <id>http://blog.jjyao.me/blog/2021/01/16/jit-in-action</id>
    <content type="html"><![CDATA[<p><a href="https://en.wikipedia.org/wiki/Just-in-time_compilation">JIT</a> is a way of executing computer code that involves compilation during execution of a program at <strong>runtime</strong>. This post shows how to execute <a href="https://en.wikipedia.org/wiki/Brainfuck">Brainfuck</a> programs using JIT in various ways.</p>

<ol>
<li><a href="#interpreter">Interpreter</a></li>
<li><a href="#transpilation">Transpilation</a></li>
<li><a href="#llvm">LLVM</a></li>
<li><a href="#dynasm">DynASM</a></li>
</ol>


<!-- more -->


<h2><a id="interpreter"></a>Interpreter</h2>

<p>Before showing how to use JIT to run a Brainfuck program, lets see how it can be run by an interpreter.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;streambuf&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BrainfuckInterpreter</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">BrainfuckInterpreter</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">program</span><span class="p">)</span>
</span><span class='line'>      <span class="o">:</span> <span class="n">program</span><span class="p">(</span><span class="n">program</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="n">run</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">program</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">BrainfuckInterpreter</span><span class="o">::</span><span class="n">run</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">data</span><span class="p">[</span><span class="mi">30000</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'>  <span class="kt">char</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">size_t</span><span class="o">&gt;</span> <span class="n">stack</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">skips</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">program</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span><span class="p">(</span><span class="n">program</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">skips</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="o">++</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">skips</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="o">--</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;+&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">skips</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="o">++*</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;-&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">skips</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="o">--*</span><span class="n">ptr</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;.&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">skips</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">putchar</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;,&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">skips</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">(</span><span class="n">getchar</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;[&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">stack</span><span class="p">.</span><span class="n">emplace_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!*</span><span class="n">ptr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="o">++</span><span class="n">skips</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;]&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">ptr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">i</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">stack</span><span class="p">.</span><span class="n">end</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">stack</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">skips</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="o">--</span><span class="n">skips</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">ifstream</span> <span class="n">ifs</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">program</span><span class="p">((</span><span class="n">std</span><span class="o">::</span><span class="n">istreambuf_iterator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">(</span><span class="n">ifs</span><span class="p">)),</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">istreambuf_iterator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">()));</span>
</span><span class='line'>  <span class="n">BrainfuckInterpreter</span> <span class="nf">interpreter</span><span class="p">(</span><span class="n">program</span><span class="p">);</span>
</span><span class='line'>  <span class="n">interpreter</span><span class="p">.</span><span class="n">run</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">g</span><span class="o">++</span> <span class="o">-</span><span class="n">std</span><span class="o">=</span><span class="n">c</span><span class="o">++</span><span class="mi">11</span> <span class="o">-</span><span class="n">o</span> <span class="n">brainfuck</span> <span class="n">brainfuck</span><span class="p">.</span><span class="n">cc</span>
</span><span class='line'>
</span><span class='line'><span class="p">.</span><span class="o">/</span><span class="n">brainfuck</span> <span class="n">program</span><span class="p">.</span><span class="n">bf</span>
</span></code></pre></td></tr></table></div></figure>


<p>For a complicated Brainfuck program like <a href="https://www.google.com/search?q=mandelbrot.bf">mandelbrot.bf</a>, running in an interpreter will be slow.</p>

<h2><a id="transpilation"></a>Transpilation</h2>

<p>One way to generate and run native code for a Brainfuck program is transpilaiton. The first step is generating the equivalent C/C++ code for the Brainfuck program and then using a conventional compiler to generate a shared object. The second step is using <code>dlopen()</code> to load the shared object and run it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;dlfcn.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;streambuf&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BrainfuckTranspiler</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">BrainfuckTranspiler</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">program</span><span class="p">)</span>
</span><span class='line'>      <span class="o">:</span> <span class="n">program</span><span class="p">(</span><span class="n">program</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="n">run</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">program</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">BrainfuckTranspiler</span><span class="o">::</span><span class="n">run</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">ccname</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">tmpnam</span><span class="p">(</span><span class="k">nullptr</span><span class="p">);</span>
</span><span class='line'>  <span class="n">ccname</span> <span class="o">+=</span> <span class="s">&quot;.cc&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">ofstream</span> <span class="n">ofs</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ofs</span><span class="p">.</span><span class="n">open</span><span class="p">(</span><span class="n">ccname</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="n">R</span><span class="s">&quot;(</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="kt">void</span> <span class="n">_run</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">data</span><span class="p">[</span><span class="mi">30000</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'>  <span class="kt">char</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>  <span class="p">)</span><span class="s">&quot;;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">program</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span><span class="p">(</span><span class="n">program</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;++ptr;&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;--ptr;&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;+&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;++*ptr;&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;-&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;--*ptr;&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;.&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;putchar(static_cast&lt;int&gt;(*ptr));&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;,&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;*ptr = static_cast&lt;char&gt;(getchar());&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;[&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;while (*ptr) {&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;]&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;}&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;}&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ofs</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">soname</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">tmpnam</span><span class="p">(</span><span class="k">nullptr</span><span class="p">);</span>
</span><span class='line'>  <span class="n">soname</span> <span class="o">+=</span> <span class="s">&quot;.so&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">compile</span> <span class="o">=</span> <span class="s">&quot;g++ &quot;</span> <span class="o">+</span> <span class="n">ccname</span> <span class="o">+</span> <span class="s">&quot; -o &quot;</span> <span class="o">+</span> <span class="n">soname</span> <span class="o">+</span> <span class="s">&quot; -shared -fPIC&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">system</span><span class="p">(</span><span class="n">compile</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span><span class="o">*</span> <span class="n">handle</span> <span class="o">=</span> <span class="n">dlopen</span><span class="p">(</span><span class="n">soname</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="n">RTLD_NOW</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">handle</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">dlerror</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">dlerror</span><span class="p">();</span>
</span><span class='line'>  <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">_run</span><span class="p">)();</span>
</span><span class='line'>  <span class="n">_run</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)())</span> <span class="n">dlsym</span><span class="p">(</span><span class="n">handle</span><span class="p">,</span> <span class="s">&quot;_run&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">char</span><span class="o">*</span> <span class="n">error</span> <span class="o">=</span> <span class="n">dlerror</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">error</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="p">(</span><span class="o">*</span><span class="n">_run</span><span class="p">)();</span>
</span><span class='line'>  <span class="n">dlclose</span><span class="p">(</span><span class="n">handle</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">remove</span><span class="p">(</span><span class="n">ccname</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>  <span class="n">remove</span><span class="p">(</span><span class="n">soname</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">ifstream</span> <span class="n">ifs</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">program</span><span class="p">((</span><span class="n">std</span><span class="o">::</span><span class="n">istreambuf_iterator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">(</span><span class="n">ifs</span><span class="p">)),</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">istreambuf_iterator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">()));</span>
</span><span class='line'>  <span class="n">BrainfuckTranspiler</span> <span class="nf">transpiler</span><span class="p">(</span><span class="n">program</span><span class="p">);</span>
</span><span class='line'>  <span class="n">transpiler</span><span class="p">.</span><span class="n">run</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">g</span><span class="o">++</span> <span class="o">-</span><span class="n">std</span><span class="o">=</span><span class="n">c</span><span class="o">++</span><span class="mi">11</span> <span class="o">-</span><span class="n">ldl</span> <span class="o">-</span><span class="n">o</span> <span class="n">brainfuck</span> <span class="n">brainfuck</span><span class="p">.</span><span class="n">cc</span>
</span><span class='line'>
</span><span class='line'><span class="p">.</span><span class="o">/</span><span class="n">brainfuck</span> <span class="n">program</span><span class="p">.</span><span class="n">bf</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a id="llvm"></a>LLVM</h2>

<p>Besides using an external compiler process to generate the native code, we can also use LLVM mcjit by first generating the equivalent LLVM IR for the Brainfuck program. We can generate the IR manually or using clang frontend. Here I&rsquo;m using clang to generate the IR but LLVM has an <a href="https://github.com/llvm/llvm-project/tree/main/llvm/examples/BrainF">example</a> of manually generating it. The LLVM version I&rsquo;m using is 7.0.1.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;streambuf&gt;</span>
</span><span class='line'><span class="cp">#include &lt;clang/Driver/Compilation.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;clang/Driver/Driver.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;clang/CodeGen/CodeGenAction.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;clang/Frontend/FrontendOptions.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;clang/Frontend/CompilerInstance.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;clang/Frontend/CompilerInvocation.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;clang/Frontend/TextDiagnosticPrinter.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;llvm/IR/Module.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;llvm/ADT/StringRef.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;llvm/IR/LLVMContext.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;llvm/Support/Host.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;llvm/Support/TargetSelect.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;llvm/ExecutionEngine/ExecutionEngine.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;llvm/ExecutionEngine/GenericValue.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BrainfuckLLVM</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span><span class="o">:</span>
</span><span class='line'>    <span class="n">BrainfuckLLVM</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">program</span><span class="p">,</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">clangexe</span><span class="p">)</span>
</span><span class='line'>      <span class="o">:</span> <span class="n">program</span><span class="p">(</span><span class="n">program</span><span class="p">),</span> <span class="n">clangexe</span><span class="p">(</span><span class="n">clangexe</span><span class="p">)</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">void</span> <span class="n">run</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">private</span><span class="o">:</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">program</span><span class="p">;</span>
</span><span class='line'>    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">clangexe</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">BrainfuckLLVM</span><span class="o">::</span><span class="n">run</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">ccname</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">tmpnam</span><span class="p">(</span><span class="k">nullptr</span><span class="p">);</span>
</span><span class='line'>  <span class="n">ccname</span> <span class="o">+=</span> <span class="s">&quot;.cc&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">ofstream</span> <span class="n">ofs</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ofs</span><span class="p">.</span><span class="n">open</span><span class="p">(</span><span class="n">ccname</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="n">R</span><span class="s">&quot;(</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="kt">void</span> <span class="n">_run</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">data</span><span class="p">[</span><span class="mi">30000</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'>  <span class="kt">char</span><span class="o">*</span> <span class="n">ptr</span> <span class="o">=</span> <span class="n">data</span><span class="p">;</span>
</span><span class='line'>  <span class="p">)</span><span class="s">&quot;;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">program</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">switch</span><span class="p">(</span><span class="n">program</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;++ptr;&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;--ptr;&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;+&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;++*ptr;&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;-&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;--*ptr;&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;.&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;putchar(static_cast&lt;int&gt;(*ptr));&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;,&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;*ptr = static_cast&lt;char&gt;(getchar());&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;[&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;while (*ptr) {&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="k">case</span> <span class="sc">&#39;]&#39;</span><span class="o">:</span>
</span><span class='line'>        <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;}&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">ofs</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;}&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ofs</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Generate LLVM IR using clang frontend</span>
</span><span class='line'>  <span class="n">clang</span><span class="o">::</span><span class="n">IntrusiveRefCntPtr</span><span class="o">&lt;</span><span class="n">clang</span><span class="o">::</span><span class="n">DiagnosticOptions</span><span class="o">&gt;</span> <span class="n">dopts</span> <span class="o">=</span> <span class="k">new</span> <span class="n">clang</span><span class="o">::</span><span class="n">DiagnosticOptions</span><span class="p">();</span>
</span><span class='line'>  <span class="n">clang</span><span class="o">::</span><span class="n">TextDiagnosticPrinter</span><span class="o">*</span> <span class="n">tdp</span> <span class="o">=</span> <span class="k">new</span> <span class="n">clang</span><span class="o">::</span><span class="n">TextDiagnosticPrinter</span><span class="p">(</span><span class="n">llvm</span><span class="o">::</span><span class="n">errs</span><span class="p">(),</span> <span class="o">&amp;*</span><span class="n">dopts</span><span class="p">);</span>
</span><span class='line'>  <span class="n">clang</span><span class="o">::</span><span class="n">IntrusiveRefCntPtr</span><span class="o">&lt;</span><span class="n">clang</span><span class="o">::</span><span class="n">DiagnosticIDs</span><span class="o">&gt;</span> <span class="n">dids</span><span class="p">(</span><span class="k">new</span> <span class="n">clang</span><span class="o">::</span><span class="n">DiagnosticIDs</span><span class="p">());</span>
</span><span class='line'>  <span class="n">clang</span><span class="o">::</span><span class="n">DiagnosticsEngine</span> <span class="n">dengine</span><span class="p">(</span><span class="n">dids</span><span class="p">,</span> <span class="o">&amp;*</span><span class="n">dopts</span><span class="p">,</span> <span class="n">tdp</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">llvm</span><span class="o">::</span><span class="n">Triple</span> <span class="n">triple</span><span class="p">(</span><span class="n">llvm</span><span class="o">::</span><span class="n">sys</span><span class="o">::</span><span class="n">getProcessTriple</span><span class="p">());</span>
</span><span class='line'>  <span class="n">clang</span><span class="o">::</span><span class="n">driver</span><span class="o">::</span><span class="n">Driver</span> <span class="n">driver</span><span class="p">(</span><span class="n">clangexe</span><span class="p">,</span> <span class="n">triple</span><span class="p">.</span><span class="n">str</span><span class="p">(),</span> <span class="n">dengine</span><span class="p">);</span>
</span><span class='line'>  <span class="n">driver</span><span class="p">.</span><span class="n">setTitle</span><span class="p">(</span><span class="s">&quot;clang&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">driver</span><span class="p">.</span><span class="n">setCheckInputsExist</span><span class="p">(</span><span class="nb">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">llvm</span><span class="o">::</span><span class="n">SmallVector</span><span class="o">&lt;</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span><span class="p">,</span> <span class="mi">16</span><span class="o">&gt;</span> <span class="n">args</span><span class="p">;</span>
</span><span class='line'>  <span class="n">args</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="s">&quot;clang&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">args</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">ccname</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'>  <span class="n">args</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="s">&quot;-fsyntax-only&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">clang</span><span class="o">::</span><span class="n">driver</span><span class="o">::</span><span class="n">Compilation</span><span class="o">&gt;</span> <span class="n">compilation</span><span class="p">(</span><span class="n">driver</span><span class="p">.</span><span class="n">BuildCompilation</span><span class="p">(</span><span class="n">args</span><span class="p">));</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">clang</span><span class="o">::</span><span class="n">driver</span><span class="o">::</span><span class="n">JobList</span><span class="o">&amp;</span> <span class="n">jobs</span> <span class="o">=</span> <span class="n">compilation</span><span class="o">-&gt;</span><span class="n">getJobs</span><span class="p">();</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">clang</span><span class="o">::</span><span class="n">driver</span><span class="o">::</span><span class="n">Command</span><span class="o">&amp;</span> <span class="n">command</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">clang</span><span class="o">::</span><span class="n">driver</span><span class="o">::</span><span class="n">Command</span><span class="o">&gt;</span><span class="p">(</span><span class="o">*</span><span class="n">jobs</span><span class="p">.</span><span class="n">begin</span><span class="p">());</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">clang</span><span class="o">::</span><span class="n">driver</span><span class="o">::</span><span class="n">ArgStringList</span><span class="o">&amp;</span> <span class="n">ccargs</span> <span class="o">=</span> <span class="n">command</span><span class="p">.</span><span class="n">getArguments</span><span class="p">();</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">clang</span><span class="o">::</span><span class="n">CompilerInvocation</span><span class="o">&gt;</span> <span class="n">cinvocation</span><span class="p">(</span><span class="k">new</span> <span class="n">clang</span><span class="o">::</span><span class="n">CompilerInvocation</span><span class="p">());</span>
</span><span class='line'>  <span class="n">clang</span><span class="o">::</span><span class="n">CompilerInvocation</span><span class="o">::</span><span class="n">CreateFromArgs</span><span class="p">(</span><span class="o">*</span><span class="n">cinvocation</span><span class="p">,</span> <span class="k">const_cast</span><span class="o">&lt;</span><span class="k">const</span> <span class="kt">char</span><span class="o">**&gt;</span><span class="p">(</span><span class="n">ccargs</span><span class="p">.</span><span class="n">data</span><span class="p">()),</span>
</span><span class='line'>      <span class="k">const_cast</span><span class="o">&lt;</span><span class="k">const</span> <span class="kt">char</span><span class="o">**&gt;</span><span class="p">(</span><span class="n">ccargs</span><span class="p">.</span><span class="n">data</span><span class="p">())</span> <span class="o">+</span> <span class="n">ccargs</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="n">dengine</span><span class="p">);</span>
</span><span class='line'>  <span class="n">clang</span><span class="o">::</span><span class="n">CompilerInstance</span> <span class="n">cinstance</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cinstance</span><span class="p">.</span><span class="n">setInvocation</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">cinvocation</span><span class="p">));</span>
</span><span class='line'>  <span class="n">cinstance</span><span class="p">.</span><span class="n">createDiagnostics</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">llvm</span><span class="o">::</span><span class="n">LLVMContext</span> <span class="n">context</span><span class="p">;</span>
</span><span class='line'>  <span class="n">clang</span><span class="o">::</span><span class="n">EmitLLVMOnlyAction</span> <span class="n">action</span><span class="p">(</span><span class="o">&amp;</span><span class="n">context</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cinstance</span><span class="p">.</span><span class="n">ExecuteAction</span><span class="p">(</span><span class="n">action</span><span class="p">);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">unique_ptr</span><span class="o">&lt;</span><span class="n">llvm</span><span class="o">::</span><span class="n">Module</span><span class="o">&gt;</span> <span class="n">module</span> <span class="o">=</span> <span class="n">action</span><span class="p">.</span><span class="n">takeModule</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Use mcjit to generate the native code from IR and run it</span>
</span><span class='line'>  <span class="n">llvm</span><span class="o">::</span><span class="n">InitializeNativeTarget</span><span class="p">();</span>
</span><span class='line'>  <span class="n">llvm</span><span class="o">::</span><span class="n">InitializeNativeTargetAsmPrinter</span><span class="p">();</span>
</span><span class='line'>  <span class="n">llvm</span><span class="o">::</span><span class="n">Function</span><span class="o">*</span> <span class="n">_run</span> <span class="o">=</span> <span class="n">module</span><span class="o">-&gt;</span><span class="n">getFunction</span><span class="p">(</span><span class="s">&quot;_run&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">llvm</span><span class="o">::</span><span class="n">ExecutionEngine</span><span class="o">*</span> <span class="n">ee</span> <span class="o">=</span> <span class="n">llvm</span><span class="o">::</span><span class="n">EngineBuilder</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">module</span><span class="p">)).</span><span class="n">create</span><span class="p">();</span>
</span><span class='line'>  <span class="n">llvm</span><span class="o">::</span><span class="n">GenericValue</span> <span class="n">gv</span> <span class="o">=</span> <span class="n">ee</span><span class="o">-&gt;</span><span class="n">runFunction</span><span class="p">(</span><span class="n">_run</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">llvm</span><span class="o">::</span><span class="n">GenericValue</span><span class="o">&gt;</span><span class="p">());</span>
</span><span class='line'>  <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">remove</span><span class="p">(</span><span class="n">ccname</span><span class="p">.</span><span class="n">c_str</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">ifstream</span> <span class="n">ifs</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">program</span><span class="p">((</span><span class="n">std</span><span class="o">::</span><span class="n">istreambuf_iterator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">(</span><span class="n">ifs</span><span class="p">)),</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">istreambuf_iterator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">()));</span>
</span><span class='line'>  <span class="n">BrainfuckLLVM</span> <span class="nf">llvm</span><span class="p">(</span><span class="n">program</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">llvm</span><span class="p">.</span><span class="n">run</span><span class="p">();</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">g</span><span class="o">++</span> <span class="o">-</span><span class="n">std</span><span class="o">=</span><span class="n">c</span><span class="o">++</span><span class="mi">11</span> <span class="err">`</span><span class="o">/</span><span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">llvm</span><span class="o">-</span><span class="n">config</span> <span class="o">--</span><span class="n">cxxflags</span> <span class="o">--</span><span class="n">ldflags</span><span class="err">`</span> <span class="o">-</span><span class="n">lclangASTMatchers</span> <span class="o">-</span><span class="n">lclangFrontendTool</span> <span class="o">-</span><span class="n">lclangFrontend</span> <span class="o">-</span><span class="n">lclangDriver</span> <span class="o">-</span><span class="n">lclangSerialization</span> <span class="o">-</span><span class="n">lclangCodeGen</span> <span class="o">-</span><span class="n">lclangParse</span> <span class="o">-</span><span class="n">lclangSema</span> <span class="o">-</span><span class="n">lclangToolingInclusions</span> <span class="o">-</span><span class="n">lclangToolingCore</span>  <span class="o">-</span><span class="n">lclangFormat</span> <span class="o">-</span><span class="n">lclangIndex</span> <span class="o">-</span><span class="n">lclangCrossTU</span> <span class="o">-</span><span class="n">lclangStaticAnalyzerFrontend</span> <span class="o">-</span><span class="n">lclangStaticAnalyzerCheckers</span> <span class="o">-</span><span class="n">lclangStaticAnalyzerCore</span> <span class="o">-</span><span class="n">lclangAnalysis</span> <span class="o">-</span><span class="n">lclangARCMigrate</span> <span class="o">-</span><span class="n">lclangRewriteFrontend</span> <span class="o">-</span><span class="n">lclangRewrite</span> <span class="o">-</span><span class="n">lclangEdit</span> <span class="o">-</span><span class="n">lclangAST</span> <span class="o">-</span><span class="n">lclangLex</span> <span class="o">-</span><span class="n">lclangBasic</span> <span class="err">`</span><span class="o">/</span><span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">llvm</span><span class="o">-</span><span class="n">config</span> <span class="o">--</span><span class="n">libs</span><span class="err">`</span> <span class="o">-</span><span class="n">o</span> <span class="n">brainfuck</span> <span class="n">brainfuck</span><span class="p">.</span><span class="n">cc</span>
</span><span class='line'>
</span><span class='line'><span class="p">.</span><span class="o">/</span><span class="n">brainfuck</span> <span class="n">program</span><span class="p">.</span><span class="n">bf</span> <span class="o">/</span><span class="n">path</span><span class="o">/</span><span class="n">to</span><span class="o">/</span><span class="n">clang</span>
</span></code></pre></td></tr></table></div></figure>


<h2><a id="dynasm"></a>DynASM</h2>

<p>Another way of generating the native code is using <a href="https://luajit.org/dynasm.html">DynASM</a> from LuaJIT and there is an <a href="https://corsix.github.io/dynasm-doc/tutorial.html">example</a> online.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Good Economics for Hard Times]]></title>
    <link href="http://blog.jjyao.me/blog/2020/12/20/good-economics-for-hard-times/"/>
    <updated>2020-12-20T14:04:45-08:00</updated>
    <id>http://blog.jjyao.me/blog/2020/12/20/good-economics-for-hard-times</id>
    <content type="html"><![CDATA[<p>2020，世界很复杂。贸易战，美国大选，全球气候变暖，贫富差距扩大化等热点问题影响着我们每一个人。如果你也对这些问题感兴趣，我推荐你阅读《Good Economics for Hard Times》。这本书可能会带给你一些不同的角度来看待这些问题，有些甚至可能完全颠覆你以往的认知。以下是我的读书笔记：</p>

<ol>
<li><a href="#immigration">移民</a></li>
<li><a href="#globalization">全球化</a></li>
<li><a href="#prejudice">偏见</a></li>
<li><a href="#growth">经济增长</a></li>
<li><a href="#climate">气候变暖</a></li>
<li><a href="#inequality">贫富差距</a></li>
</ol>


<!-- more -->


<h2><a id="immigration"></a>移民</h2>

<p>这本书分析了两类移民对当地人的影响，分别是低技能移民（low-skilled immigrants）和高技能移民（high-skilled immigrants）。</p>

<p>很多人认为低技能的移民会伤害到低技能的当地人的利益：工资会降低，工作机会会被抢走。<strong><em>然而研究表明低技能的移民并不会降低当地人的工资和就业率</em></strong>。移民增加了劳动力的供应的同时也增加了劳动力的需求 （One very big problem with the supply-demand analysis applied to immigration is that an influx of migrants increases the demand for labor at the same time it increases the supply of laborers.）。一个原因是低技能的移民会在当地生活消费，从而产生了新的需求，因而创造出更多的工作岗位。比如移民的增加，使得管理者需求增加而本地人因为语言等的优势更容易获得这些岗位。另一个原因是廉价的移民劳动力会延缓机器化自动化的发生。另外低技能移民很多做的都是当地人不想干的活，因此并没有真正从当地人手中抢走任何工作。同时作者认为当地人并不一定会在和移民的竞争中落入下风。相对于一个新来的陌生移民，当地人有着自身的优势，比如语言的优势，老板知根知底的优势。</p>

<p>对于高技能移民，作者认为对当地人的影响是两面的。好的方面是高技能移民能提供廉价的高技能服务比如看病，而这可以使当地的低收入人群受益。不好的方面是当地拥有同等技能的人会面临着更激烈的竞争。</p>

<h2><a id="globalization"></a>全球化</h2>

<p>全球化和自由贸易可以使得每个国家做自己拥有比较优势（comparative advantage）的活，以此提高生产效率（productivity）。这个世界作为一个整体因此受益，而收益的再分配可以让每个人享受到全球化的成果。而为了达到效率的最大化，资源（比如资本和劳动力）需要能够自由流通到需要它们的地方。然而本书却提出了资源往往具有粘性（resources tend to be sticky）的观点，也就是说资源往往到不了最需要它们的地方。比如出于不确定性，人们更愿意留在家乡而不是到更需要劳动力的城市和国家。</p>

<p>同时作者分析了全球化和自由贸易对于发达国家和发展中国家的影响。发达国家的优势是资本而发展中国家的优势是廉价劳动力，因此全球化会使发达国家的资本家受益而发展中国家的工人受益。另一方面，发达国家资本家受益的同时，它们的工人会在和发展中国家廉价劳动力竞争中受损（Workers were likely to suffer from trade in rich countries and benefit from it in poor countries.）。为了帮助受影响的发达国家工人，国家需要进行收入再分配和各类政策扶持。而贸易战却不是解决这个问题的方法之一，它帮助了某些人的同时也会伤害到另外一些人（While trade war may save some jobs in steal, it would likely cause significant new damage to others. The US economy will be fine. Hundreds of thousands of people will not.）。</p>

<h2><a id="prejudice"></a>偏见</h2>

<p>本书提到了现在社会充满了对立，分裂和偏见的现象（比如民主党vs共和党，白人vs黑人）。作者认为现在的社交网络非但没有缓解这些现象，反而作为一个回声室（echo chamber），恶化了它们。作者还认为人们的对立和偏见背后有着深层次的原因（比如对世界的不满，感到没有被世界尊重）。打击偏见的方法不应该是直接和他们就此争论或者表现出对他们的鄙视，这样做只会加深偏见（Preferences like prejudice are as much part of the symptoms of the malaise as its cause, perhaps more. Prejudice is often a defensive reaction to the many things we feel are going wrong in the world, our economic travails, and a sense that we are no longer respected or valued.）。为了缓解这些现象，作者认为一个有效的方式是多接触，多互相了解。而学校在这一方面扮演了非常重要的角色。不同背景的年轻人生活学习在一起，可以消除偏见达到互信（Familiarity performed its magic.）。而这也是像哈佛这样培养未来领导人的学校需要招收各个族群学生的一个原因，过多的偏向某一个族群会产生不好的影响（As a flagship producer of the next generation of leaders, Harvard clearly needs to find a place for students from all social groups, and a massive overrepresentation of any particular social group relative to its weight in the population is both perhaps undesirable in a democracy and likely to lead to political problems.）。</p>

<h2><a id="growth"></a>经济增长</h2>

<p>本书的一个重要观点是<strong><em>人们目前还不知道持久经济增长的内在机制是什么</em></strong>，包括如何恢复增长和保持增长（Despite the best efforts of generations of economists, the deep mechanisms of persistent economic growth remain elusive.）。与此相关的是给富人减税并不会促进经济的增长（Tax cuts for the wealthy do not produce economic growth.）。另一方面，尽管无法带来持续的经济增长，但提高资源利用率，减少资源的错误分配还是能让贫穷国家获得一定的增长，而这需要克服之前提到的资源粘性问题。最后虽然没人知道如何持续不断的增长经济，但所有国家都能致力于改善国民的福祉，即使它们不能被反映在GDP上（GDP values only those things priced and marketed.）。</p>

<h2><a id="climate"></a>气候变暖</h2>

<p>气候变暖是个全球性的问题，然而它却非常不公平。很大一部分的碳排放都是发达国家导致的（直接排放或者消费发展中国家生产的商品），然而全球变暖的大部分代价却是由发展中国家来承受。因此作者认为发达国家需要为气候变暖承担很大一部分责任。作者还认为人们的消费习惯是可以被改变的，可以变得更低碳更环保。通过税的引导，政府可以慢慢改变人们不环保的消费习惯。</p>

<h2><a id="inequality"></a>贫富差距</h2>

<p>日益扩大的贫富差距也是本书的一个重点讨论议题。作者认为美国这几十年的贫富差距是人为的政策导致的而不是不可控的技术革新（The last thirty years of US history should convince us that the evolution of inequality is not the by-product of technological changes we do not control: it is the result of policy decisions.）。</p>

<p>首先作者认为先富带动后富并没有真正在美国发生，相反富人的财富得到了极大的增长，而穷人的工资涨幅却没有跟上GDP的涨幅，结果就是社会的财富越来越集中到少数富人手中。其中一个重要原因是富人的低税收。低税收使得高工资对CEO们更有吸引力（因为大部分工资都会变成税后工资）而公司之间对优秀CEO的争夺也相应拉高了工资。另外现在CEO主要的收入来自股票而不是基本工资，这也就使得他们对涨工资动力不大，反而会想要降低工资来削减成本从而提升股价（Linking managerial pay to the stock market meant that manager’s pay was no longer linked to a salary scale within the enterprise. When everyone was on the same scale, CEOs had to grow salaries at the bottom to increase their own. With stock options, they had no reason to increase wages at the bottom, and in fact every reason to squeeze costs.）。作者提倡对富人收取高额的税收，并且没有证据表明这样做会降低富人的工作积极性（All in all, therefore, it seems to us that high marginal income tax rates, applied only to very high incomes, are a perfectly sensible way to limit the explosion of top income inequality. They would not be extortionary, since very few people will end up paying them; top mangers will simply not get these kinds of income anymore. And from all we see, they won’t discourage anybody to work as hard as they can.）。另外作者也意识到征收富人税会面临极大的困难。一方面富人有足够的资源对政客进行游说，另一方面富人可以将财富转移到低税收国家进行避税，而国家之间对于这些财富的竞争会使得税率变低（This gives rise to a race to the bottom on tax rates.）。归根到底征收富人税并不是一个经济问题，而是个政治问题（The difficulty of raising top tax rates is a political one.）。</p>

<p>在富人越来越富的同时，美国的穷人却遇到了收入停滞和阶级固化的问题。由此他们会产生绝望或愤怒，绝望的人把问题归咎于自身而愤怒的人把问题归咎于别人（The majority of Americans whose wages and income have stagnated, and who confront an ever-widening gap between the wealth they see around them and the financial woes they are experiencing, face a choice between blaming themselves for not benefitting from the opportunities they believe their society offers and finding someone to blame for stealing their jobs. That way lies despair and anger.）。而这两种情绪对个人和社会都没有益处，绝望的人失去了希望而愤怒的人把问题错误地归咎于移民和全球化（Behind the anti-immigrant views, are two misconceptions: an exaggeration of how many migrants are coming in, or about to come in, and a belief in the nonfact that low-skilled immigrants depress wages.）。作者认为政府需要出台政策来帮助那些受全球化和自由贸易影响的人，其中一个方法就是UBI（universal basic income）。不像别的救助项目，UBI没有任何门槛（比如没有复杂的申请和审核流程）因此可以保证最需要帮助的人能够享受到。另外没有证据显示穷人会因此降低工作积极性或者乱花钱（There is no support in the data for the view that the poor just blow the money on desires rather than needs.）。相反地，这些钱能让穷人少了后顾之忧，让他们有更多的精力放在工作之上，让他们更可能离开家乡去寻找更多的工作机会。在有着这些优势的情况下，实施UBI最大的困难就是政府没有足够的钱。</p>

<p>最后作者充满人文关怀地提到对于穷人的帮助需要照顾他们的尊严，要把他们当作人来对待。他们可能有问题，但他们不是问题本身（While they may have problems, they are not the problem. They are entitled to be seen for who they are and to not be defined by the difficulties besieging them.）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Software Engineering Laws]]></title>
    <link href="http://blog.jjyao.me/blog/2020/01/25/software-engineering-laws/"/>
    <updated>2020-01-25T11:23:14-08:00</updated>
    <id>http://blog.jjyao.me/blog/2020/01/25/software-engineering-laws</id>
    <content type="html"><![CDATA[<ol>
<li><a href="#murphy_law">Murphy&rsquo;s law</a></li>
<li><a href="#amdahl_law">Amdahl&rsquo;s law</a></li>
<li><a href="#brooks_law">Brooks&rsquo;s law</a></li>
<li><a href="#hofstadter_law">Hofstadter&rsquo;s law</a></li>
</ol>


<!-- more -->


<h2><a id="murphy_law"></a>Murphy&rsquo;s law</h2>

<p>Anything that can go wrong will go wrong.</p>

<h2><a id="amdahl_law"></a>Amdahl&rsquo;s law</h2>

<p>The performance improvement to be gained by making some part of the execution faster is limited by the fraction of the time that part uses.</p>

<h2><a id="brooks_law"></a>Brooks&rsquo;s law</h2>

<p>Adding manpower to a late software project makes it later.</p>

<h2><a id="hofstadter_law"></a>Hofstadter&rsquo;s law</h2>

<p>It always takes longer than you expect, even when you take into account Hofstadter&rsquo;s Law.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Floating-Point Surprises]]></title>
    <link href="http://blog.jjyao.me/blog/2019/07/03/floating-point-surprises/"/>
    <updated>2019-07-03T15:57:02-07:00</updated>
    <id>http://blog.jjyao.me/blog/2019/07/03/floating-point-surprises</id>
    <content type="html"><![CDATA[<p>The single-precision floating-point or double-precision floating-point has finite precision so <a href="https://en.wikipedia.org/wiki/Loss_of_significance">loss of significance</a> can happen and cause surprises.</p>

<!-- more -->


<p>Let&rsquo;s take float, which has 23 bits mantissa, as an example. <code>198705381</code> as an integer has the binary representation <code>00001011 11011000 00000000 11100101</code>. <code>198705381.0f</code> as a float has the binary representation <code>0 10011010 01111011000000000001110</code>. Here a round-down happens due to the default IEEE 754 rounding mode <code>round to the nearest, ties to even</code> and <code>198705381.0f</code> is rounded down to <code>198705376.0f</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">setprecision</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mf">198705381.0f</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span> <span class="c1">// output is 198705376</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>199698905</code> as an integer has the binary representation <code>00001011 11100111 00101001 11011001</code>. <code>199698905.0f</code> as a float has the binary representation <code>0 10011010 01111100111001010011110</code>. Here a round-up happens and <code>199698905.0f</code> is rounded up to <code>199698912.0f</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">setprecision</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="mf">199698905.0f</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span> <span class="c1">// output is 199698912</span>
</span></code></pre></td></tr></table></div></figure>


<p>Due to the loss of significance, many surprises can happen:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="mf">198705381.0f</span> <span class="o">-</span> <span class="mf">198705380.0f</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>  <span class="c1">// output is 0 since they are both rounded down to the same value</span>
</span><span class='line'>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="mf">198705381.0f</span> <span class="o">*</span> <span class="mf">1.005f</span> <span class="o">-</span> <span class="mf">199698905.0f</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span> <span class="c1">// output is negative (should be positive if we use double instead of float) since one is rounded down and the other is rounded up</span>
</span></code></pre></td></tr></table></div></figure>


<h3>References</h3>

<p>[1] <a href="https://benjaminjurke.com/content/articles/2015/loss-of-significance-in-floating-point-computations">https://benjaminjurke.com/content/articles/2015/loss-of-significance-in-floating-point-computations</a> <br/>
[2] <a href="https://www.h-schmidt.net/FloatConverter/IEEE754.html">https://www.h-schmidt.net/FloatConverter/IEEE754.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interaction Between HugeTLBFS and Hugepages]]></title>
    <link href="http://blog.jjyao.me/blog/2019/04/01/interaction-between-hugetlbfs-and-hugepages/"/>
    <updated>2019-04-01T19:57:31-07:00</updated>
    <id>http://blog.jjyao.me/blog/2019/04/01/interaction-between-hugetlbfs-and-hugepages</id>
    <content type="html"><![CDATA[<p>This post shows the interaction between hugetlbfs and huge pages by an example program. All the results are based on linux 3.10.0-514.55.4.el7.x86_64.</p>

<!-- more -->


<h2>Setup</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mount -t hugetlbfs -o mode=0777,pagesize=2M nodev /mnt/huge
</span><span class='line'>echo '10' | sudo tee /proc/sys/vm/nr_hugepages</span></code></pre></td></tr></table></div></figure>


<p>This creates a hugetlbfs with maximum of 10 huge pages.</p>

<h2>Example Program</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fcntl.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/mman.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define MB (1024*1024)</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">meminfo</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span> <span class="n">msg</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="n">msg</span><span class="p">);</span>
</span><span class='line'>  <span class="n">system</span><span class="p">(</span><span class="s">&quot;cat /proc/meminfo | grep HugePages_&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">meminfo</span><span class="p">(</span><span class="s">&quot;Initial meminfo: </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="s">&quot;/mnt/huge/foo.txt&quot;</span><span class="p">,</span> <span class="n">O_RDWR</span> <span class="o">|</span> <span class="n">O_CREAT</span> <span class="o">|</span> <span class="n">O_TRUNC</span><span class="p">,</span> <span class="n">S_IRUSR</span> <span class="o">|</span> <span class="n">S_IWUSR</span> <span class="o">|</span> <span class="n">S_IRGRP</span> <span class="o">|</span> <span class="n">S_IROTH</span><span class="p">);</span>
</span><span class='line'>  <span class="n">meminfo</span><span class="p">(</span><span class="s">&quot;After create and open the file: </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ftruncate</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">MB</span><span class="p">);</span>
</span><span class='line'>  <span class="n">meminfo</span><span class="p">(</span><span class="s">&quot;After set file size to 4MB: </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span><span class="o">*</span> <span class="n">base</span> <span class="o">=</span> <span class="n">mmap</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">MB</span><span class="p">,</span> <span class="n">PROT_WRITE</span> <span class="o">|</span> <span class="n">PROT_READ</span><span class="p">,</span> <span class="n">MAP_SHARED</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">meminfo</span><span class="p">(</span><span class="s">&quot;After mmap 4MB without MAP_POPULATE: </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">munmap</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">MB</span><span class="p">);</span>
</span><span class='line'>  <span class="n">meminfo</span><span class="p">(</span><span class="s">&quot;After munmap: </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">base</span> <span class="o">=</span> <span class="n">mmap</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">MB</span><span class="p">,</span> <span class="n">PROT_WRITE</span> <span class="o">|</span> <span class="n">PROT_READ</span><span class="p">,</span> <span class="n">MAP_SHARED</span> <span class="o">|</span> <span class="n">MAP_POPULATE</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">meminfo</span><span class="p">(</span><span class="s">&quot;After mmap 4MB with MAP_POPULATE: </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">munmap</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="mi">4</span> <span class="o">*</span> <span class="n">MB</span><span class="p">);</span>
</span><span class='line'>  <span class="n">meminfo</span><span class="p">(</span><span class="s">&quot;After munmap: </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ftruncate</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="mi">8</span> <span class="o">*</span> <span class="n">MB</span><span class="p">);</span>
</span><span class='line'>  <span class="n">meminfo</span><span class="p">(</span><span class="s">&quot;After set file size to 8MB: </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">base</span> <span class="o">=</span> <span class="n">mmap</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="mi">8</span> <span class="o">*</span> <span class="n">MB</span><span class="p">,</span> <span class="n">PROT_WRITE</span> <span class="o">|</span> <span class="n">PROT_READ</span><span class="p">,</span> <span class="n">MAP_SHARED</span> <span class="o">|</span> <span class="n">MAP_POPULATE</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">meminfo</span><span class="p">(</span><span class="s">&quot;After mmap 8MB with MAP_POPULATE: </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">munmap</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="mi">8</span> <span class="o">*</span> <span class="n">MB</span><span class="p">);</span>
</span><span class='line'>  <span class="n">meminfo</span><span class="p">(</span><span class="s">&quot;After munmap: </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span><span class='line'>  <span class="n">meminfo</span><span class="p">(</span><span class="s">&quot;After close: </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The output of running this program is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">Initial</span> <span class="nl">meminfo</span><span class="p">:</span>
</span><span class='line'><span class="nl">HugePages_Total</span><span class="p">:</span>      <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Free</span><span class="p">:</span>       <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Rsvd</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'><span class="nl">HugePages_Surp</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">After</span> <span class="n">creat</span> <span class="n">and</span> <span class="n">open</span> <span class="n">the</span> <span class="nl">file</span><span class="p">:</span>
</span><span class='line'><span class="nl">HugePages_Total</span><span class="p">:</span>      <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Free</span><span class="p">:</span>       <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Rsvd</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'><span class="nl">HugePages_Surp</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">After</span> <span class="n">set</span> <span class="n">file</span> <span class="n">size</span> <span class="n">to</span> <span class="mi">4</span><span class="nl">MB</span><span class="p">:</span>
</span><span class='line'><span class="nl">HugePages_Total</span><span class="p">:</span>      <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Free</span><span class="p">:</span>       <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Rsvd</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'><span class="nl">HugePages_Surp</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">After</span> <span class="n">mmap</span> <span class="mi">4</span><span class="n">MB</span> <span class="n">without</span> <span class="nl">MAP_POPULATE</span><span class="p">:</span>
</span><span class='line'><span class="nl">HugePages_Total</span><span class="p">:</span>      <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Free</span><span class="p">:</span>       <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Rsvd</span><span class="p">:</span>        <span class="mi">2</span>
</span><span class='line'><span class="nl">HugePages_Surp</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">After</span> <span class="nl">munmap</span><span class="p">:</span>
</span><span class='line'><span class="nl">HugePages_Total</span><span class="p">:</span>      <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Free</span><span class="p">:</span>       <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Rsvd</span><span class="p">:</span>        <span class="mi">2</span>
</span><span class='line'><span class="nl">HugePages_Surp</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">After</span> <span class="n">mmap</span> <span class="mi">4</span><span class="n">MB</span> <span class="n">with</span> <span class="nl">MAP_POPULATE</span><span class="p">:</span>
</span><span class='line'><span class="nl">HugePages_Total</span><span class="p">:</span>      <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Free</span><span class="p">:</span>        <span class="mi">8</span>
</span><span class='line'><span class="nl">HugePages_Rsvd</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'><span class="nl">HugePages_Surp</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">After</span> <span class="nl">munmap</span><span class="p">:</span>
</span><span class='line'><span class="nl">HugePages_Total</span><span class="p">:</span>      <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Free</span><span class="p">:</span>        <span class="mi">8</span>
</span><span class='line'><span class="nl">HugePages_Rsvd</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'><span class="nl">HugePages_Surp</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">After</span> <span class="n">set</span> <span class="n">file</span> <span class="n">size</span> <span class="n">to</span> <span class="mi">8</span><span class="nl">MB</span><span class="p">:</span>
</span><span class='line'><span class="nl">HugePages_Total</span><span class="p">:</span>      <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Free</span><span class="p">:</span>        <span class="mi">8</span>
</span><span class='line'><span class="nl">HugePages_Rsvd</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'><span class="nl">HugePages_Surp</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">After</span> <span class="n">mmap</span> <span class="mi">8</span><span class="n">MB</span> <span class="n">with</span> <span class="nl">MAP_POPULATE</span><span class="p">:</span>
</span><span class='line'><span class="nl">HugePages_Total</span><span class="p">:</span>      <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Free</span><span class="p">:</span>        <span class="mi">6</span>
</span><span class='line'><span class="nl">HugePages_Rsvd</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'><span class="nl">HugePages_Surp</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">After</span> <span class="nl">munmap</span><span class="p">:</span>
</span><span class='line'><span class="nl">HugePages_Total</span><span class="p">:</span>      <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Free</span><span class="p">:</span>        <span class="mi">6</span>
</span><span class='line'><span class="nl">HugePages_Rsvd</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'><span class="nl">HugePages_Surp</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">After</span> <span class="nl">close</span><span class="p">:</span>
</span><span class='line'><span class="nl">HugePages_Total</span><span class="p">:</span>      <span class="mi">10</span>
</span><span class='line'><span class="nl">HugePages_Free</span><span class="p">:</span>        <span class="mi">6</span>
</span><span class='line'><span class="nl">HugePages_Rsvd</span><span class="p">:</span>        <span class="mi">0</span>
</span><span class='line'><span class="nl">HugePages_Surp</span><span class="p">:</span>        <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Observations</h2>

<ol>
<li>Just setting the file size won&rsquo;t allocate/reserve any huge pages. It only affects the logical file size not the physical one.</li>
<li><code>mmap</code> only reserves the huge pages.</li>
<li>Populating the page table or accessing a page actually allocates the huge pages.</li>
<li><code>HugePages_Free</code> includes <code>HugePages_Rsvd</code> so the number of free-to-use huge pages is actually <code>HugePages_Free</code> minus <code>HugePages_Rsvd</code>.</li>
</ol>


<h2>Reference</h2>

<ol>
<li><a href="http://www.lenky.info/archives/2012/03/1219">Linux下hugetlbpage使用详解</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux PID]]></title>
    <link href="http://blog.jjyao.me/blog/2018/12/16/linux-pid/"/>
    <updated>2018-12-16T08:15:30-08:00</updated>
    <id>http://blog.jjyao.me/blog/2018/12/16/linux-pid</id>
    <content type="html"><![CDATA[<p>In the Linux world, pid means two things. It&rsquo;s the id of a process from POSIX&rsquo;s point of view and the id of a task from kernel&rsquo;s point of view.</p>

<!-- more -->


<h2>PID</h2>

<p>In POSIX, process is an instance of a running program and it contains one or more threads. The id of a process is called pid.</p>

<p>In the Linux kernel, task is the basic execution unit and is thread in the POSIX definition. Task is represented by <code>struct task_struct</code> in the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">task_struct</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'>  <span class="kt">pid_t</span>   <span class="n">pid</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">pid_t</span>   <span class="n">tgid</span><span class="p">;</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, pid is the id of a task and tgid is the id of the thread group that contains the task. As we can see, <code>task_struct.pid</code> basically is POSIX thread id and <code>task_struct.tgid</code> is POSIX process id.</p>

<h2>EXAMPLES</h2>

<p>Two different meanings of pid can cause lots of confusions and it&rsquo;s important to know whether we are talking about pid in the POSIX context or in the Linux kernel context.</p>

<h3>getpid</h3>

<p><code>getpid()</code> is a function defined by the POSIX standard and pid means the id of a process in this context. Linux implements it by returning <code>task_struct.tgid</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">SYSCALL_DEFINE0</span><span class="p">(</span><span class="n">getpid</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">task_tgid_vnr</span><span class="p">(</span><span class="n">current</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>/proc/[pid]</h3>

<p>The proc file system is an interface to kernel data structures and pid means the id of a task/thread in this context. For example, <code>/proc/[pid]/status</code> shows status information about the task/thread and the implementation is in <code>fs/proc/array.c</code>.</p>

<h2>References</h2>

<p>[1] <a href="https://www.kernel.org/doc/ols/2002/ols2002-pages-330-337.pdf">https://www.kernel.org/doc/ols/2002/ols2002-pages-330-337.pdf</a> <br/>
[2] <a href="https://stackoverflow.com/questions/9305992/if-threads-share-the-same-pid-how-can-they-be-identified">https://stackoverflow.com/questions/9305992/if-threads-share-the-same-pid-how-can-they-be-identified</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Microbenchmark]]></title>
    <link href="http://blog.jjyao.me/blog/2018/11/11/microbenchmark/"/>
    <updated>2018-11-11T13:58:58-08:00</updated>
    <id>http://blog.jjyao.me/blog/2018/11/11/microbenchmark</id>
    <content type="html"><![CDATA[<p>Microbenchmark is used to measure the performance of a small piece of code for the purpose of performance optimization. Writing a good microbenchmark is <a href="https://www.ibm.com/developerworks/library/j-benchmark1/index.html">hard</a> and that&rsquo;s why we should use microbenchmark frameworks (e.g. <a href="http://openjdk.java.net/projects/code-tools/jmh/">JMH</a> for Java and <a href="https://github.com/google/benchmark">Google Benchmark</a> for C++) to help us. This post contains microbenchmarks that I think are interesting.</p>

<!-- more -->


<p><strong>Don&rsquo;t directly use the performance numbers in this post, do your own measurement!</strong> Those numbers are highly dependent on the environment where those benchmarks are running.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">BENCHMARK_DEFINE_F</span><span class="p">(</span><span class="n">BenchmarkFixture</span><span class="p">,</span> <span class="n">ForLoopAssignmentBenchmark</span><span class="p">)(</span><span class="n">benchmark</span><span class="o">::</span><span class="n">State</span><span class="o">&amp;</span> <span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="nl">_</span> <span class="p">:</span> <span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">c</span><span class="p">[</span><span class="mi">2048</span><span class="p">];</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2048</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;a&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">benchmark</span><span class="o">::</span><span class="n">DoNotOptimize</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">BENCHMARK_REGISTER_F</span><span class="p">(</span><span class="n">BenchmarkFixture</span><span class="p">,</span> <span class="n">ForLoopAssignmentBenchmark</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">BENCHMARK_DEFINE_F</span><span class="p">(</span><span class="n">BenchmarkFixture</span><span class="p">,</span> <span class="n">MemsetBenchmark</span><span class="p">)(</span><span class="n">benchmark</span><span class="o">::</span><span class="n">State</span><span class="o">&amp;</span> <span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="nl">_</span> <span class="p">:</span> <span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">c</span><span class="p">[</span><span class="mi">2048</span><span class="p">];</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sc">&#39;a&#39;</span><span class="p">,</span> <span class="mi">2048</span><span class="p">);</span>
</span><span class='line'>    <span class="n">benchmark</span><span class="o">::</span><span class="n">DoNotOptimize</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">BENCHMARK_REGISTER_F</span><span class="p">(</span><span class="n">BenchmarkFixture</span><span class="p">,</span> <span class="n">MemsetBenchmark</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">Run</span> <span class="n">on</span> <span class="p">(</span><span class="mi">12</span> <span class="n">X</span> <span class="mi">2500</span> <span class="n">MHz</span> <span class="n">CPU</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="o">------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="n">Benchmark</span>                                              <span class="n">Time</span>           <span class="n">CPU</span> <span class="n">Iterations</span>
</span><span class='line'><span class="o">------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="n">BenchmarkFixture</span><span class="o">/</span><span class="n">ForLoopAssignmentBenchmark</span>         <span class="mi">1013</span> <span class="n">ns</span>       <span class="mi">1013</span> <span class="n">ns</span>     <span class="mi">750073</span>
</span><span class='line'><span class="n">BenchmarkFixture</span><span class="o">/</span><span class="n">MemsetBenchmark</span>                      <span class="mi">84</span> <span class="n">ns</span>         <span class="mi">84</span> <span class="n">ns</span>    <span class="mi">6209926</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we can see, memset is much faster than the for loop assignment in this case. Looking at the generated assembly code, memset uses <code>rep stos</code> instruction which can be the <a href="https://stackoverflow.com/questions/33480999/how-can-the-rep-stosb-instruction-execute-faster-than-the-equivalent-loop">reason</a> why it&rsquo;s faster.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// https://shipilev.net/blog/2014/nanotrusting-nanotime/</span>
</span><span class='line'><span class="kr">inline</span> <span class="kt">uint64_t</span> <span class="nf">NanosecondsSinceEpoch</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">timespec</span> <span class="n">tp</span><span class="p">;</span>
</span><span class='line'>  <span class="n">clock_gettime</span><span class="p">(</span><span class="n">CLOCK_REALTIME</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tp</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">tp</span><span class="p">.</span><span class="n">tv_sec</span> <span class="o">*</span> <span class="n">NS_PER_SEC</span> <span class="o">+</span> <span class="n">tp</span><span class="p">.</span><span class="n">tv_nsec</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">BENCHMARK_DEFINE_F</span><span class="p">(</span><span class="n">BenchmarkFixture</span><span class="p">,</span> <span class="n">NanoTimeLatencyBenchmark</span><span class="p">)(</span><span class="n">benchmark</span><span class="o">::</span><span class="n">State</span><span class="o">&amp;</span> <span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="nl">_</span> <span class="p">:</span> <span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">benchmark</span><span class="o">::</span><span class="n">DoNotOptimize</span><span class="p">(</span><span class="n">NanosecondsSinceEpoch</span><span class="p">());</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">BENCHMARK_REGISTER_F</span><span class="p">(</span><span class="n">BenchmarkFixture</span><span class="p">,</span> <span class="n">NanoTimeLatencyBenchmark</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">BENCHMARK_DEFINE_F</span><span class="p">(</span><span class="n">BenchmarkFixture</span><span class="p">,</span> <span class="n">NanoTimeGranularityBenchmark</span><span class="p">)(</span><span class="n">benchmark</span><span class="o">::</span><span class="n">State</span><span class="o">&amp;</span> <span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">uint64_t</span> <span class="n">cur_nano</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">uint64_t</span> <span class="n">last_nano</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="nl">_</span> <span class="p">:</span> <span class="n">state</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">do</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">cur_nano</span> <span class="o">=</span> <span class="n">NanosecondsSinceEpoch</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">cur_nano</span> <span class="o">==</span> <span class="n">last_nano</span><span class="p">);</span>
</span><span class='line'>    <span class="n">last_nano</span> <span class="o">=</span> <span class="n">cur_nano</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">BENCHMARK_REGISTER_F</span><span class="p">(</span><span class="n">BenchmarkFixture</span><span class="p">,</span> <span class="n">NanoTimeGranularityBenchmark</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">Run</span> <span class="n">on</span> <span class="p">(</span><span class="mi">12</span> <span class="n">X</span> <span class="mi">2500</span> <span class="n">MHz</span> <span class="n">CPU</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="o">------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="n">Benchmark</span>                                              <span class="n">Time</span>           <span class="n">CPU</span> <span class="n">Iterations</span>
</span><span class='line'><span class="o">------------------------------------------------------------------------------------</span>
</span><span class='line'><span class="n">BenchmarkFixture</span><span class="o">/</span><span class="n">NanoTimeLatencyBenchmark</span>             <span class="mi">39</span> <span class="n">ns</span>         <span class="mi">39</span> <span class="n">ns</span>   <span class="mi">18361529</span>
</span><span class='line'><span class="n">BenchmarkFixture</span><span class="o">/</span><span class="n">NanoTimeGranularityBenchmark</span>         <span class="mi">39</span> <span class="n">ns</span>         <span class="mi">39</span> <span class="n">ns</span>   <span class="mi">18073581</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NanoTimeBenchmark</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@State</span><span class="o">(</span><span class="n">Scope</span><span class="o">.</span><span class="na">Benchmark</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">BenchmarkState</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">long</span> <span class="n">_lastNano</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@Setup</span><span class="o">(</span><span class="n">Level</span><span class="o">.</span><span class="na">Iteration</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setup</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">_lastNano</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Benchmark</span>
</span><span class='line'>  <span class="nd">@Fork</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@Threads</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@Warmup</span><span class="o">(</span><span class="n">iterations</span> <span class="o">=</span> <span class="mi">10</span><span class="o">,</span> <span class="n">time</span> <span class="o">=</span> <span class="mi">5</span><span class="o">,</span> <span class="n">timeUnit</span> <span class="o">=</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@Measurement</span><span class="o">(</span><span class="n">iterations</span> <span class="o">=</span> <span class="mi">10</span><span class="o">,</span> <span class="n">time</span> <span class="o">=</span> <span class="mi">5</span><span class="o">,</span> <span class="n">timeUnit</span> <span class="o">=</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@BenchmarkMode</span><span class="o">(</span><span class="n">Mode</span><span class="o">.</span><span class="na">AverageTime</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@OutputTimeUnit</span><span class="o">(</span><span class="n">TimeUnit</span><span class="o">.</span><span class="na">NANOSECONDS</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">long</span> <span class="nf">nanoTimeLatency</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Benchmark</span>
</span><span class='line'>  <span class="nd">@Fork</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@Threads</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@Warmup</span><span class="o">(</span><span class="n">iterations</span> <span class="o">=</span> <span class="mi">10</span><span class="o">,</span> <span class="n">time</span> <span class="o">=</span> <span class="mi">5</span><span class="o">,</span> <span class="n">timeUnit</span> <span class="o">=</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@Measurement</span><span class="o">(</span><span class="n">iterations</span> <span class="o">=</span> <span class="mi">10</span><span class="o">,</span> <span class="n">time</span> <span class="o">=</span> <span class="mi">5</span><span class="o">,</span> <span class="n">timeUnit</span> <span class="o">=</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@BenchmarkMode</span><span class="o">(</span><span class="n">Mode</span><span class="o">.</span><span class="na">AverageTime</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@OutputTimeUnit</span><span class="o">(</span><span class="n">TimeUnit</span><span class="o">.</span><span class="na">NANOSECONDS</span><span class="o">)</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">long</span> <span class="nf">nanoTimeGranularity</span><span class="o">(</span><span class="n">BenchmarkState</span> <span class="n">benchmarkState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">cur</span><span class="o">;</span>
</span><span class='line'>    <span class="k">do</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">cur</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">cur</span> <span class="o">==</span> <span class="n">benchmarkState</span><span class="o">.</span><span class="na">_lastNano</span><span class="o">);</span>
</span><span class='line'>    <span class="n">benchmarkState</span><span class="o">.</span><span class="na">_lastNano</span> <span class="o">=</span> <span class="n">cur</span><span class="o">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">cur</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Benchmark</span>                              <span class="n">Mode</span>  <span class="n">Cnt</span>   <span class="n">Score</span>   <span class="n">Error</span>  <span class="n">Units</span>
</span><span class='line'><span class="n">NanoTimeBenchmark</span><span class="o">.</span><span class="na">nanoTimeLatency</span>      <span class="n">avgt</span>   <span class="mi">10</span>  <span class="mf">42.705</span> <span class="err">±</span> <span class="mf">0.302</span>  <span class="n">ns</span><span class="o">/</span><span class="n">op</span>
</span><span class='line'><span class="n">NanoTimeBenchmark</span><span class="o">.</span><span class="na">nanoTimeGranularity</span>  <span class="n">avgt</span>   <span class="mi">10</span>  <span class="mf">43.875</span> <span class="err">±</span> <span class="mf">0.674</span>  <span class="n">ns</span><span class="o">/</span><span class="n">op</span>
</span></code></pre></td></tr></table></div></figure>


<p>This shows the overhead of getting time in both C++ and Java. They are not free!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One-Liners]]></title>
    <link href="http://blog.jjyao.me/blog/2018/11/07/one-liners/"/>
    <updated>2018-11-07T22:06:28-08:00</updated>
    <id>http://blog.jjyao.me/blog/2018/11/07/one-liners</id>
    <content type="html"><![CDATA[<ol>
<li><a href="#get_java_gc_stw_time">Get Java GC Related Application Stopped Time</a></li>
</ol>


<!-- more -->


<h2><a id="get_java_gc_stw_time"></a>Get Java GC Related Application Stopped Time</h2>

<p>If Java application is started with <code>-XX:+PrintGCApplicationStoppedTime</code>, gc log will contain the application stopped time (STW) caused by different reasons (e.g. GC is just one common reason). This one-liner parses the gc log and only prints out the stopped time caused by GC. <br/>
Source: <a href="https://github.com/giltene/jHiccup">https://github.com/giltene/jHiccup</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='Bash'><span class='line'>// gc log with +PrintGCTimeStamps
</span><span class='line'>awk -F<span class="s2">&quot;: &quot;</span> <span class="s1">&#39;/\[GC/ {t = $1; l = 1; while ((l == 1) &amp;&amp; index($0, &quot;Total time&quot;) == 0) { l = getline; } if (l == 1) {print t*1000.0, $3*1000.0;}}&#39;</span> gc.log
</span><span class='line'>
</span><span class='line'>// gc log with +PrintGCTimeStamps and +PrintGCDateStamps
</span><span class='line'>awk -F<span class="s2">&quot;: &quot;</span> <span class="s1">&#39;/\[GC/ {t = $2; l = 1; while ((l == 1) &amp;&amp; index($0, &quot;Total time&quot;) == 0) { l = getline; } if (l == 1) {print t*1000.0, $4*1000.0;}}&#39;</span> gc.log
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HugeTLBFS Read Bug]]></title>
    <link href="http://blog.jjyao.me/blog/2017/11/27/hugetlbfs-read-bug/"/>
    <updated>2017-11-27T22:29:46-08:00</updated>
    <id>http://blog.jjyao.me/blog/2017/11/27/hugetlbfs-read-bug</id>
    <content type="html"><![CDATA[<p>Hit a Linux kernel bug that <code>read()</code> returns wrong data if it crosses a hugepage boundary.</p>

<!-- more -->


<h2>Scenario</h2>

<p>When I read a file in the <code>hugetlbfs</code> using <code>std::ifstream</code>, I fail to get the exact data of the file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">file</span> <span class="o">=</span> <span class="s">&quot;/mnt/huge/foo&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">ifstream</span> <span class="n">fin</span><span class="p">;</span>
</span><span class='line'><span class="n">fin</span><span class="p">.</span><span class="n">open</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ifstream</span><span class="o">::</span><span class="n">binary</span><span class="p">);</span>
</span><span class='line'><span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">fin</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">c</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">fin</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, if I use <code>fread()</code> I can get the correct data:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">file</span> <span class="o">=</span> <span class="s">&quot;/mnt/huge/foo&quot;</span><span class="p">;</span>
</span><span class='line'><span class="kt">FILE</span><span class="o">*</span> <span class="n">fin</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">file</span><span class="p">.</span><span class="n">c_str</span><span class="p">(),</span> <span class="s">&quot;rb&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">fread</span><span class="p">(</span><span class="o">&amp;</span><span class="n">c</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">fin</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">fclose</span><span class="p">(</span><span class="n">fin</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>To figure out the reason, I <code>strace</code> these two programs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">open</span><span class="p">(</span><span class="s">&quot;/mnt/huge/foo&quot;</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">)</span>         <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\220</span><span class="s">N</span><span class="se">\210\344\36\227\276\303\305\301\334\346\246\245\371</span><span class="s">7tmg/</span><span class="se">\25\235</span><span class="s">C</span><span class="se">\365</span><span class="s">k</span><span class="se">\7\273</span><span class="s">T2</span><span class="se">\266\220\327</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">8191</span><span class="p">)</span> <span class="o">=</span> <span class="mi">8191</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;%</span><span class="se">\361</span><span class="s">!</span><span class="se">\253</span><span class="s">lek&amp;</span><span class="se">\30\306\370\333</span><span class="s">f</span><span class="se">\304\357</span><span class="s">L6@z</span><span class="se">\224</span><span class="s">W&lt;ef</span><span class="se">\335\206\225\246\342</span><span class="s">!</span><span class="se">\327\6</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">8191</span><span class="p">)</span> <span class="o">=</span> <span class="mi">8191</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;B</span><span class="se">\222\327</span><span class="s">-</span><span class="se">\17</span><span class="s">`&#39;</span><span class="se">\250</span><span class="s">E[]</span><span class="se">\327</span><span class="s">mi</span><span class="se">\37\330</span><span class="s">8u</span><span class="se">\250\231</span><span class="s">F</span><span class="se">\200\250\35</span><span class="s">-</span><span class="se">\v\276\245</span><span class="s">&gt;H</span><span class="se">\321</span><span class="s">R&quot;</span><span class="p">...,</span> <span class="mi">8191</span><span class="p">)</span> <span class="o">=</span> <span class="mi">8191</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;u</span><span class="se">\311</span><span class="s">w</span><span class="se">\336\10</span><span class="s">h</span><span class="se">\374\f\214\301\376</span><span class="s">-</span><span class="se">\025</span><span class="s">8&#39;</span><span class="se">\263</span><span class="s">;Iu1</span><span class="se">\273\267\345\313\246\22</span><span class="s">O</span><span class="se">\320\335\254</span><span class="s">&#39;</span><span class="se">\7</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">8191</span><span class="p">)</span> <span class="o">=</span> <span class="mi">8191</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\342\265\263\314\222\265</span><span class="s">rr</span><span class="se">\265</span><span class="s">*A</span><span class="se">\27\34</span><span class="s">&lt;</span><span class="se">\342\344</span><span class="s">F</span><span class="se">\244</span><span class="s">|</span><span class="se">\371\f\231\345\331\343</span><span class="s">=</span><span class="se">\321</span><span class="s">SZx</span><span class="se">\273\240</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">8191</span><span class="p">)</span> <span class="o">=</span> <span class="mi">8191</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;=?</span><span class="se">\241\337\20\235\367\233\10\234</span><span class="s">;^</span><span class="se">\234\337\274\322\237\242\346\32\32\233</span><span class="s">gb</span><span class="se">\231\236</span><span class="s">DZ</span><span class="se">\336</span><span class="s">t</span><span class="se">\364</span><span class="s">]&quot;</span><span class="p">...,</span> <span class="mi">8191</span><span class="p">)</span> <span class="o">=</span> <span class="mi">8191</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;1</span><span class="se">\233\21</span><span class="s">z</span><span class="se">\345\355</span><span class="s">?</span><span class="se">\243\342\361</span><span class="s">e</span><span class="se">\335\334\246\363\316</span><span class="s">A</span><span class="se">\267\361</span><span class="s">Nv</span><span class="se">\304\250\225\240</span><span class="s">Q</span><span class="se">\267\31\r\265\314</span><span class="s">&#39;&quot;</span><span class="p">...,</span> <span class="mi">8191</span><span class="p">)</span> <span class="o">=</span> <span class="mi">8191</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;$</span><span class="se">\24\277\\\213\320</span><span class="s">jGj</span><span class="se">\n</span><span class="s">b4</span><span class="se">\317\370</span><span class="s">p</span><span class="se">\216</span><span class="s">&gt;5V</span><span class="se">\331\1\256</span><span class="s">1</span><span class="se">\275\24\233\326</span><span class="s">d+</span><span class="se">\1</span><span class="s">UM&quot;</span><span class="p">...,</span> <span class="mi">8191</span><span class="p">)</span> <span class="o">=</span> <span class="mi">8191</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\262\355\327</span><span class="s">!</span><span class="se">\2</span><span class="s">h</span><span class="se">\303\332\373\16\257\3\32</span><span class="s">y!O</span><span class="se">\303</span><span class="s">]5</span><span class="se">\331\256</span><span class="s">?Q</span><span class="se">\277</span><span class="s">t</span><span class="se">\27\262\223\316\357</span><span class="s">j(&quot;</span><span class="p">...,</span> <span class="mi">8191</span><span class="p">)</span> <span class="o">=</span> <span class="mi">8191</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;pd</span><span class="se">\204</span><span class="s">3</span><span class="se">\261\350</span><span class="s">C</span><span class="se">\313\356\200\366</span><span class="s">}</span><span class="se">\17\25\335\240</span><span class="s">?</span><span class="se">\357\225</span><span class="s">Fs</span><span class="se">\226</span><span class="s">qKW</span><span class="se">\241</span><span class="s">r</span><span class="se">\227</span><span class="s">b</span><span class="se">\242</span><span class="s">4</span><span class="se">\347</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">8191</span><span class="p">)</span> <span class="o">=</span> <span class="mi">8191</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">open</span><span class="p">(</span><span class="s">&quot;/mnt/huge/foo&quot;</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">)</span>         <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'><span class="n">fstat</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="p">{</span><span class="n">st_mode</span><span class="o">=</span><span class="n">S_IFREG</span><span class="o">|</span><span class="mo">0644</span><span class="p">,</span> <span class="n">st_size</span><span class="o">=</span><span class="mi">5242880</span><span class="p">,</span> <span class="p">...})</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">mmap</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="mi">4096</span><span class="p">,</span> <span class="n">PROT_READ</span><span class="o">|</span><span class="n">PROT_WRITE</span><span class="p">,</span> <span class="n">MAP_PRIVATE</span><span class="o">|</span><span class="n">MAP_ANONYMOUS</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="mh">0x7f9328b03000</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\220</span><span class="s">N</span><span class="se">\210\344\36\227\276\303\305\301\334\346\246\245\371</span><span class="s">7tmg/</span><span class="se">\25\235</span><span class="s">C</span><span class="se">\365</span><span class="s">k</span><span class="se">\7\273</span><span class="s">T2</span><span class="se">\266\220\327</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">4096</span><span class="p">)</span> <span class="o">=</span> <span class="mi">4096</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\v\327\265</span><span class="s">M</span><span class="se">\276\253\357\325</span><span class="s">m</span><span class="se">\244\253\351\237\350\273\21</span><span class="s">E&lt;</span><span class="se">\326\356\030</span><span class="s">03</span><span class="se">\210\5\277\210</span><span class="s">h</span><span class="se">\200</span><span class="s">V5</span><span class="se">\376</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">4096</span><span class="p">)</span> <span class="o">=</span> <span class="mi">4096</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\361</span><span class="s">!</span><span class="se">\253</span><span class="s">lek&amp;</span><span class="se">\30\306\370\333</span><span class="s">f</span><span class="se">\304\357</span><span class="s">L6@z</span><span class="se">\224</span><span class="s">W&lt;ef</span><span class="se">\335\206\225\246\342</span><span class="s">!</span><span class="se">\327\6\t</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">4096</span><span class="p">)</span> <span class="o">=</span> <span class="mi">4096</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\343\300\202</span><span class="s">/</span><span class="se">\343\t\300\340\332\215\214</span><span class="s">8</span><span class="se">\226\342\251\377\f</span><span class="s">q_</span><span class="se">\21</span><span class="s">n</span><span class="se">\370\212\273</span><span class="s">tn</span><span class="se">\305\210</span><span class="s">#</span><span class="se">\320</span><span class="s">@`&quot;</span><span class="p">...,</span> <span class="mi">4096</span><span class="p">)</span> <span class="o">=</span> <span class="mi">4096</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\327</span><span class="s">-</span><span class="se">\17</span><span class="s">`&#39;</span><span class="se">\250</span><span class="s">E[]</span><span class="se">\327</span><span class="s">mi</span><span class="se">\37\330</span><span class="s">8u</span><span class="se">\250\231</span><span class="s">F</span><span class="se">\200\250\35</span><span class="s">-</span><span class="se">\v\276\245</span><span class="s">&gt;H</span><span class="se">\321</span><span class="s">R</span><span class="se">\277\36</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">4096</span><span class="p">)</span> <span class="o">=</span> <span class="mi">4096</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;t</span><span class="se">\346</span><span class="s">p0</span><span class="se">\204</span><span class="s">OeD</span><span class="se">\211\256\233</span><span class="s">g</span><span class="se">\242\351</span><span class="s">3</span><span class="se">\3</span><span class="s">X</span><span class="se">\367\032</span><span class="s">3</span><span class="se">\332\235\330\215\375\261</span><span class="s">G</span><span class="se">\234\217\17\34\375</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">4096</span><span class="p">)</span> <span class="o">=</span> <span class="mi">4096</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\336\10</span><span class="s">h</span><span class="se">\374\f\214\301\376</span><span class="s">-</span><span class="se">\025</span><span class="s">8&#39;</span><span class="se">\263</span><span class="s">;Iu1</span><span class="se">\273\267\345\313\246\22</span><span class="s">O</span><span class="se">\320\335\254</span><span class="s">&#39;</span><span class="se">\7\205\r\325</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">4096</span><span class="p">)</span> <span class="o">=</span> <span class="mi">4096</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;xK</span><span class="se">\373\233\300\n\354\350</span><span class="s">&gt;s</span><span class="se">\243\270\365</span><span class="s">D</span><span class="se">\276\263\226</span><span class="s">/</span><span class="se">\276\27</span><span class="s">S</span><span class="se">\225\&quot;</span><span class="s">yL</span><span class="se">\4</span><span class="s">V</span><span class="se">\352\272\26</span><span class="s">b</span><span class="se">\261</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">4096</span><span class="p">)</span> <span class="o">=</span> <span class="mi">4096</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\222\265</span><span class="s">rr</span><span class="se">\265</span><span class="s">*A</span><span class="se">\27\34</span><span class="s">&lt;</span><span class="se">\342\344</span><span class="s">F</span><span class="se">\244</span><span class="s">|</span><span class="se">\371\f\231\345\331\343</span><span class="s">=</span><span class="se">\321</span><span class="s">SZx</span><span class="se">\273\240</span><span class="s">)</span><span class="se">\245</span><span class="s">h</span><span class="se">\224</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">4096</span><span class="p">)</span> <span class="o">=</span> <span class="mi">4096</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;P</span><span class="se">\332</span><span class="s">o&gt;+</span><span class="se">\355\17\372\251\275</span><span class="s">n</span><span class="se">\266</span><span class="s"> </span><span class="se">\n\310</span><span class="s">aB</span><span class="se">\210\235\30</span><span class="s">u{</span><span class="se">\365\34\255\367\36\375\365\v\27\331</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">4096</span><span class="p">)</span> <span class="o">=</span> <span class="mi">4096</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\235\367\233\10\234</span><span class="s">;^</span><span class="se">\234\337\274\322\237\242\346\32\32\233</span><span class="s">gb</span><span class="se">\231\236</span><span class="s">DZ</span><span class="se">\336</span><span class="s">t</span><span class="se">\364</span><span class="s">]</span><span class="se">\225\216</span><span class="s">.=C&quot;</span><span class="p">...,</span> <span class="mi">4096</span><span class="p">)</span> <span class="o">=</span> <span class="mi">4096</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="s">&quot;p$</span><span class="se">\350</span><span class="s">r</span><span class="se">\31\215\&quot;\225\331</span><span class="s">&amp;</span><span class="se">\354\200\361\344\333</span><span class="s">L</span><span class="se">\201\37</span><span class="s">e</span><span class="se">\r\&quot;\353\255\244\250</span><span class="s">?</span><span class="se">\253</span><span class="s">O</span><span class="se">\252</span><span class="s">A3</span><span class="se">\371</span><span class="s">&quot;</span><span class="p">...,</span> <span class="mi">4096</span><span class="p">)</span> <span class="o">=</span> <span class="mi">4096</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Based on <code>strace</code>, <code>std::ifstream</code> reads 8191 bytes at a time and <code>fread()</code> reads 4096 bytes at a time. To check if the read size matters, I change the <code>std::ifstream</code> program so that it also reads 4096 bytes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">file</span> <span class="o">=</span> <span class="s">&quot;/mnt/huge/foo&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">std</span><span class="o">::</span><span class="n">ifstream</span> <span class="n">fin</span><span class="p">;</span>
</span><span class='line'><span class="c1">// with a user-provided buffer, libstdc++ reads n-1 bytes at a time</span>
</span><span class='line'><span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">4096</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="n">fin</span><span class="p">.</span><span class="n">rdbuf</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">pubsetbuf</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">));</span>
</span><span class='line'><span class="n">fin</span><span class="p">.</span><span class="n">open</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ifstream</span><span class="o">::</span><span class="n">binary</span><span class="p">);</span>
</span><span class='line'><span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">fin</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">c</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">fin</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>After I change <code>std::ifstream</code> to read 4096 bytes at a time, I&rsquo;m able to read the correct data so the read size matters. <code>read()</code> is a system call and it should handle all kinds of read size so the experiment indicates that there might be a bug somewhere in the kernel. After looking at the kernel commit log, something interesting shows up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="nl">Author</span><span class="p">:</span> <span class="n">Al</span> <span class="n">Viro</span> <span class="o">&lt;</span><span class="n">viro</span><span class="err">@</span><span class="n">zeniv</span><span class="p">.</span><span class="n">linux</span><span class="p">.</span><span class="n">org</span><span class="p">.</span><span class="n">uk</span><span class="o">&gt;</span>
</span><span class='line'><span class="nl">Date</span><span class="p">:</span>   <span class="n">Fri</span> <span class="n">Apr</span> <span class="mi">3</span> <span class="mi">11</span><span class="o">:</span><span class="mi">31</span><span class="o">:</span><span class="mi">35</span> <span class="mi">2015</span> <span class="o">-</span><span class="mo">0400</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">switch</span> <span class="n">hugetlbfs</span> <span class="n">to</span> <span class="o">-&gt;</span><span class="n">read_iter</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">...</span> <span class="n">and</span> <span class="n">fix</span> <span class="n">the</span> <span class="k">case</span> <span class="n">when</span> <span class="n">the</span> <span class="n">area</span> <span class="n">we</span> <span class="n">are</span> <span class="n">asked</span> <span class="n">to</span> <span class="n">read</span> <span class="n">crosses</span>
</span><span class='line'>    <span class="n">a</span> <span class="n">hugepage</span> <span class="n">boundary</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Signed</span><span class="o">-</span><span class="n">off</span><span class="o">-</span><span class="nl">by</span><span class="p">:</span> <span class="n">Al</span> <span class="n">Viro</span> <span class="o">&lt;</span><span class="n">viro</span><span class="err">@</span><span class="n">zeniv</span><span class="p">.</span><span class="n">linux</span><span class="p">.</span><span class="n">org</span><span class="p">.</span><span class="n">uk</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So I actually hit a kernel bug.</p>

<h2>Solution</h2>

<p>Change the <code>std::ifstream</code> read size by providing a user-provided buffer so that read won&rsquo;t cross the hugepage boundary or upgrade the Linux kernel version to include the fix.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jonathan Lee]]></title>
    <link href="http://blog.jjyao.me/blog/2017/09/10/jonathan-lee/"/>
    <updated>2017-09-10T22:13:16-07:00</updated>
    <id>http://blog.jjyao.me/blog/2017/09/10/jonathan-lee</id>
    <content type="html"><![CDATA[<p>我说我喜欢你的歌，我不知道这算不算是一件好事。
我说我喜欢你的词，总是道出我心中不欲人知的事。</p>

<!-- more -->


<p>念念不忘必有回响，我终于见到了李宗盛，在我人生参加的第一场演唱会上。在等待了多年以后，我终于在现场听到了那些陪伴了我无数个日夜的歌，那些叫做“词曲：李宗盛”的歌。</p>

<p><img src="http://blog.jjyao.me/images/post/jonathan-lee/concert.jpeg">
<img src="http://blog.jjyao.me/images/post/jonathan-lee/live.jpeg"></p>

<p>下一次，我飘洋过海来看你。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You Don't Exist, Go Away!]]></title>
    <link href="http://blog.jjyao.me/blog/2017/08/30/you-dont-exist-go-away/"/>
    <updated>2017-08-30T21:10:41-07:00</updated>
    <id>http://blog.jjyao.me/blog/2017/08/30/you-dont-exist-go-away</id>
    <content type="html"><![CDATA[<p>SSH asks me to go way because of ntp clock skew</p>

<!-- more -->


<h2>Scenario</h2>

<p>When I try to ssh to a remote server from my linux desktop, I get:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[jyao@localhost]$ ssh eng-portal
</span><span class='line'>You don't exist, go away!</span></code></pre></td></tr></table></div></figure>


<p>Then I realize that my shell prompt changes to <code>[I have no name!@localhost]$</code>. Apparently, <code>whoami</code> stops working:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[I have no name!@localhost]$ whoami
</span><span class='line'>whoami: cannot find name for user ID 16195</span></code></pre></td></tr></table></div></figure>


<p>Another thing I find accidentally is that if I disconnect my desktop from internet, <code>whoami</code> works again. So my guess is that <code>whoami</code> tries to get name from a remote server if there is internet connection. Otherwise, it falls back to use a local database which contains the correct data. My first theory is that the data on the remote server is corrupted. To figure out the remote server that <code>whoami</code> talks to, I run <code>strace</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[I have no name!@localhost]$ strace -f -e trace=network -s 10000 whoami
</span><span class='line'>...
</span><span class='line'>connect(3, {sa_family=AF_FILE, path="/var/lib/likewise/.lsassd"}, 110) = 0
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>So <code>whoami</code> talks to <code>lsassd</code> daemon which then talks to <code>Active Directory</code> server. Based on my first theory, it looks like the data on the <code>Active Directory</code> server is corrupted. To confirm this, I run <code>lw-find-user-by-id</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[I have no name!@localhost]$ /opt/likewise/bin/lw-find-user-by-id 16195
</span><span class='line'>Clock skew detected with active directory server</span></code></pre></td></tr></table></div></figure>


<p>Hmm, this means that my first theory is wrong. To confirm the clock skew, I run <code>ntpq</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[I have no name!@localhost]$ ntpq -p
</span><span class='line'>remote           refid      st t when poll reach   delay   offset  jitter
</span><span class='line'>==============================================================================
</span><span class='line'>*lmn1-d1-infra01 10.251.184.29    2 u   44   64  177    1.612  -364830 129.863
</span><span class='line'>+lmn1-d1-infra02 10.251.184.29    2 u   47   64  177    1.512  -364831 129.060</span></code></pre></td></tr></table></div></figure>


<p>It turns out that the desktop clock is off by 6 minutes. Now the question arises: why <code>ntpd</code> fails to sync up the correct time with the ntp server after the clock skew happens? After googling, I find that <code>ntpd</code> indeed tries to fix the clock skew but just in a slow speed (<a href="https://serverfault.com/a/608157">https://serverfault.com/a/608157</a>). It takes <code>ntpd</code> more than 1 week to fix 6 minutes skew.</p>

<h2>Solution</h2>

<p>Force <code>ntpd</code> to do sync up using <code>-g</code> option:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// disconnect from internet first as sudo needs whoami to be working
</span><span class='line'>[I have no name!@localhost]$ sudo service ntpd stop
</span><span class='line'>// connect to internet
</span><span class='line'>[I have no name!@localhost]$ sudo ntpd -gq
</span><span class='line'>[I have no name!@localhost]$ sudo service ntpd start</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Have Learned From CMU CS Education]]></title>
    <link href="http://blog.jjyao.me/blog/2015/12/23/what-i-have-learned-from-cmu-cs-education/"/>
    <updated>2015-12-23T20:51:02-08:00</updated>
    <id>http://blog.jjyao.me/blog/2015/12/23/what-i-have-learned-from-cmu-cs-education</id>
    <content type="html"><![CDATA[<p>在南京大学软件学院读完本科后我到CMU读了硕士。虽然在CMU只有短短的一年半时间，但我还是从多个方面体验到了CMU（美国）的计算机教育。这其中有很多东西值得国内的高校学习借鉴。</p>

<!-- more -->


<h2>Internship</h2>

<p>美国的本科生有比国内本科生更多的实习机会。每年暑假他们都可以到一个公司（这其中不乏Google，Facebook这样的大公司）实习，这样下来他们在本科阶段就有3次实习机会（加拿大滑铁卢大学因为有co-op，所以学生有6次实习机会）。相反，国内学生暑假的时候一般都回家休息，只有大四的时候有一次实习机会。更多更早的实习机会对学生们来说意味着他们有机会运用学校所学知识去解决实际问题并且还能从工业界获得在学校里学不到的知识和经验。多次实习也让他们有机会对多个公司有更深入的了解，这样等到毕业选公司的时候可以做出更适合自己的选择。同时实习经历也能让他们毕业后更顺利地从学生身份过渡到员工身份。从另一个方面来讲，实习对公司也是有利的。相比面试而言，公司可以通过实习更全面地了解学生并从中挑出优秀适合公司的给出offer。同时实习也给了公司一个展示企业文化等的机会，以此来帮助公司吸引优秀的实习生毕业后回到公司。</p>

<h2>Sabbatical</h2>

<p>Sabbatical制度是指教授每工作几年后都有一次休假的机会。教授往往会借着这个机会到工业界工作一段时间。在我CMU读书期间，就有一个CS的教授利用Sabbatical的机会到Google Brain组工作了一年。这种Sabbatical机会促进了工业界和学术界的交流，让教授有机会了解到工业界的需求同时也让工业界有机会使用学术界的成果。</p>

<h2>Guests</h2>

<p>CMU很注重学术交流，经常会请各种guests来做讲座。有些课程会特地安排几节课来请外面的人到学校做讲座。比如我在CMU上的Storage课就请过GFS（Google File System）的开发者来做过讲座。又比如说CMU DB Group曾举办过&#8221;Seven Databases in Seven Weeks&#8221; Seminar活动，请来了知名的数据库开发人员来介绍他们的数据库。这些guests有来自工业界的也有来自学术界的。通过和他们的交流，我们能够扩展我们的视野，从多方面学习到相关知识。</p>

<h2>TA</h2>

<p>在CMU，上过一门课后就可以申请成为那门课的TA。当TA需要在office hour的时候解答学生的问题也需要批改作业和试卷。对于老师来讲，TA分担了一部分的工作。对于TA来讲，一方面可以增加点收入另一方面也会在答疑的过程中巩固所学知识。</p>

<h2>Industry</h2>

<p>和工业界的紧密联系是我对CMU计算机教育的另一个印象。Intel的Research Center就在校园里，研究员们会和PhD们共同参与研究。每年Parall Data Lab会举办一个为期三天的Retreat，邀请工业界的人来参加Workshop，向他们展示最新的研究成果，并给学生和教授一个和工业界深入交流的机会。同时每年会有大量工业界的guests受邀来学校做讲座。这样的紧密联系促进了知识的共享也能让学生多了些工业界的人脉。</p>

<h2>Professors</h2>

<p>在CMU，教授有Teaching Professor, Research Professor和Professor。擅长教书和擅长做研究的都可以找到适合自己的职位。这样可以避免让不擅长教书的人去教书这样的情况发生，对教授和学生都是一件好事。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What I Have Learned From Writing a Kernel From Scratch]]></title>
    <link href="http://blog.jjyao.me/blog/2015/06/15/what-i-have-learned-from-writing-a-kernel-from-scratch/"/>
    <updated>2015-06-15T21:45:49-07:00</updated>
    <id>http://blog.jjyao.me/blog/2015/06/15/what-i-have-learned-from-writing-a-kernel-from-scratch</id>
    <content type="html"><![CDATA[<p>Last semester, I took the course <a href="https://www.cs.cmu.edu/~410/">15410</a> and wrote a kernel from scratch with my partner. I learned a lot from this course and the kernel project. Following is what I have learned:</p>

<ol>
<li>Never Failed Functions</li>
<li>Comment on Why</li>
<li>Synchronization</li>
<li>Error Handling</li>
<li>Why Writing a Kernel From Scratch</li>
<li>Misc.</li>
</ol>


<!-- more -->


<h2>Never Failed Functions</h2>

<p>There are cases where some functions cannot fail, which means that they cannot return errors and let callers handle these errors. For example, the <code>free()</code> function is a never failed function. Why? Because callers have no way to do something reasonable to handle the failure. What can we do when <code>free()</code> returns an error code? Retry, ignore or exit? Obviously, none of these solutions are acceptable. Similarly, <code>exit()</code> can never fail. To implement these never failed functions, we need to allocate resources needed by these functions in advance. For example, we should <strong>preallocate</strong> resources (e.g. memory that stores exit status) that are necessary for <code>exit()</code> to succeed when we <code>fork()</code> the process even if <code>fork()</code> itself doesn&rsquo;t need those resources. If <code>fork()</code> cannot preallocate needed resources, it can just returns an error as callers can do reasonable things to handle errors from it. Similarly, if <code>free()</code> needs some resources to succeed, we should acquire them inside <code>malloc()</code>. Another implication of never failed functions is that we should consider if a function can fail when we design the interface of the function. To make the decision, we should put ourselves in the shoe of callers. Can callers do something reasonable to handle returned errors? If the answer is not, then we should probably implement the function in a way that it never fails using techniques like preallocation.</p>

<h2>Comment on Why</h2>

<p>When we write comments, we should answer the question why we write this code. <strong>It&rsquo;s easier to figure out what the code does than why it is written.</strong> For the kernel, there are some code that is written to handle special cases that only happen in a special execution path. For example, some concurrency issues can only be triggered when interrupts or context switches happen in a particular time (e.g. before the execution of a particular instruction). To address these issues, we need to write some special code and it&rsquo;s important for us to write comments explaining why we write this code. If we don&rsquo;t write comments, then next time no one understands this piece of code (it&rsquo;s hard, if not impossible, to recall the particular execution path that causes concurrency issues).</p>

<h2>Synchronization</h2>

<p>Writing a kernel is all about synchronization, concurrency, race conditions and deadlock. <strong>Interrupts can happen at any time</strong>, and as a result, CPU is switched to execute interrupt handlers. What happens if CPU is executing a critical section when an interrupt happens? What happens if an interrupt handler tries to acquire a lock that has already been acquired by the interrupted code? As application programmers, we use synchronization primitives such as mutex to protect critical sections. However, these primitives cannot solve all the concurrency problems happening in the kernel. For example, we cannot use mutex to protect data accessed by both of an interrupt handler and some other code because it can cause deadlock. A typical example is the scan code buffer used by the keyboard interrupt handler. When a key is pressed or released, the keyboard handler is invoked to handle the event. What it does is store the scan code to a buffer so that some program can retrieve it later. As keyboard interrupts can happen when some program is accessing the scan code buffer to retrieve data and the keyboard interrupt handler also accesses the buffer to put data, the shared buffer should be protected. A normal mutex doesn&rsquo;t help in this case because it causes deadlock. Imagining that some code acquires the mutex and is accessing the scan code buffer and at that time, keyboard interrupt handler is invoked, the handler wants to acquire the mutex to access the buffer but it has already been acquired so the hanlder has to wait for the mutex to be released. However, the interrupted code cannot resume execution before the interrupt handler returns and as a result, we have the deadlock. To solve this problem, we can disable interrupts instead of using mutex. Disabling interrupts is the easiest way to address concurrency issues but it doesn&rsquo;t mean that we should use it everywhere. The problem of disabling interrupts is that the kernel may miss interrupts (e.g. timer interrupts) and becomes less preemptible, so we should avoid disabling interrupts if there are other methods to solve concurrency issues (e.g. avoid sharing data).</p>

<h2>Error Handling</h2>

<p>To write robust software (e.g. kernel), we have to handle <strong>all</strong> possible errors correctly. For example, we should assume that all <code>malloc()</code> invocations may fail and write code to handle these failures. It seems to be tedious to handle every possible error (especially errors that we think are unlikely to happen), but it is crucial for writing robust software (according to Murphy&rsquo;s law, errors will happen eventually). Some errors are expected and current code can recover from them. In this case, current code should resolve these errors. Some errors are expected and current code doesn&rsquo;t have enough knowledge to resolve them. In this case, current code should propagate errors up and let callers handle these errors. Some errors are unexpected and usually indicate program bugs (e.g. unexpected null pointer parameters). In this case, programs should log enough information and exit immediately, which helps programmers find bugs quickly.</p>

<h2>Why Writing a Kernel From Scratch</h2>

<p>Many people ask the question why we should take 15410 and write a kernel from scratch, after all we are highly unlikely to be asked to implement a new operating system during our lifetime. Here is my answer to this question. Writing a kenel from scratch lets us have a deep understanding of current operating systems (e.g. Unix) and know how they work. Compared with Unix, our kernel is a toy but concepts are similar. A toy kernel also implements context switch, virtual memory, paging, copy-on-write, zero-filled on demand, drivers, interrupt handlers, scheduler, processes, threads, synchronization primitives, and system calls. Through implementing these concepts, we know why context swith is costly, why system call is costly, why process is heavyweight, and so on. As all application software runs on top of an operating system, having a good understanding of these things helps us write performant software. For example, knowing that context switch is costly and process is heavyweight, Nginx developers use an <a href="http://nginx.com/blog/thread-pools-boost-performance-9x/">asynchronous, event-driven approach to handling connections</a>, which makes Nginx a high performance web server. What&rsquo;s more, through implementing a kernel, we learn how to write robust, well-documented code. The same techniques can also be applied to writing other code. In a word, <strong>writing a kernel from scratch helps us write better application software</strong>.</p>

<h2>Misc.</h2>

<ol>
<li>After <code>cond_wait()</code>, the code needs to check the condition <strong>again</strong>, which means we should warp <code>cond_wait()</code> with <code>while</code> instead of <code>if</code>.</li>
<li>Solving a problem using <code>sleep()</code> is bad. N-1 times it&rsquo;s much too short. Nth time it&rsquo;s much too long. The magic number doesn&rsquo;t work well every time.</li>
<li>To have an efficient meeting, we should have our own thoughts and ideas before the meeting.</li>
<li>Any problem in computer science can be solved with another level of indirection. —— David Wheeler</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Which Intent Will You Get After Android Relaunches the Activity]]></title>
    <link href="http://blog.jjyao.me/blog/2014/08/28/which-intent-will-you-get-after-android-relaunches-the-activity/"/>
    <updated>2014-08-28T14:28:06-07:00</updated>
    <id>http://blog.jjyao.me/blog/2014/08/28/which-intent-will-you-get-after-android-relaunches-the-activity</id>
    <content type="html"><![CDATA[<p>Imagine that you launch a <code>singleTop</code> activity using intent A and then launch it again using intent B. As a result, activity&rsquo;s <code>onNewIntent</code> method is called and inside this method you call <code>setIntent</code> to store the new intent. After that, Android decides to relaunch the activity. Now we have the question: which intent will you get after Android relaunches the activity? The original one(A) or the latest one(B)?</p>

<!-- more -->


<p>The answer is you may get either one, and it depends on why Android relaunches the activity. In some situations, Android will relaunch your activity because Android kills it(indeed the process) to reclaim memory and then you navigate back to it.
In this case, you will get the original intent instead of the latest one. Android will also relaunch your activity(it&rsquo;s the default behavior) due to the configuration change and you&rsquo;ll get the latest intent. Now let&rsquo;s discuss these two cases separately and see why we get different intents in these two cases.</p>

<h2>Killed Process</h2>

<p>In Android, activities, taskes and processes are managed by <code>ActivityManagerService</code> and each activity has a corresponding <code>ActivityRecord</code>. As we can see, <code>ActivityRecord</code> stores lots of information related to the activity.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/** ActivityRecord.java **/</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * An entry in the history stack, representing an activity.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">final</span> <span class="kd">class</span> <span class="nc">ActivityRecord</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">.....</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">final</span> <span class="n">ActivityManagerService</span> <span class="n">service</span><span class="o">;</span> <span class="c1">// owner</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">ActivityInfo</span> <span class="n">info</span><span class="o">;</span>              <span class="c1">// all about me</span>
</span><span class='line'>    <span class="kd">final</span> <span class="n">Intent</span> <span class="n">intent</span><span class="o">;</span>                  <span class="c1">// the original intent that generated us</span>
</span><span class='line'>    <span class="n">TaskRecord</span> <span class="n">task</span><span class="o">;</span>                      <span class="c1">// the task this is in</span>
</span><span class='line'>    <span class="n">ActivityRecord</span> <span class="n">resultTo</span><span class="o">;</span>              <span class="c1">// who started this entry, so will get our reply</span>
</span><span class='line'>    <span class="n">Bundle</span>  <span class="n">icicle</span><span class="o">;</span>                       <span class="c1">// last saved activity state</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">.....</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you launch a <code>singleTop</code> activity using intent A, some process(maybe the Launcher) sends a request to <code>ActivityManagerService</code>(through Binder RPC) and <code>ActivityManagerService</code> creates an <code>ActivityRecord</code>. Now the intent variable of the new <code>ActivityRecord</code> object is A. Then <code>ActivityManagerService</code> may create the application process(if not exists) and asks the application process(through Binder RPC) to launch the specified <code>Activity</code> using intent A. In the application process, <code>ActivityThread</code> receives and handles the request. It creates an <code>Activity</code> object and calls lifecycle methods.</p>

<p>Then you launch the activity again using intent B and <code>ActivityManagerService</code> receives the request. It finds that there&rsquo;s already an <code>ActivityRecord</code> on the top of the stack, so it decides to deliver the new intent B to this existing activity. Here we have to notice that the intent variable of the <code>ActivityRecord</code> object is still A and it&rsquo;s immutable(final). After <code>ActivityManagerService</code> sends the new intent request, <code>ActivityThread</code> receives it and calls activity&rsquo;s <code>onNewIntent</code> method.</p>

<p>At some point, Android decides to kill the application process due to low memory. After that, you navigate back to this activity and <code>ActivityManagerService</code> has to relaunch it using the information stored in <code>ActivityRecord</code>. As you can see, <code>ActivityRecord</code> only stores the original inten(A) and the latest one(B) is lost. Why? Becuase the latest intent is only stored in the <code>Activity</code> and now the activity(process) is killed! So, in this case, you&rsquo;ll get the original intent after Android relaunches the activity.</p>

<h2>Configuration Change</h2>

<p>After you launch the activity again using intent B, you decide to rotate the screen. Now we have the configuration change. When <code>ActivityManagerService</code> detects configuration changes, it relaunches the current activity by sending a request to <code>ActivityThread</code>. <code>ActivityThread</code> handles the request and relaunches the activity.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/** ActivityThread.java **/</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleRelaunchActivity</span><span class="o">(</span><span class="n">ActivityClientRecord</span> <span class="n">tmp</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">......</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ActivityClientRecord</span> <span class="n">r</span> <span class="o">=</span> <span class="n">mActivities</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">tmp</span><span class="o">.</span><span class="na">token</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Intent</span> <span class="n">currentIntent</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="na">activity</span><span class="o">.</span><span class="na">mIntent</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Need to ensure state is saved.</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">r</span><span class="o">.</span><span class="na">paused</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">performPauseActivity</span><span class="o">(</span><span class="n">r</span><span class="o">.</span><span class="na">token</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">r</span><span class="o">.</span><span class="na">isPreHoneycomb</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">r</span><span class="o">.</span><span class="na">state</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">r</span><span class="o">.</span><span class="na">stopped</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">r</span><span class="o">.</span><span class="na">isPreHoneycomb</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">r</span><span class="o">.</span><span class="na">state</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Bundle</span><span class="o">();</span>
</span><span class='line'>        <span class="n">r</span><span class="o">.</span><span class="na">state</span><span class="o">.</span><span class="na">setAllowFds</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>        <span class="n">mInstrumentation</span><span class="o">.</span><span class="na">callActivityOnSaveInstanceState</span><span class="o">(</span><span class="n">r</span><span class="o">.</span><span class="na">activity</span><span class="o">,</span> <span class="n">r</span><span class="o">.</span><span class="na">state</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">handleDestroyActivity</span><span class="o">(</span><span class="n">r</span><span class="o">.</span><span class="na">token</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">configChanges</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">r</span><span class="o">.</span><span class="na">activity</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="n">r</span><span class="o">.</span><span class="na">window</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">......</span>
</span><span class='line'>    <span class="n">handleLaunchActivity</span><span class="o">(</span><span class="n">r</span><span class="o">,</span> <span class="n">currentIntent</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we can see, <code>ActivityThread</code> finds the activity and stores its latest intent in a variable. Then it destroys the activity and relaunches the activity using the latest intent. Because the application process is not killed in this case, the latest intent is not lost and we can get it after Android relaunches the activity.</p>

<h2>Conclusion</h2>

<p>Because you don&rsquo;t know which intent you will get after Android relaunches the activity, you should use <code>savedInstanceState</code> to restore activity&rsquo;s state. In fact, <code>ActivityRecord</code> stores activity&rsquo;s <code>savedInstanceState</code> in its icicle variable, so it won&rsquo;t be lost!</p>

<h2>Reference</h2>

<p><a href="https://groups.google.com/forum/#!topic/android-developers/vrLdM5mKeoY">https://groups.google.com/forum/#!topic/android-developers/vrLdM5mKeoY</a><br />
The source code of ActivityThread, ActivityManagerService, ActivityStackSupervisor, ActivityStack, ActivityRecord, TaskRecord and ProcessRecord.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android.os.Message.what]]></title>
    <link href="http://blog.jjyao.me/blog/2014/01/19/android-dot-os-dot-message-dot-what/"/>
    <updated>2014-01-19T18:36:00-08:00</updated>
    <id>http://blog.jjyao.me/blog/2014/01/19/android-dot-os-dot-message-dot-what</id>
    <content type="html"><![CDATA[<p>Send an android.os.Message whose <em>what</em> is 0 and then remove it, which unexpectedly removes all posted Runnables</p>

<!-- more -->


<h2>Scenario</h2>

<p>I write a Runnable and post it to the main thread, however the Runnable is not executed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// callback from the background thread</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">callback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mHandler</span><span class="o">.</span><span class="na">post</span><span class="o">(</span><span class="k">new</span> <span class="nf">Runnable</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// update UI in the main thread</span>
</span><span class='line'>    <span class="o">});</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Bug</h2>

<p>After posting the Runnable, someone executes the following code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// CUSTOM_MESSAGE_WHAT is 0</span>
</span><span class='line'><span class="n">mHandler</span><span class="o">.</span><span class="na">removeMessages</span><span class="o">(</span><span class="n">CUSTOM_MESSAGE_WHAT</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>and it not only removes the custom message but also removes all posted Runnables in the MessageQueue. The reason is that <strong>android.os.Handler wraps every posted Runnable in an android.os.Message whose <em>what</em> is 0</strong> which conflicts with the <em>what</em> value of the custom message.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/** Handler.java **/</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="nf">post</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">sendMessageDelayed</span><span class="o">(</span><span class="n">getPostMessage</span><span class="o">(</span><span class="n">r</span><span class="o">),</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">Message</span> <span class="nf">getPostMessage</span><span class="o">(</span><span class="n">Runnable</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Message</span> <span class="n">m</span> <span class="o">=</span> <span class="n">Message</span><span class="o">.</span><span class="na">obtain</span><span class="o">();</span>
</span><span class='line'>    <span class="n">m</span><span class="o">.</span><span class="na">callback</span> <span class="o">=</span> <span class="n">r</span><span class="o">;</span>
</span><span class='line'>    <span class="c1">// if not specified otherwise, m.what is 0 which is the default value</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">m</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Solution</h2>

<p>Never use 0 as the <em>what</em> value of custom messages</p>

<h2>Reference</h2>

<p>The source code of android.os.Handler, android.os.Message and android.os.MessageQueue</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Does Your App Have a Rock Solid SSL Connection]]></title>
    <link href="http://blog.jjyao.me/blog/2013/07/31/does-your-app-have-a-rock-solid-ssl-connection/"/>
    <updated>2013-07-31T20:32:00-07:00</updated>
    <id>http://blog.jjyao.me/blog/2013/07/31/does-your-app-have-a-rock-solid-ssl-connection</id>
    <content type="html"><![CDATA[<p>SSL(Secure Sockets Layer)是目前广泛用来加密网络通信的加密协议。它的一个著名应用就是HTTPS，也就是使用SSL协议对HTTP进行加密从而使得整个通信更加安全。对于一个移动应用（其他类型的客户端也同理），为了保证其和服务器的通信安全，开发者就会使用SSL来加密客户端和服务器之间的通信。这样理应是安全的，但由于很多开发者使用方式不对，导致客户端和服务器之间的SSL通信会受到中间人攻击(Man-in-the-middle attack)，从而使得安全性荡然无存。本文将首先介绍下SSL和中间人攻击的原理，然后会提供一个中间人攻击的实例，最后本文介绍该如何防止中间人攻击。</p>

<!-- more -->


<h2>SSL原理</h2>

<p>SSL加密本质上就是用一个只有客户端和服务器知道的对称密钥加密网络上的数据包以达到保密的目的。在这里最主要的问题是如何产生<strong>只有</strong>客户端和服务器知道的对称密钥，SSL协议解决这个问题的过程被称为SSL的握手(handshake)。下面就简要描述下客户端和服务器建立了socket连接后SSL握手的过程（这是个简化版的描述，详细内容可见本文给出的参考资料）：</p>

<ol>
<li>客户端向服务器发送一个ClientHello消息（明文），包括了客户端支持的一系列加密算法、压缩算法和一个随机数(ClientRandom)。</li>
<li>服务器接收到ClientHello后就可以知道客户端支持哪些加密算法和压缩算法，然后服务器就可以选择一个客户端和服务器都支持的加密算法和压缩算法来作为接下来SSL连接中要使用的算法。选择好算法后服务器向客户端发送一个ServerHello消息（明文），包括了选择好的加密算法、压缩算法和一个随机数(ServerRandom)。</li>
<li>发送完ServerHello消息后，服务器紧接着又发送了一个Certificate消息（明文），包括了服务器的证书。这个证书是由CA颁发用来验证服务器身份的，里面包含了服务器的公钥等信息。</li>
<li>发送完Certificate消息后，服务器又发送了一个ServerHelloDone消息（明文），这是一个空的消息，表明服务器已经发送了这阶段要发送的全部信息，等待客户端的反馈。</li>
<li>客户端验证服务器证书的有效性，如果确认有效那么客户端会向服务器发送一个ClientKeyExchange消息（密文），这个消息由服务器证书中提供的公钥加密，包括了一个PreMasterSecret。PreMasterSecret是一个48字节的值，由两个版本号字节以及46个随机产生的字节组成，可以将其看做是一个随机数。</li>
<li>服务器收到ClientKeyExchange消息后用自己的私钥解密就可以得到PreMasterSecret。至此，客户端和服务器都拥有了三个随机数，分别是：ClientRandom, ServerRandom和PreMasterSecret。然后客户端和服务器都运行同一个密钥导出函数，将上述三个随机数作为input，产生的output中就包含了接下来用来加密应用数据的对称密钥。</li>
<li>发送完ClientKeyExchange消息后，客户端又发送了ChangeCipherSpec消息和Finished消息来表明客户端已结束握手过程。</li>
<li>最后服务器也发送了ChangeCipherSpec消息和Finished消息来表明服务器已结束握手过程。</li>
<li>到此为止整个SSL握手过程就结束了，接下来客户端和服务器就开始用握手阶段得到的对称密钥来加密应用数据。</li>
</ol>


<p>从上面描述的握手过程可以得知PreMasterSecret是一个<strong>只有</strong>客户端和服务器知道的值（因为它是客户端生成的，所以客户端知道。同时它是用服务器的公钥加密后传给服务器的，所以只有服务器手上的私钥能够解密）。而PreMasterSecret是产生对称密钥的一个input，由于input只有客户端和服务器知道，因此产生的output也就是对称密钥就只有客户端和服务器知道了，所以使用SSL来加密通信数据是安全的。有人可能会问那么ClientRandom和ServerRandom是用来干什么的呢（剧透：防止replay攻击）？使用SSL加密后的数据是无法被第三者解密了，但是又如何保证数据的完整性呢（剧透：使用MAC）？SSL是不是还能防止其他各类攻击（剧透：还能防止截断攻击等）？SSL不是用来加密数据的么，为什么还涉及数据压缩（剧透：压缩得在加密之前）？上述的握手过程只是一个简化版本，那么完整的握手过程又是怎样的呢（剧透：完整的握手可能还涉及到会话恢复和客户端认证等）？上述问题以及可能产生的其他关于SSL的疑问都可以在《SSL and TLS - Designing and Building Secure Systems》中找到答案，这本书写的非常好，值得一读（中文翻译的也还行）。</p>

<h2>中间人攻击原理</h2>

<p>中间人攻击的本质就是客户端以为它在和服务器通信，实际上它是在和中间人通信。服务器以为它在和客户端通信，实际上它也在和中间人通信。对于SSL来说，客户端和服务器都以为它们和对方建立了一条SSL连接，而实际上它们分别和中间人建立了一条SSL连接。这样的后果就是中间人能够得到客户端和服务器之间传输数据的明文，还能任意更改数据。下图是中间人攻击的示意图：</p>

<p><img src="http://blog.jjyao.me/images/post/is-ssl-security-of-your-app-rock-solid/MITM.png"></p>

<p>在上图中Mallory就是中间人，在Alice（客户端）和Bob（服务器）建立SSL连接的过程中，Mallory截获Alice发出的ClientHello等消息，然后假装自己是Bob回应ServerHello等信息，这样Alice和Mallory之间就建立了一条SSL连接。同时Mallory假装自己是Alice，和Bob之间也建立了一条SSL连接。这样Alice发出的数据Mallory可以解密并修改，然后Mallory可以将数据通过它和Bob之间的SSL连接再传给Bob。而Bob的返回数据Mallory也可以解密并修改，然后再传给Alice。</p>

<p>从上面的描述可以看到中间人攻击的关键就是Alice把Mallory当成了Bob，而这实际上可以通过SSL握手过程中的验证服务器证书来避免的。只要Alice仔细检查收到的证书确实是Bob的，那中间人攻击就失效了。因为Mallory给Alice的一定是Mallory的证书，只有这样Mallory才有私钥来解密PreMasterSecret。假设Mallory给Alice的是Bob的证书，那么Mallory是没有Bob的私钥去解密PreMasterSecret的，也就说其不能得到对称密钥，自然也就无法解密Alice加密后的数据。</p>

<h2>中间人攻击实例</h2>

<p>很多App（客户端）的开发者没有正确地检查建立SSL连接时收到的服务器证书，从而使得中间人攻击成为了可能。我就对自己手机上装的一个App成功实施了中间人攻击，获取了它和服务器传输的内容，下面就简要介绍下攻击的过程：</p>

<ol>
<li>首先是在Mac上安装Charles，这是一个sniffer工具，支持中间人攻击。</li>
<li>然后配置iPhone和Mac，使得iPhone把Mac作为代理连接网络，这样Charles就有机会截获iPhone上发出的数据包了。</li>
<li>接着在iPhone上装Charles的根CA证书。Charles作为中间人发给客户端的是自己CA签署的证书，而这个CA不是iPhone默认认为的可信任CA，所以要手动把Clarese的CA加入可信任CA列表。</li>
<li>打开手机上的App，然后在Charles中就可以发现App发出的数据了（尽管App使用的是SSL连接）。</li>
</ol>


<p>更详细的做法请参见<a href="https://www.cocoanetics.com/2010/12/how-to-spy-on-the-web-traffic-of-any-app/">这里</a>。下面就给出几张攻击的截图：</p>

<p><img src="http://blog.jjyao.me/images/post/is-ssl-security-of-your-app-rock-solid/example1.png"></p>

<p><img src="http://blog.jjyao.me/images/post/is-ssl-security-of-your-app-rock-solid/example2.png"></p>

<p><img src="http://blog.jjyao.me/images/post/is-ssl-security-of-your-app-rock-solid/example3.png"></p>

<p>从截图中可以看出我已经获得了这个应用和服务器传输的所有数据。</p>

<h2>防止中间人攻击</h2>

<p>为了防止中间人攻击，客户端需要检查SSL握手时获得的证书确实来自其想要连接的服务器，使用的技术叫做Certificate and Public Key Pinning。最简单的做法就是在客户端存放服务器的证书，然后每次建立SSL连接的时候都将远程获得的证书和本地的相比较，只有两者完全一样才认为没有受到中间人攻击，否则就应该拒绝建立连接。这种做法虽然实现简单，但问题是证书的内容很容易改变（比如证书过期后就需要重新获得一个全新的证书），因此每当证书变化时旧版应用就无法连接服务器了，需要让用户升级应用，对用户来说这显然不够好。另一种较好的方法是只比较证书中subjectPublicKeyInfo部分而不是整个证书。相对于整个证书而言，这个部分变动概率很小并且其包含了要验证的最主要东西也就是服务器的公钥，因为只要公钥对了，那么加密的数据就只有拥有对应私钥的服务器才能解密了。对于pinning的更多资料请参见<a href="https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning">这里</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Review on American Dreams in China]]></title>
    <link href="http://blog.jjyao.me/blog/2013/06/16/review-on-american-dreams-in-china/"/>
    <updated>2013-06-16T11:35:00-07:00</updated>
    <id>http://blog.jjyao.me/blog/2013/06/16/review-on-american-dreams-in-china</id>
    <content type="html"><![CDATA[<p>这两天看了陈可辛导演的《中国合伙人》和柴静对新东方三位联合创始人的采访，感受颇多。创业奋斗路上风风雨雨，有太多的东西值得我们去学习，去感悟。下面就聊聊我所感悟到的东西：</p>

<ol>
<li>合伙人的品质</li>
<li>老大的品质</li>
<li>和比自己优秀的人在一起</li>
<li>老俞的安眠药</li>
</ol>


<!-- more -->


<h2>合伙人的品质</h2>

<p>创业之艰辛困难，非一人之力可以完成，必须依靠整个团队的努力，因此找到优秀的合伙人就非常重要。从电影和采访中可以看出俞敏洪找到了两位非常优秀的合伙人，共同奠定了新东方的基业。王强和徐小平所具有的合伙人品质值得所有想要创业的人去了解，对于像俞敏洪这样位置的人可以参考这些品质去选择自己的合伙人，而对于想要成为合伙人的人则可以从中寻找可以借鉴的品质，使自己成为一名优秀的合伙人。首先王强和徐小平自身的个人能力非常出众，这也就成功避免了猪队友的问题，同时他们的能力能和俞敏洪的互补，达到1+1>2的效果，这个对我们的启发就是在找合伙人的时候，一定要选优秀有能力的人才，这样才能促进公司的发展。当然在选择普通员工的时候也需要坚守同样的标准，一定要宁缺毋滥。另外王强和徐小平会尽一切努力去帮助俞敏洪管理好新东方。如果俞敏洪是刘备的话，那么王强和徐小平就是辅佐他的诸葛亮。徐小平在采访中说过他在新东方的使命就是要指导俞敏洪、批判俞敏洪，改造俞敏洪。尽管在这个过程中有争吵、有冲突、有对抗，但是最终的目的始终没有变过那就是帮助俞敏洪把新东方做的更好。正是三人齐心协力，才有了新东方的巨大成功。也就是说合伙人要有共同的目标，不能各怀心思，只有这样才能力往一处使，才能获得成功。</p>

<h2>老大的品质</h2>

<p>合伙人有合伙人应有的品质，而老大也需要有一些特殊的品质。俞敏洪这样一位新东方的老大，身上的品质也同样值得所有想要创业的人去了解。首先俞敏洪懂得寻找优秀的人才并能管理他们，他知道新东方要成功靠的不是他一个人而是一群人。新东方的明星教师很多，有罗永浩、陈虎平和杜昶旭等，这些人共同铸就了新东方的辉煌。和俞敏洪相反的就是李阳，他虽然能力很强，但不善于吸收优秀人才，有点个人英雄主义，他的疯狂英语没听说有什么著名教师（除了他自己）。这两者的差别在一定程度上造成了新东方和李阳疯狂英语在英语教育领域截然不同的地位。从这可以看出，作为老大需要有吸收和管理人才的能力，一个充满战斗力的团队（而不是个人）才是成功的关键。另外俞敏洪能忍，有承受能力。一方面他能忍受王强和徐小平对他的尖锐批评，这是需要一定胸怀的，一般人不一定能够承受的住。但就像采访中王强所说的那样“大家的怨气其实不是怨气是期望”，俞敏洪需要承受大家对他的期望，并努力提升自己以达到众人的期望。如果达不到大家的期望，俞敏洪又怎么能够领导他们呢？另一方面俞敏洪也要忍受创业中作为老大所面临的种种压力。采访中提到俞敏洪的家摆了一排安眠药的瓶子，他长期失眠，从这个侧面可以看出在创业过程中俞敏洪承受的巨大精神压力。另外徐小平也提到当时在新东方骂完老俞后自己就回家睡觉了，睡不着是老俞的事，而现在他自己做了老大，失眠的就是他了，由此可见老大的压力是巨大的。采访中还提到股东们轮流坐庄体会完老大的滋味后，没人愿意干了，俞敏洪又被请了回来，可见当老大可不是件轻松的事情。从俞敏洪忍受的这些压力来看，他拿45%的股份而王强和徐小平各拿10%也是很合理的，因为他们所承受的不一样。从这可以看出作为老大要能忍，要能忍受团队成员对他的批评，要能忍受创业过程中的种种压力。</p>

<h2>和比自己优秀的人在一起</h2>

<p>不管是在电影中还是采访中，俞敏洪都被人认为是“农民”、“土鳖”，而王强和徐小平则才华横溢，光彩耀人。在北大读书的时候，俞敏洪就跟着两人学习。他虚心接受王强班长的教诲，当知道王强最近看过什么书后就会立即补上，深怕落下。在王强和徐小平面前，俞敏洪就是个学生，总是抱着学习的心态去向两人请教。这不就是我们常说的“和比自己优秀的人在一起”吗。在学习生活中，我们需要和比自己优秀的人在一起，这样可以拓宽我们的视野，激励我们努力奋斗。和比自己优秀的人在一起可以让我们有机会聆听他们的教诲，这会让我们受益匪浅。和比自己优秀的人在一起可以让我们近距离观察他们，从而有机会发现他们身上的优良品质并获得它们。和比自己优秀的人在一起可以有效地防止成为井底之蛙，让我们清楚地认识到天外有天，人外有人。有了这种清醒的认识之后，我们就不会有自负的心理，就能静下心来努力学习，向这些比我们优秀的人看齐。但与此同时我们也需要调整心态防止自卑心理的产生，除了横向比较，我们更要纵向比较。和这些比自己优秀的人在一起后，虽然相对于他们自己仍是个“土鳖”，但是so what，只要自己本身有了成长和进步那就足够了。在生活中，还有一类人由于面子问题，不愿意承认别人比自己优秀，不愿放下面子虚心向别人学习，这时想想老俞就行了，他能虚心向王强和徐小平学习，能承认自己是“土鳖”，我们为什么不可以？</p>

<h2>老俞的安眠药</h2>

<p>人们往往只注意到那些成功人士（每个人对成功的定义不同，在这里姑且指那些创业成功的人吧）人前风光的一面，而没有看到他们背后付出的艰辛。就比如说人们往往只看到老俞在万千大学生面前做人生导师的风光，却没有看到他背后那一排安眠药。当然这个还能延伸到其他方面，比如人们往往只看到学霸那恐怖的成绩，却没有看到他们那日日夜夜蹲图书馆的日子。再比如人们往往只看到就业之星那令人羡慕的offer，却没有看到他们多年来为之做出的准备。很多人看到那些成功人士很是羡慕，都想要成为他们那样的人，但他们不知道要想成为这些成功人士，要付出多少的艰辛。所以当我们看那些成功人士时，除了要看他们表面的风光，还要特别留意他们背后的那排安眠药。当我们想要创业时，要想想我们已经准备好吃下老俞的安眠药了吗。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Close Look Into PHP Zval]]></title>
    <link href="http://blog.jjyao.me/blog/2013/03/17/a-close-look-into-php-zval/"/>
    <updated>2013-03-17T13:43:00-07:00</updated>
    <id>http://blog.jjyao.me/blog/2013/03/17/a-close-look-into-php-zval</id>
    <content type="html"><![CDATA[<p>最近研究了一下PHP variable的内部实现也就是zval，以及引申出来的Copy on Write, Reference等概念和机制。为了检验一下我是不是真的弄懂了，一个好的方法就是看能不能把它清楚地写下来并让人能够读懂。</p>

<!-- more -->


<h2>什么是zval</h2>

<p>简单的来说zval就是PHP variable的value在低层C的表示。大家都知道PHP主要是用C语言来写的，于是所有东西应该都有一个C的对应，PHP variable的value对应就是zval struct。首先先来看一下zval struct的定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">union</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">lval</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">double</span> <span class="n">dval</span><span class="p">;</span>
</span><span class='line'>        <span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>            <span class="kt">char</span> <span class="o">*</span><span class="n">val</span><span class="p">;</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">len</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span> <span class="n">str</span><span class="p">;</span>
</span><span class='line'>        <span class="n">HashTable</span> <span class="o">*</span><span class="n">ht</span><span class="p">;</span>
</span><span class='line'>        <span class="n">zend_object_value</span> <span class="n">obj</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>    <span class="n">zend_uint</span> <span class="n">refcount</span><span class="p">;</span>
</span><span class='line'>    <span class="n">zend_uchar</span> <span class="n">type</span><span class="p">;</span>
</span><span class='line'>    <span class="n">zend_uchar</span> <span class="n">is_ref</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">zval</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来我们就从最简单的开始，逐一解释一下各个字段的含义。</p>

<h3>type</h3>

<p>首先是<code>type</code>字段，这个顾名思义就是表示PHP variable是什么类型的。由于PHP是动态类型语言，因此需要这个字段来标识，同时根据这个字段可以判断出<code>value</code>字段里的值到底是什么。</p>

<h3>value</h3>

<p><code>value</code>字段存放的是PHP variable的值，可以看出这是个union类型，也就是说这个字段可以有多种解释，关键看<code>type</code>的值是什么，这不就有点像多态么。接下里我们就看看<code>type</code>和<code>value</code>的对应关系是什么：</p>

<table>
<thead>
<tr>
<th style="text-align:center;">PHP variable type </th>
<th style="text-align:center;"> zval value            </th>
<th style="text-align:center;"> Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;">Long              </td>
<td style="text-align:center;"> long lval             </td>
<td></td>
</tr>
<tr>
<td style="text-align:center;">Double            </td>
<td style="text-align:center;"> double dval           </td>
<td></td>
</tr>
<tr>
<td style="text-align:center;">String            </td>
<td style="text-align:center;"> struct{…} str         </td>
<td></td>
</tr>
<tr>
<td style="text-align:center;">Resource          </td>
<td style="text-align:center;"> long lval             </td>
<td style="text-align:center;"> 存放的只是resource的identifier,而不是resource本身</td>
</tr>
<tr>
<td style="text-align:center;">Boolean           </td>
<td style="text-align:center;"> long lval             </td>
<td style="text-align:center;"> 0表示FALSE，1表示TRUE</td>
</tr>
<tr>
<td style="text-align:center;">Array             </td>
<td style="text-align:center;"> HashTable *ht         </td>
<td style="text-align:center;"> PHP的很多东西都是用HashTable来实现的</td>
</tr>
<tr>
<td style="text-align:center;">Ojbect            </td>
<td style="text-align:center;"> zend_object_value obj </td>
<td></td>
</tr>
<tr>
<td style="text-align:center;">NULL              </td>
<td style="text-align:center;">                       </td>
<td style="text-align:center;"> NULL本身也是一种类型，但它不需要使用<code>value</code>字段</td>
</tr>
</tbody>
</table>


<p>其中Long, Double, String, Boolean, NULL应该是很清晰了，用zval可以完全表示，略复杂一点的是Object,Array和Resource。在这里我们就只讨论Ojbect和Array。</p>

<h4>Object</h4>

<p>从上面的对应表可以看出Object的value是用<code>zend_object_value</code>这个struct来表示的，我们就看看这个struct的定义：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">zend_object_handle</span> <span class="n">handle</span><span class="p">;</span>
</span><span class='line'>    <span class="n">zend_object_handlers</span> <span class="o">*</span><span class="n">handlers</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="n">zend_object_value</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这里要说明的是一个ojbect的data并不是直接存放在zend_object_value里面的，而是放在object store中，也就是说每个object都有一个对应的object store（这应该也是用HashTable来实现的吧），里面放着object的data，也就是object属性的值，这些值本身也是一个个的zval。接下里PHP要做的就是建立object和object store的一一对应关系，而这个就是通过<code>zend_object_handle handle</code>来实现的，这是一个long值，相当于object store的identifier,通过这个<code>handle</code>就可以找到object的data在那里了。而<code>zend_object_handlers *handlers</code>指向了一些处理函数，比如用来访问object属性的函数等等，这个在这里就不再详述了，有兴趣的可以看<a href="https://wiki.php.net/internals/engine/objects">这里</a>。讲到这里，我们应该知道了对于object的zval来说本身并没有存放object的data，而只是存放了一个整数型的handle。认识到这一点很重要，因为这会对接下来讨论的copy by reference和copy by value产生直接的影响。</p>

<h4>Array</h4>

<p>PHP的Array是用HashTable来实现的，通过这个就可以存放Array中的Key-Value了。关于这个HashTable具体是如何实现的，可以看<a href="http://nikic.github.com/2012/03/28/Understanding-PHPs-internal-array-implementation.html">这里</a>。我根据那个tutorial画了个示意图如下：</p>

<p><img src="http://blog.jjyao.me/images/post/a-close-look-into-php-zval/zval.6.png"></p>

<p>在这里我们要知道的是Key-Value中的value也就是一个个的zval，就和object的属性值一样，HashTable中就存放着指向这些zval的指针。</p>

<h3>refcount &amp; if_ref</h3>

<p>看完了<code>type</code>和<code>value</code>字段，接下来就看看<code>refcount</code>和<code>if_ref</code>字段，这两个字段关系到gc,关系到copy by value和copy by reference，所以非常重要，需要仔细讲解。<code>refcount</code>表明当前有多少个variable指向了这个zval，这个信息就可以用来gc，当<code>refcount</code>变为0后，这个zval就可以被回收。<code>if_ref</code>表明当前指向这个zval的variable是不是reference。在PHP中一个variable可以是value type就像这样<code>$b = $a</code>或者是reference type就像这样<code>$b = &amp;$a</code>。在语义上这两者是不同的，因此也就拥有不同的行为，我们首先要区分这两种类型的variable，这个通过代码解释最好不过了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='PHP'><span class='line'><span class="nv">$a</span> <span class="o">=</span> <span class="s1">&#39;hello&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$b</span> <span class="o">=</span> <span class="nv">$a</span><span class="p">;</span> <span class="c1">// $b is value type</span>
</span><span class='line'><span class="nv">$a</span> <span class="o">=</span> <span class="s1">&#39;world&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$a</span><span class="p">);</span> <span class="c1">// &#39;world&#39;</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$b</span><span class="p">);</span> <span class="c1">// &#39;hello&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$a</span> <span class="o">=</span> <span class="s1">&#39;hello&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$b</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nv">$a</span><span class="p">;</span> <span class="c1">// $b is reference type</span>
</span><span class='line'><span class="nv">$a</span> <span class="o">=</span> <span class="s1">&#39;world&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$a</span><span class="p">);</span> <span class="c1">// &#39;world&#39;</span>
</span><span class='line'><span class="nb">var_dump</span><span class="p">(</span><span class="nv">$b</span><span class="p">);</span> <span class="c1">// &#39;world&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面一段代码可以看出如果$b是value type的话，它的值并不会随着$a的改变而改变，就好像在执行<code>$b = $a</code>时，<code>$a</code>的值(zval)被复制了一份，也就是说<code>$a</code>和<code>$b</code>拥有自己独立的zval，两者互不影响。而如果是reference type的话，就如同<code>$a</code>和<code>$b</code>共用了一个zval，不管是改变<code>$a</code>，还是<code>$b</code>，其实都是改变一个zval。但事实没有这么简单，如果真像上面所说的那样执行<code>$b = $a</code>时，zval复制了一份，那么效率也太低了，因为有可能<code>$b</code>和<code>$a</code>在接下来的使用过程中都是只读的，它们本可以共用一个zval而不会出问题。那么PHP究竟是如何实现的呢，答案就是通过<code>refcount</code>和<code>if_ref</code>实现了copy on write机制。而这个copy on write机制对于不同<code>type</code>的变量也会有些不同的表现，接下来我们就通过一系列的图例来理解这个机制。</p>

<p><img src="http://blog.jjyao.me/images/post/a-close-look-into-php-zval/zval.1.png">
<img src="http://blog.jjyao.me/images/post/a-close-look-into-php-zval/zval.2.png">
<img src="http://blog.jjyao.me/images/post/a-close-look-into-php-zval/zval.3.png"></p>

<p>前两张图大家应该很好理解，可以清楚的看到copy on write的发生并可以看到<code>if_ref</code>和<code>refcount</code>的作用，PHP正是依赖于<code>if_ref</code>和<code>refcount</code>来决定是否需要copy on write。而从第三张图中可以看到在没有<code>write</code>发生的情况下就发生了<code>copy</code>，而这是为什么呢，貌似<code>$a</code>、<code>$b</code>和<code>$c</code>可以共用一个zval的呀。原因其实很简单，那就是如果这三个变量共用一个zval那么<code>is_ref</code>的值就不知道该填什么了，<code>0</code>或<code>1</code>都不正确，因为这三个变量中既有value type又有reference type。如果<code>is_ref</code>为<code>0</code>那么<code>$a</code>和<code>$c</code>是reference关系这个信息就无法表达,PHP会认为<code>$a</code>、<code>$b</code>和<code>$c</code>是value type，改变其中任何一个的值并不会对另外两个造成影响，这显然不对。如果<code>is_ref</code>为<code>1</code>那么PHP会认为<code>$a</code>、<code>$b</code>和<code>$c</code>是reference type，改变其中任何一个的值都会反映在另外两个上，这显然也是不对的。综上所述在这种情况下只能copy出一份zval出来，这样才能保证接下来不管是操作<code>$a</code>、<code>$b</code>或者<code>$c</code>都不会出问题。之前的这三种图展示的是type为Long的variable的情况，而Boolean、Double、String和Long是一样的，就不再画出来了，而Array和Object比较复杂，情况也特殊，所以拿出来单独讨论。</p>

<p><img src="http://blog.jjyao.me/images/post/a-close-look-into-php-zval/zval.4.png">
<img src="http://blog.jjyao.me/images/post/a-close-look-into-php-zval/zval.5.png"></p>

<p>从上面两张图看出Array和Object的行为存在着显著的不同，Array拥有<code>by-value semantics</code>而Object拥有<code>by-reference semantics</code>。Array的表现更像之前提到的Long type，也会有Copy on Write行为，而它的Copy从上图中可以看出比较智能，只Copy那些必须的zval。而Object则不一样，不管是value type还是reference type，它们都共用一个object store，也就是说任何属性的值发生了变化，所有指向这个object的variable都能知道，就好像Copy on Write对Object不起作用了。为了强制Copy，最后执行了<code>$c = &amp;$a</code>这条语句，为什么这条语句能强制使zval copy一份的原理在上面已经讲过了，这里就不再复述。这里有趣的是zval确实copy了一份，但是两个zval还是指向了同一个object store，也就是说不管通过<code>$a</code>、<code>$b</code>或者<code>$c</code>改变了某个属性，这三个变量都能知道。那么zval的copy到底做了什么呢？还记得上面提到过<code>zend_object_value</code>中只是存放了一个整型的<code>handle</code>字段，而通过这个字段可以找到object store在哪，那么zval的copy也就只会将这个<code>handle</code>字段copy一份，于是两个zval中拥有同样的<code>handle</code>值，它们就当然指向了同一个object store。那么如何让Object发生像Array那样类似的Copy呢，PHP为此提供了<code>clone</code>关键字。</p>

<p>说到这差不多把zval给讲清楚了，同时也讲了一下Copy on Write机制，Value type和Reference type的区别。有了上面的解释，我们也应该能知道函数传参的Pass by Value和Pass by Reference的区别了，在这里就不多说了。如果有人想看更多类似我上面的图的话，可以看<a href="http://andrey.hristov.com/projects/php_stuff/Internals%20Exposed.pdf">这里</a>。如果有人想问我是怎么知道低层zval的变化的话，可以看<a href="http://www.php.net/manual/en/function.debug-zval-dump.php">这里</a>。最后还可以看看这个和zval有关的<a href="http://stackoverflow.com/questions/10057671/how-foreach-actually-works/">问题</a>。</p>

<h2>参考资料</h2>

<ol>
<li><a href="http://devzone.zend.com/317/extension-writing-part-ii-parameters-arrays-and-zvals/">Extension Writing Part II: Parameters, Arrays, and ZVALs</a></li>
<li><a href="http://blog.ircmaxell.com/2012/03/phps-source-code-for-php-developers_21.html">PHP&rsquo;s Source Code For PHP Developers - Part 3 - Variables</a></li>
<li><a href="http://andrey.hristov.com/projects/php_stuff/Internals%20Exposed.pdf">Zend Engine 2 - Internals Exposed</a></li>
<li><a href="http://nikic.github.com/2012/03/28/Understanding-PHPs-internal-array-implementation.html">Understanding PHP&rsquo;s internal array implementation (PHP&rsquo;s Source Code for PHP Developers - Part 4 )</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
