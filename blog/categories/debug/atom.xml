<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: debug | Jiajun Yao]]></title>
  <link href="http://blog.jjyao.me/blog/categories/debug/atom.xml" rel="self"/>
  <link href="http://blog.jjyao.me/"/>
  <updated>2023-04-20T22:14:05-07:00</updated>
  <id>http://blog.jjyao.me/</id>
  <author>
    <name><![CDATA[jjyao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[You don't exist, go away!]]></title>
    <link href="http://blog.jjyao.me/blog/2017/08/30/you-dont-exist-go-away/"/>
    <updated>2017-08-30T21:10:41-07:00</updated>
    <id>http://blog.jjyao.me/blog/2017/08/30/you-dont-exist-go-away</id>
    <content type="html"><![CDATA[<p>SSH asks me to go way because of ntp clock skew</p>

<!-- more -->


<h2>Scenario</h2>

<p>When I try to ssh to a remote server from my linux desktop, I get:</p>

<pre><code>[jyao@localhost]$ ssh eng-portal
You don't exist, go away!
</code></pre>

<p>Then I realize that my shell prompt changes to <code>[I have no name!@localhost]$</code>. Apparently, <code>whoami</code> stops working:</p>

<pre><code>[I have no name!@localhost]$ whoami
whoami: cannot find name for user ID 16195
</code></pre>

<p>Another thing I find accidentally is that if I disconnect my desktop from internet, <code>whoami</code> works again. So my guess is that <code>whoami</code> tries to get name from a remote server if there is internet connection. Otherwise, it falls back to use a local database which contains the correct data. My first theory is that the data on the remote server is corrupted. To figure out the remote server that <code>whoami</code> talks to, I run <code>strace</code>:</p>

<pre><code>[I have no name!@localhost]$ strace -f -e trace=network -s 10000 whoami
...
connect(3, {sa_family=AF_FILE, path="/var/lib/likewise/.lsassd"}, 110) = 0
...
</code></pre>

<p>So <code>whoami</code> talks to <code>lsassd</code> daemon which then talks to <code>Active Directory</code> server. Based on my first theory, it looks like the data on the <code>Active Directory</code> server is corrupted. To confirm this, I run <code>lw-find-user-by-id</code>:</p>

<pre><code>[I have no name!@localhost]$ /opt/likewise/bin/lw-find-user-by-id 16195
Clock skew detected with active directory server
</code></pre>

<p>Hmm, this means that my first theory is wrong. To confirm the clock skew, I run <code>ntpq</code>:</p>

<pre><code>[I have no name!@localhost]$ ntpq -p
remote           refid      st t when poll reach   delay   offset  jitter
==============================================================================
*lmn1-d1-infra01 10.251.184.29    2 u   44   64  177    1.612  -364830 129.863
+lmn1-d1-infra02 10.251.184.29    2 u   47   64  177    1.512  -364831 129.060
</code></pre>

<p>It turns out that the desktop clock is off by 6 minutes. Now the question arises: why <code>ntpd</code> fails to sync up the correct time with the ntp server after the clock skew happens? After googling, I find that <code>ntpd</code> indeed tries to fix the clock skew but just in a slow speed (<a href="https://serverfault.com/a/608157">https://serverfault.com/a/608157</a>). It takes <code>ntpd</code> more than 1 week to fix 6 minutes skew.</p>

<h2>Solution</h2>

<p>Force <code>ntpd</code> to do sync up using <code>-g</code> option:</p>

<pre><code>// disconnect from internet first as sudo needs whoami to be working
[I have no name!@localhost]$ sudo service ntpd stop
// connect to internet
[I have no name!@localhost]$ sudo ntpd -gq
[I have no name!@localhost]$ sudo service ntpd start
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android.os.Message.what]]></title>
    <link href="http://blog.jjyao.me/blog/2014/01/19/android-dot-os-dot-message-dot-what/"/>
    <updated>2014-01-19T18:36:00-08:00</updated>
    <id>http://blog.jjyao.me/blog/2014/01/19/android-dot-os-dot-message-dot-what</id>
    <content type="html"><![CDATA[<p>Send an android.os.Message whose <em>what</em> is 0 and then remove it, which unexpectedly removes all posted Runnables</p>

<!-- more -->


<h2>Scenario</h2>

<p>I write a Runnable and post it to the main thread, however the Runnable is not executed.</p>

<pre><code class="java">// callback from the background thread
private void callback() {
    mHandler.post(new Runnable() {
        // update UI in the main thread
    });
}
</code></pre>

<h2>Bug</h2>

<p>After posting the Runnable, someone executes the following code:</p>

<pre><code class="java">// CUSTOM_MESSAGE_WHAT is 0
mHandler.removeMessages(CUSTOM_MESSAGE_WHAT)
</code></pre>

<p>and it not only removes the custom message but also removes all posted Runnables in the MessageQueue. The reason is that <strong>android.os.Handler wraps every posted Runnable in an android.os.Message whose <em>what</em> is 0</strong> which conflicts with the <em>what</em> value of the custom message.</p>

<pre><code class="java">/** Handler.java **/
public final boolean post(Runnable r) {
    return sendMessageDelayed(getPostMessage(r), 0);
}

private static Message getPostMessage(Runnable r) {
    Message m = Message.obtain();
    m.callback = r;
    // if not specified otherwise, m.what is 0 which is the default value
    return m;
}
</code></pre>

<h2>Solution</h2>

<p>Never use 0 as the <em>what</em> value of custom messages</p>

<h2>Reference</h2>

<p>The source code of android.os.Handler, android.os.Message and android.os.MessageQueue</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenSSL Read Ahead &amp; Epoll]]></title>
    <link href="http://blog.jjyao.me/blog/2012/08/28/openssl-read-ahead-and-epoll/"/>
    <updated>2012-08-28T12:06:00-07:00</updated>
    <id>http://blog.jjyao.me/blog/2012/08/28/openssl-read-ahead-and-epoll</id>
    <content type="html"><![CDATA[<p>Use epoll with a ssl socket and ignore the OpenSSL read ahead feature</p>

<!-- more -->


<h2>Scenario</h2>

<p>I write a python program to implement IMAP client that uses the IDLE command. So I have a ssl client socket and I use epoll level triggered mode to implement non-blocking socket.</p>

<p>However, epoll doesn&rsquo;t work correctly. For example, in the IDLE mode, IMAP server sends two lines at a time. My client <code>select.epoll()</code> function returns because the ssl socket is readable. Then I read one line and call <code>select.epoll()</code> again. Because I use epoll level triggered mode so the <code>select.epoll()</code> should return immediately because the socket still has one line that is ready for read. But in fact, when I call <code>select.epoll()</code> again, it blocks and doesn&rsquo;t return.</p>

<h2>Bug</h2>

<p>OpenSSL has read ahead feature, which means that it may read more data to its internal buffer. So when I read one line, it may indead read two lines, decrypt and store them to the internal buffer. That is why <code>select.epoll()</code> blocks because all the data in the underlying socket is read to the OpenSSL internal buffer and the socket is unreadable.</p>

<h2>Solution</h2>

<p>Use <code>pending()</code> method to see whether ssl has decrypted bytes that are available for read.</p>

<h2>Reference</h2>

<p>For more information about OpenSSL read ahead feature, you can refer to &ldquo;SSL and TLS Designing and Building Secure Systems&rdquo; section 8.9.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP Single Quoted String]]></title>
    <link href="http://blog.jjyao.me/blog/2012/08/07/php-single-quoted-string/"/>
    <updated>2012-08-07T21:38:00-07:00</updated>
    <id>http://blog.jjyao.me/blog/2012/08/07/php-single-quoted-string</id>
    <content type="html"><![CDATA[<p>Use PHP single quoted string in a case where I should use double quoted string instead</p>

<!-- more -->


<h2>Scenario</h2>

<p>I write a Python Twisted line receiver server, so the server reads one line at a time. Then I write a PHP client to send lines to server.</p>

<pre><code class="php">socket_write($socket, 'it is one line\r\n', strlen);
</code></pre>

<p>However, my server can&rsquo;t receive a whole line and blocked to wait for <strong>\r\n</strong></p>

<h2>Bug</h2>

<p>In a single quoted string, escape sequences you might be used to, such as \r or \n, will be output literally as specified rahter than having any special meaning. So my server receive \r\n literally and doesn&rsquo;t think that it is a new line character.</p>

<h2>Solution</h2>

<p>Change single quotes to double quotes</p>

<pre><code class="php">socket_write($socket, "it is one line\r\n", strlen);
</code></pre>
]]></content>
  </entry>
  
</feed>
